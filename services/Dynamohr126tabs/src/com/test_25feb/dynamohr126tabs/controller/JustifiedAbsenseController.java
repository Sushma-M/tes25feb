/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.JustifiedAbsenseService;
import com.test_25feb.dynamohr126tabs.service.JustifiedLeaveFileService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class JustifiedAbsense.
 * @see com.test_25feb.dynamohr126tabs.JustifiedAbsense
 */

@RestController(value = "Dynamohr126tabs.JustifiedAbsenseController")
@Api(value = "/Dynamohr126tabs/JustifiedAbsense", description = "Exposes APIs to work with JustifiedAbsense resource.")
@RequestMapping("/Dynamohr126tabs/JustifiedAbsense")
public class JustifiedAbsenseController {

    private static final Logger LOGGER = LoggerFactory.getLogger(JustifiedAbsenseController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.JustifiedAbsenseService")
	private JustifiedAbsenseService justifiedAbsenseService;


    @Autowired
    @Qualifier("Dynamohr126tabs.JustifiedLeaveFileService")
    private JustifiedLeaveFileService justifiedLeaveFileService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of JustifiedAbsense instances matching the search criteria.")
	public Page<JustifiedAbsense> findJustifiedAbsenses( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering JustifiedAbsenses list");
		return justifiedAbsenseService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of JustifiedAbsense instances.")
	public Page<JustifiedAbsense> getJustifiedAbsenses(Pageable pageable) {
		LOGGER.debug("Rendering JustifiedAbsenses list");
		return justifiedAbsenseService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of JustifiedAbsense instances.")
	public Long countAllJustifiedAbsenses() {
		LOGGER.debug("counting JustifiedAbsenses");
		Long count = justifiedAbsenseService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the JustifiedAbsense instance associated with the given id.")
    public JustifiedAbsense getJustifiedAbsense(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting JustifiedAbsense with id: {}" , id);
        JustifiedAbsense instance = justifiedAbsenseService.findById(id);
        LOGGER.debug("JustifiedAbsense details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the JustifiedAbsense instance associated with the given id.")
    public boolean deleteJustifiedAbsense(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting JustifiedAbsense with id: {}" , id);
        JustifiedAbsense deleted = justifiedAbsenseService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the JustifiedAbsense instance associated with the given id.")
    public JustifiedAbsense editJustifiedAbsense(@PathVariable("id") Integer id, @RequestBody JustifiedAbsense instance) throws EntityNotFoundException {
        LOGGER.debug("Editing JustifiedAbsense with id: {}" , instance.getIdJustifiedAbsense());
        instance.setIdJustifiedAbsense(id);
        instance = justifiedAbsenseService.update(instance);
        LOGGER.debug("JustifiedAbsense details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/justifiedLeaveFiles", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the justifiedLeaveFiles instance associated with the given id.")
     public Page<JustifiedLeaveFile> findAssociatedjustifiedLeaveFiles(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated justifiedLeaveFiles");
        return justifiedLeaveFileService.findAssociatedValues(id,"justifiedAbsense","idJustifiedAbsense", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new JustifiedAbsense instance.")
	public JustifiedAbsense createJustifiedAbsense(@RequestBody JustifiedAbsense instance) {
		LOGGER.debug("Create JustifiedAbsense with information: {}" , instance);
		instance = justifiedAbsenseService.create(instance);
		LOGGER.debug("Created JustifiedAbsense with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setJustifiedAbsenseService(JustifiedAbsenseService service) {
		this.justifiedAbsenseService = service;
	}
}

