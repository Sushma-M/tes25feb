/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.AssetPhotoFileService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class AssetPhotoFile.
 * @see com.test_25feb.dynamohr126tabs.AssetPhotoFile
 */

@RestController(value = "Dynamohr126tabs.AssetPhotoFileController")
@Api(value = "/Dynamohr126tabs/AssetPhotoFile", description = "Exposes APIs to work with AssetPhotoFile resource.")
@RequestMapping("/Dynamohr126tabs/AssetPhotoFile")
public class AssetPhotoFileController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AssetPhotoFileController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.AssetPhotoFileService")
	private AssetPhotoFileService assetPhotoFileService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of AssetPhotoFile instances matching the search criteria.")
	public Page<AssetPhotoFile> findAssetPhotoFiles( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering AssetPhotoFiles list");
		return assetPhotoFileService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of AssetPhotoFile instances.")
	public Page<AssetPhotoFile> getAssetPhotoFiles(Pageable pageable) {
		LOGGER.debug("Rendering AssetPhotoFiles list");
		return assetPhotoFileService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of AssetPhotoFile instances.")
	public Long countAllAssetPhotoFiles() {
		LOGGER.debug("counting AssetPhotoFiles");
		Long count = assetPhotoFileService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the AssetPhotoFile instance associated with the given id.")
    public AssetPhotoFile getAssetPhotoFile(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting AssetPhotoFile with id: {}" , id);
        AssetPhotoFile instance = assetPhotoFileService.findById(id);
        LOGGER.debug("AssetPhotoFile details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the AssetPhotoFile instance associated with the given id.")
    public boolean deleteAssetPhotoFile(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AssetPhotoFile with id: {}" , id);
        AssetPhotoFile deleted = assetPhotoFileService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the AssetPhotoFile instance associated with the given id.")
    public AssetPhotoFile editAssetPhotoFile(@PathVariable("id") Integer id, @RequestBody AssetPhotoFile instance) throws EntityNotFoundException {
        LOGGER.debug("Editing AssetPhotoFile with id: {}" , instance.getIdAssetPhotoFile());
        instance.setIdAssetPhotoFile(id);
        instance = assetPhotoFileService.update(instance);
        LOGGER.debug("AssetPhotoFile details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new AssetPhotoFile instance.")
	public AssetPhotoFile createAssetPhotoFile(@RequestBody AssetPhotoFile instance) {
		LOGGER.debug("Create AssetPhotoFile with information: {}" , instance);
		instance = assetPhotoFileService.create(instance);
		LOGGER.debug("Created AssetPhotoFile with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setAssetPhotoFileService(AssetPhotoFileService service) {
		this.assetPhotoFileService = service;
	}
}

