/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.ListPeriodicBonusEmployeeService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class ListPeriodicBonusEmployee.
 * @see com.test_25feb.dynamohr126tabs.ListPeriodicBonusEmployee
 */

@RestController(value = "Dynamohr126tabs.ListPeriodicBonusEmployeeController")
@Api(value = "/Dynamohr126tabs/ListPeriodicBonusEmployee", description = "Exposes APIs to work with ListPeriodicBonusEmployee resource.")
@RequestMapping("/Dynamohr126tabs/ListPeriodicBonusEmployee")
public class ListPeriodicBonusEmployeeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListPeriodicBonusEmployeeController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.ListPeriodicBonusEmployeeService")
	private ListPeriodicBonusEmployeeService listPeriodicBonusEmployeeService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ListPeriodicBonusEmployee instances matching the search criteria.")
	public Page<ListPeriodicBonusEmployee> findListPeriodicBonusEmployees( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ListPeriodicBonusEmployees list");
		return listPeriodicBonusEmployeeService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of ListPeriodicBonusEmployee instances.")
	public Page<ListPeriodicBonusEmployee> getListPeriodicBonusEmployees(Pageable pageable) {
		LOGGER.debug("Rendering ListPeriodicBonusEmployees list");
		return listPeriodicBonusEmployeeService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ListPeriodicBonusEmployee instances.")
	public Long countAllListPeriodicBonusEmployees() {
		LOGGER.debug("counting ListPeriodicBonusEmployees");
		Long count = listPeriodicBonusEmployeeService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ListPeriodicBonusEmployee instance associated with the given id.")
    public ListPeriodicBonusEmployee getListPeriodicBonusEmployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ListPeriodicBonusEmployee with id: {}" , id);
        ListPeriodicBonusEmployee instance = listPeriodicBonusEmployeeService.findById(id);
        LOGGER.debug("ListPeriodicBonusEmployee details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ListPeriodicBonusEmployee instance associated with the given id.")
    public boolean deleteListPeriodicBonusEmployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListPeriodicBonusEmployee with id: {}" , id);
        ListPeriodicBonusEmployee deleted = listPeriodicBonusEmployeeService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ListPeriodicBonusEmployee instance associated with the given id.")
    public ListPeriodicBonusEmployee editListPeriodicBonusEmployee(@PathVariable("id") Integer id, @RequestBody ListPeriodicBonusEmployee instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ListPeriodicBonusEmployee with id: {}" , instance.getIdListPeriodicBonusEmployee());
        instance.setIdListPeriodicBonusEmployee(id);
        instance = listPeriodicBonusEmployeeService.update(instance);
        LOGGER.debug("ListPeriodicBonusEmployee details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ListPeriodicBonusEmployee instance.")
	public ListPeriodicBonusEmployee createListPeriodicBonusEmployee(@RequestBody ListPeriodicBonusEmployee instance) {
		LOGGER.debug("Create ListPeriodicBonusEmployee with information: {}" , instance);
		instance = listPeriodicBonusEmployeeService.create(instance);
		LOGGER.debug("Created ListPeriodicBonusEmployee with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setListPeriodicBonusEmployeeService(ListPeriodicBonusEmployeeService service) {
		this.listPeriodicBonusEmployeeService = service;
	}
}

