/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.ApplicantToPositionService;
import com.test_25feb.dynamohr126tabs.service.WorkPositionVacantService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class WorkPositionVacant.
 * @see com.test_25feb.dynamohr126tabs.WorkPositionVacant
 */

@RestController(value = "Dynamohr126tabs.WorkPositionVacantController")
@Api(value = "/Dynamohr126tabs/WorkPositionVacant", description = "Exposes APIs to work with WorkPositionVacant resource.")
@RequestMapping("/Dynamohr126tabs/WorkPositionVacant")
public class WorkPositionVacantController {

    private static final Logger LOGGER = LoggerFactory.getLogger(WorkPositionVacantController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.WorkPositionVacantService")
	private WorkPositionVacantService workPositionVacantService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ApplicantToPositionService")
    private ApplicantToPositionService applicantToPositionService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of WorkPositionVacant instances matching the search criteria.")
	public Page<WorkPositionVacant> findWorkPositionVacants( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering WorkPositionVacants list");
		return workPositionVacantService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of WorkPositionVacant instances.")
	public Page<WorkPositionVacant> getWorkPositionVacants(Pageable pageable) {
		LOGGER.debug("Rendering WorkPositionVacants list");
		return workPositionVacantService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of WorkPositionVacant instances.")
	public Long countAllWorkPositionVacants() {
		LOGGER.debug("counting WorkPositionVacants");
		Long count = workPositionVacantService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the WorkPositionVacant instance associated with the given id.")
    public WorkPositionVacant getWorkPositionVacant(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting WorkPositionVacant with id: {}" , id);
        WorkPositionVacant instance = workPositionVacantService.findById(id);
        LOGGER.debug("WorkPositionVacant details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the WorkPositionVacant instance associated with the given id.")
    public boolean deleteWorkPositionVacant(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting WorkPositionVacant with id: {}" , id);
        WorkPositionVacant deleted = workPositionVacantService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the WorkPositionVacant instance associated with the given id.")
    public WorkPositionVacant editWorkPositionVacant(@PathVariable("id") Integer id, @RequestBody WorkPositionVacant instance) throws EntityNotFoundException {
        LOGGER.debug("Editing WorkPositionVacant with id: {}" , instance.getIdWorkPositionVacant());
        instance.setIdWorkPositionVacant(id);
        instance = workPositionVacantService.update(instance);
        LOGGER.debug("WorkPositionVacant details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/applicantToPositionsForFkWorkPositionVacant", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the applicantToPositionsForFkWorkPositionVacant instance associated with the given id.")
     public Page<ApplicantToPosition> findAssociatedapplicantToPositionsForFkWorkPositionVacant(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated applicantToPositionsForFkWorkPositionVacant");
        return applicantToPositionService.findAssociatedValues(id,"workPositionVacantByFkWorkPositionVacant","idWorkPositionVacant", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new WorkPositionVacant instance.")
	public WorkPositionVacant createWorkPositionVacant(@RequestBody WorkPositionVacant instance) {
		LOGGER.debug("Create WorkPositionVacant with information: {}" , instance);
		instance = workPositionVacantService.create(instance);
		LOGGER.debug("Created WorkPositionVacant with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setWorkPositionVacantService(WorkPositionVacantService service) {
		this.workPositionVacantService = service;
	}
}

