/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.JustifiedTravelExpenseFileService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class JustifiedTravelExpenseFile.
 * @see com.test_25feb.dynamohr126tabs.JustifiedTravelExpenseFile
 */

@RestController(value = "Dynamohr126tabs.JustifiedTravelExpenseFileController")
@Api(value = "/Dynamohr126tabs/JustifiedTravelExpenseFile", description = "Exposes APIs to work with JustifiedTravelExpenseFile resource.")
@RequestMapping("/Dynamohr126tabs/JustifiedTravelExpenseFile")
public class JustifiedTravelExpenseFileController {

    private static final Logger LOGGER = LoggerFactory.getLogger(JustifiedTravelExpenseFileController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.JustifiedTravelExpenseFileService")
	private JustifiedTravelExpenseFileService justifiedTravelExpenseFileService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of JustifiedTravelExpenseFile instances matching the search criteria.")
	public Page<JustifiedTravelExpenseFile> findJustifiedTravelExpenseFiles( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering JustifiedTravelExpenseFiles list");
		return justifiedTravelExpenseFileService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of JustifiedTravelExpenseFile instances.")
	public Page<JustifiedTravelExpenseFile> getJustifiedTravelExpenseFiles(Pageable pageable) {
		LOGGER.debug("Rendering JustifiedTravelExpenseFiles list");
		return justifiedTravelExpenseFileService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of JustifiedTravelExpenseFile instances.")
	public Long countAllJustifiedTravelExpenseFiles() {
		LOGGER.debug("counting JustifiedTravelExpenseFiles");
		Long count = justifiedTravelExpenseFileService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the JustifiedTravelExpenseFile instance associated with the given id.")
    public JustifiedTravelExpenseFile getJustifiedTravelExpenseFile(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting JustifiedTravelExpenseFile with id: {}" , id);
        JustifiedTravelExpenseFile instance = justifiedTravelExpenseFileService.findById(id);
        LOGGER.debug("JustifiedTravelExpenseFile details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the JustifiedTravelExpenseFile instance associated with the given id.")
    public boolean deleteJustifiedTravelExpenseFile(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting JustifiedTravelExpenseFile with id: {}" , id);
        JustifiedTravelExpenseFile deleted = justifiedTravelExpenseFileService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the JustifiedTravelExpenseFile instance associated with the given id.")
    public JustifiedTravelExpenseFile editJustifiedTravelExpenseFile(@PathVariable("id") Integer id, @RequestBody JustifiedTravelExpenseFile instance) throws EntityNotFoundException {
        LOGGER.debug("Editing JustifiedTravelExpenseFile with id: {}" , instance.getIdJustifiedTravelExpenseFile());
        instance.setIdJustifiedTravelExpenseFile(id);
        instance = justifiedTravelExpenseFileService.update(instance);
        LOGGER.debug("JustifiedTravelExpenseFile details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new JustifiedTravelExpenseFile instance.")
	public JustifiedTravelExpenseFile createJustifiedTravelExpenseFile(@RequestBody JustifiedTravelExpenseFile instance) {
		LOGGER.debug("Create JustifiedTravelExpenseFile with information: {}" , instance);
		instance = justifiedTravelExpenseFileService.create(instance);
		LOGGER.debug("Created JustifiedTravelExpenseFile with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setJustifiedTravelExpenseFileService(JustifiedTravelExpenseFileService service) {
		this.justifiedTravelExpenseFileService = service;
	}
}

