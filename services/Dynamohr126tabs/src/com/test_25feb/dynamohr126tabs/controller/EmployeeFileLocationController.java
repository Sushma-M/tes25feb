/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.EmployeeFileLocationService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class EmployeeFileLocation.
 * @see com.test_25feb.dynamohr126tabs.EmployeeFileLocation
 */

@RestController(value = "Dynamohr126tabs.EmployeeFileLocationController")
@Api(value = "/Dynamohr126tabs/EmployeeFileLocation", description = "Exposes APIs to work with EmployeeFileLocation resource.")
@RequestMapping("/Dynamohr126tabs/EmployeeFileLocation")
public class EmployeeFileLocationController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeFileLocationController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.EmployeeFileLocationService")
	private EmployeeFileLocationService employeeFileLocationService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of EmployeeFileLocation instances matching the search criteria.")
	public Page<EmployeeFileLocation> findEmployeeFileLocations( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering EmployeeFileLocations list");
		return employeeFileLocationService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of EmployeeFileLocation instances.")
	public Page<EmployeeFileLocation> getEmployeeFileLocations(Pageable pageable) {
		LOGGER.debug("Rendering EmployeeFileLocations list");
		return employeeFileLocationService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of EmployeeFileLocation instances.")
	public Long countAllEmployeeFileLocations() {
		LOGGER.debug("counting EmployeeFileLocations");
		Long count = employeeFileLocationService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the EmployeeFileLocation instance associated with the given id.")
    public EmployeeFileLocation getEmployeeFileLocation(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting EmployeeFileLocation with id: {}" , id);
        EmployeeFileLocation instance = employeeFileLocationService.findById(id);
        LOGGER.debug("EmployeeFileLocation details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the EmployeeFileLocation instance associated with the given id.")
    public boolean deleteEmployeeFileLocation(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeFileLocation with id: {}" , id);
        EmployeeFileLocation deleted = employeeFileLocationService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the EmployeeFileLocation instance associated with the given id.")
    public EmployeeFileLocation editEmployeeFileLocation(@PathVariable("id") Integer id, @RequestBody EmployeeFileLocation instance) throws EntityNotFoundException {
        LOGGER.debug("Editing EmployeeFileLocation with id: {}" , instance.getIdEmployeeFileLocation());
        instance.setIdEmployeeFileLocation(id);
        instance = employeeFileLocationService.update(instance);
        LOGGER.debug("EmployeeFileLocation details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new EmployeeFileLocation instance.")
	public EmployeeFileLocation createEmployeeFileLocation(@RequestBody EmployeeFileLocation instance) {
		LOGGER.debug("Create EmployeeFileLocation with information: {}" , instance);
		instance = employeeFileLocationService.create(instance);
		LOGGER.debug("Created EmployeeFileLocation with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setEmployeeFileLocationService(EmployeeFileLocationService service) {
		this.employeeFileLocationService = service;
	}
}

