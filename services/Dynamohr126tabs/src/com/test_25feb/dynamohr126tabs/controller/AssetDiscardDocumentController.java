/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.AssetDiscardDocumentService;
import com.test_25feb.dynamohr126tabs.service.ListAssetDiscardedService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class AssetDiscardDocument.
 * @see com.test_25feb.dynamohr126tabs.AssetDiscardDocument
 */

@RestController(value = "Dynamohr126tabs.AssetDiscardDocumentController")
@Api(value = "/Dynamohr126tabs/AssetDiscardDocument", description = "Exposes APIs to work with AssetDiscardDocument resource.")
@RequestMapping("/Dynamohr126tabs/AssetDiscardDocument")
public class AssetDiscardDocumentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AssetDiscardDocumentController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.AssetDiscardDocumentService")
	private AssetDiscardDocumentService assetDiscardDocumentService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ListAssetDiscardedService")
    private ListAssetDiscardedService listAssetDiscardedService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of AssetDiscardDocument instances matching the search criteria.")
	public Page<AssetDiscardDocument> findAssetDiscardDocuments( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering AssetDiscardDocuments list");
		return assetDiscardDocumentService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of AssetDiscardDocument instances.")
	public Page<AssetDiscardDocument> getAssetDiscardDocuments(Pageable pageable) {
		LOGGER.debug("Rendering AssetDiscardDocuments list");
		return assetDiscardDocumentService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of AssetDiscardDocument instances.")
	public Long countAllAssetDiscardDocuments() {
		LOGGER.debug("counting AssetDiscardDocuments");
		Long count = assetDiscardDocumentService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the AssetDiscardDocument instance associated with the given id.")
    public AssetDiscardDocument getAssetDiscardDocument(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting AssetDiscardDocument with id: {}" , id);
        AssetDiscardDocument instance = assetDiscardDocumentService.findById(id);
        LOGGER.debug("AssetDiscardDocument details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the AssetDiscardDocument instance associated with the given id.")
    public boolean deleteAssetDiscardDocument(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AssetDiscardDocument with id: {}" , id);
        AssetDiscardDocument deleted = assetDiscardDocumentService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the AssetDiscardDocument instance associated with the given id.")
    public AssetDiscardDocument editAssetDiscardDocument(@PathVariable("id") Integer id, @RequestBody AssetDiscardDocument instance) throws EntityNotFoundException {
        LOGGER.debug("Editing AssetDiscardDocument with id: {}" , instance.getIdAssetDiscardDocument());
        instance.setIdAssetDiscardDocument(id);
        instance = assetDiscardDocumentService.update(instance);
        LOGGER.debug("AssetDiscardDocument details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/listAssetDiscardeds", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listAssetDiscardeds instance associated with the given id.")
     public Page<ListAssetDiscarded> findAssociatedlistAssetDiscardeds(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated listAssetDiscardeds");
        return listAssetDiscardedService.findAssociatedValues(id,"assetDiscardDocument","idAssetDiscardDocument", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new AssetDiscardDocument instance.")
	public AssetDiscardDocument createAssetDiscardDocument(@RequestBody AssetDiscardDocument instance) {
		LOGGER.debug("Create AssetDiscardDocument with information: {}" , instance);
		instance = assetDiscardDocumentService.create(instance);
		LOGGER.debug("Created AssetDiscardDocument with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setAssetDiscardDocumentService(AssetDiscardDocumentService service) {
		this.assetDiscardDocumentService = service;
	}
}

