/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.EmployeeSalaryService;
import com.test_25feb.dynamohr126tabs.service.PayrollDetailService;
import com.test_25feb.dynamohr126tabs.service.TypeEmployeePaymentMethodService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class TypeEmployeePaymentMethod.
 * @see com.test_25feb.dynamohr126tabs.TypeEmployeePaymentMethod
 */

@RestController(value = "Dynamohr126tabs.TypeEmployeePaymentMethodController")
@Api(value = "/Dynamohr126tabs/TypeEmployeePaymentMethod", description = "Exposes APIs to work with TypeEmployeePaymentMethod resource.")
@RequestMapping("/Dynamohr126tabs/TypeEmployeePaymentMethod")
public class TypeEmployeePaymentMethodController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeEmployeePaymentMethodController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.TypeEmployeePaymentMethodService")
	private TypeEmployeePaymentMethodService typeEmployeePaymentMethodService;


    @Autowired
    @Qualifier("Dynamohr126tabs.PayrollDetailService")
    private PayrollDetailService payrollDetailService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeSalaryService")
    private EmployeeSalaryService employeeSalaryService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TypeEmployeePaymentMethod instances matching the search criteria.")
	public Page<TypeEmployeePaymentMethod> findTypeEmployeePaymentMethods( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TypeEmployeePaymentMethods list");
		return typeEmployeePaymentMethodService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of TypeEmployeePaymentMethod instances.")
	public Page<TypeEmployeePaymentMethod> getTypeEmployeePaymentMethods(Pageable pageable) {
		LOGGER.debug("Rendering TypeEmployeePaymentMethods list");
		return typeEmployeePaymentMethodService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TypeEmployeePaymentMethod instances.")
	public Long countAllTypeEmployeePaymentMethods() {
		LOGGER.debug("counting TypeEmployeePaymentMethods");
		Long count = typeEmployeePaymentMethodService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TypeEmployeePaymentMethod instance associated with the given id.")
    public TypeEmployeePaymentMethod getTypeEmployeePaymentMethod(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeEmployeePaymentMethod with id: {}" , id);
        TypeEmployeePaymentMethod instance = typeEmployeePaymentMethodService.findById(id);
        LOGGER.debug("TypeEmployeePaymentMethod details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TypeEmployeePaymentMethod instance associated with the given id.")
    public boolean deleteTypeEmployeePaymentMethod(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeEmployeePaymentMethod with id: {}" , id);
        TypeEmployeePaymentMethod deleted = typeEmployeePaymentMethodService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TypeEmployeePaymentMethod instance associated with the given id.")
    public TypeEmployeePaymentMethod editTypeEmployeePaymentMethod(@PathVariable("id") Integer id, @RequestBody TypeEmployeePaymentMethod instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeEmployeePaymentMethod with id: {}" , instance.getIdTypeEmployeeStatus());
        instance.setIdTypeEmployeeStatus(id);
        instance = typeEmployeePaymentMethodService.update(instance);
        LOGGER.debug("TypeEmployeePaymentMethod details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/payrollDetails", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the payrollDetails instance associated with the given id.")
     public Page<PayrollDetail> findAssociatedpayrollDetails(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated payrollDetails");
        return payrollDetailService.findAssociatedValues(id,"typeEmployeePaymentMethod","idTypeEmployeeStatus", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeSalaries", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeSalaries instance associated with the given id.")
     public Page<EmployeeSalary> findAssociatedemployeeSalaries(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeeSalaries");
        return employeeSalaryService.findAssociatedValues(id,"typeEmployeePaymentMethod","idTypeEmployeeStatus", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TypeEmployeePaymentMethod instance.")
	public TypeEmployeePaymentMethod createTypeEmployeePaymentMethod(@RequestBody TypeEmployeePaymentMethod instance) {
		LOGGER.debug("Create TypeEmployeePaymentMethod with information: {}" , instance);
		instance = typeEmployeePaymentMethodService.create(instance);
		LOGGER.debug("Created TypeEmployeePaymentMethod with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTypeEmployeePaymentMethodService(TypeEmployeePaymentMethodService service) {
		this.typeEmployeePaymentMethodService = service;
	}
}

