/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.ListAssetDiscardedService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class ListAssetDiscarded.
 * @see com.test_25feb.dynamohr126tabs.ListAssetDiscarded
 */

@RestController(value = "Dynamohr126tabs.ListAssetDiscardedController")
@Api(value = "/Dynamohr126tabs/ListAssetDiscarded", description = "Exposes APIs to work with ListAssetDiscarded resource.")
@RequestMapping("/Dynamohr126tabs/ListAssetDiscarded")
public class ListAssetDiscardedController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListAssetDiscardedController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.ListAssetDiscardedService")
	private ListAssetDiscardedService listAssetDiscardedService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ListAssetDiscarded instances matching the search criteria.")
	public Page<ListAssetDiscarded> findListAssetDiscardeds( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ListAssetDiscardeds list");
		return listAssetDiscardedService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of ListAssetDiscarded instances.")
	public Page<ListAssetDiscarded> getListAssetDiscardeds(Pageable pageable) {
		LOGGER.debug("Rendering ListAssetDiscardeds list");
		return listAssetDiscardedService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ListAssetDiscarded instances.")
	public Long countAllListAssetDiscardeds() {
		LOGGER.debug("counting ListAssetDiscardeds");
		Long count = listAssetDiscardedService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ListAssetDiscarded instance associated with the given id.")
    public ListAssetDiscarded getListAssetDiscarded(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ListAssetDiscarded with id: {}" , id);
        ListAssetDiscarded instance = listAssetDiscardedService.findById(id);
        LOGGER.debug("ListAssetDiscarded details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ListAssetDiscarded instance associated with the given id.")
    public boolean deleteListAssetDiscarded(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListAssetDiscarded with id: {}" , id);
        ListAssetDiscarded deleted = listAssetDiscardedService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ListAssetDiscarded instance associated with the given id.")
    public ListAssetDiscarded editListAssetDiscarded(@PathVariable("id") Integer id, @RequestBody ListAssetDiscarded instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ListAssetDiscarded with id: {}" , instance.getIdListAssetDiscarded());
        instance.setIdListAssetDiscarded(id);
        instance = listAssetDiscardedService.update(instance);
        LOGGER.debug("ListAssetDiscarded details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ListAssetDiscarded instance.")
	public ListAssetDiscarded createListAssetDiscarded(@RequestBody ListAssetDiscarded instance) {
		LOGGER.debug("Create ListAssetDiscarded with information: {}" , instance);
		instance = listAssetDiscardedService.create(instance);
		LOGGER.debug("Created ListAssetDiscarded with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setListAssetDiscardedService(ListAssetDiscardedService service) {
		this.listAssetDiscardedService = service;
	}
}

