/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.ListOvertimePayrollService;
import com.test_25feb.dynamohr126tabs.service.OverTimeSegmentPayrollService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class ListOvertimePayroll.
 * @see com.test_25feb.dynamohr126tabs.ListOvertimePayroll
 */

@RestController(value = "Dynamohr126tabs.ListOvertimePayrollController")
@Api(value = "/Dynamohr126tabs/ListOvertimePayroll", description = "Exposes APIs to work with ListOvertimePayroll resource.")
@RequestMapping("/Dynamohr126tabs/ListOvertimePayroll")
public class ListOvertimePayrollController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListOvertimePayrollController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.ListOvertimePayrollService")
	private ListOvertimePayrollService listOvertimePayrollService;


    @Autowired
    @Qualifier("Dynamohr126tabs.OverTimeSegmentPayrollService")
    private OverTimeSegmentPayrollService overTimeSegmentPayrollService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ListOvertimePayroll instances matching the search criteria.")
	public Page<ListOvertimePayroll> findListOvertimePayrolls( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ListOvertimePayrolls list");
		return listOvertimePayrollService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of ListOvertimePayroll instances.")
	public Page<ListOvertimePayroll> getListOvertimePayrolls(Pageable pageable) {
		LOGGER.debug("Rendering ListOvertimePayrolls list");
		return listOvertimePayrollService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ListOvertimePayroll instances.")
	public Long countAllListOvertimePayrolls() {
		LOGGER.debug("counting ListOvertimePayrolls");
		Long count = listOvertimePayrollService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ListOvertimePayroll instance associated with the given id.")
    public ListOvertimePayroll getListOvertimePayroll(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ListOvertimePayroll with id: {}" , id);
        ListOvertimePayroll instance = listOvertimePayrollService.findById(id);
        LOGGER.debug("ListOvertimePayroll details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ListOvertimePayroll instance associated with the given id.")
    public boolean deleteListOvertimePayroll(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListOvertimePayroll with id: {}" , id);
        ListOvertimePayroll deleted = listOvertimePayrollService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ListOvertimePayroll instance associated with the given id.")
    public ListOvertimePayroll editListOvertimePayroll(@PathVariable("id") Integer id, @RequestBody ListOvertimePayroll instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ListOvertimePayroll with id: {}" , instance.getIdListOvertimePayroll());
        instance.setIdListOvertimePayroll(id);
        instance = listOvertimePayrollService.update(instance);
        LOGGER.debug("ListOvertimePayroll details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/overTimeSegmentPayrolls", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the overTimeSegmentPayrolls instance associated with the given id.")
     public Page<OverTimeSegmentPayroll> findAssociatedoverTimeSegmentPayrolls(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated overTimeSegmentPayrolls");
        return overTimeSegmentPayrollService.findAssociatedValues(id,"listOvertimePayroll","idListOvertimePayroll", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ListOvertimePayroll instance.")
	public ListOvertimePayroll createListOvertimePayroll(@RequestBody ListOvertimePayroll instance) {
		LOGGER.debug("Create ListOvertimePayroll with information: {}" , instance);
		instance = listOvertimePayrollService.create(instance);
		LOGGER.debug("Created ListOvertimePayroll with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setListOvertimePayrollService(ListOvertimePayrollService service) {
		this.listOvertimePayrollService = service;
	}
}

