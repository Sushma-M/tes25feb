/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.ListCelphoneDetailPayrollService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class ListCelphoneDetailPayroll.
 * @see com.test_25feb.dynamohr126tabs.ListCelphoneDetailPayroll
 */

@RestController(value = "Dynamohr126tabs.ListCelphoneDetailPayrollController")
@Api(value = "/Dynamohr126tabs/ListCelphoneDetailPayroll", description = "Exposes APIs to work with ListCelphoneDetailPayroll resource.")
@RequestMapping("/Dynamohr126tabs/ListCelphoneDetailPayroll")
public class ListCelphoneDetailPayrollController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListCelphoneDetailPayrollController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.ListCelphoneDetailPayrollService")
	private ListCelphoneDetailPayrollService listCelphoneDetailPayrollService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ListCelphoneDetailPayroll instances matching the search criteria.")
	public Page<ListCelphoneDetailPayroll> findListCelphoneDetailPayrolls( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ListCelphoneDetailPayrolls list");
		return listCelphoneDetailPayrollService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of ListCelphoneDetailPayroll instances.")
	public Page<ListCelphoneDetailPayroll> getListCelphoneDetailPayrolls(Pageable pageable) {
		LOGGER.debug("Rendering ListCelphoneDetailPayrolls list");
		return listCelphoneDetailPayrollService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ListCelphoneDetailPayroll instances.")
	public Long countAllListCelphoneDetailPayrolls() {
		LOGGER.debug("counting ListCelphoneDetailPayrolls");
		Long count = listCelphoneDetailPayrollService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ListCelphoneDetailPayroll instance associated with the given id.")
    public ListCelphoneDetailPayroll getListCelphoneDetailPayroll(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ListCelphoneDetailPayroll with id: {}" , id);
        ListCelphoneDetailPayroll instance = listCelphoneDetailPayrollService.findById(id);
        LOGGER.debug("ListCelphoneDetailPayroll details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ListCelphoneDetailPayroll instance associated with the given id.")
    public boolean deleteListCelphoneDetailPayroll(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListCelphoneDetailPayroll with id: {}" , id);
        ListCelphoneDetailPayroll deleted = listCelphoneDetailPayrollService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ListCelphoneDetailPayroll instance associated with the given id.")
    public ListCelphoneDetailPayroll editListCelphoneDetailPayroll(@PathVariable("id") Integer id, @RequestBody ListCelphoneDetailPayroll instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ListCelphoneDetailPayroll with id: {}" , instance.getIdListCelphoneDetailPayroll());
        instance.setIdListCelphoneDetailPayroll(id);
        instance = listCelphoneDetailPayrollService.update(instance);
        LOGGER.debug("ListCelphoneDetailPayroll details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ListCelphoneDetailPayroll instance.")
	public ListCelphoneDetailPayroll createListCelphoneDetailPayroll(@RequestBody ListCelphoneDetailPayroll instance) {
		LOGGER.debug("Create ListCelphoneDetailPayroll with information: {}" , instance);
		instance = listCelphoneDetailPayrollService.create(instance);
		LOGGER.debug("Created ListCelphoneDetailPayroll with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setListCelphoneDetailPayrollService(ListCelphoneDetailPayrollService service) {
		this.listCelphoneDetailPayrollService = service;
	}
}

