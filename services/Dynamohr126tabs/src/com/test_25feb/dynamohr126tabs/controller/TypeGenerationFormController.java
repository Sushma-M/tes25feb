/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.EmployeeSalaryService;
import com.test_25feb.dynamohr126tabs.service.ListPeriodicBonusEmployeeService;
import com.test_25feb.dynamohr126tabs.service.ListPeriodicDeductionEmployeeService;
import com.test_25feb.dynamohr126tabs.service.PayrollDetailService;
import com.test_25feb.dynamohr126tabs.service.PayrollService;
import com.test_25feb.dynamohr126tabs.service.TypeGenerationFormService;
import com.test_25feb.dynamohr126tabs.service.TypeRecruitmentService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class TypeGenerationForm.
 * @see com.test_25feb.dynamohr126tabs.TypeGenerationForm
 */

@RestController(value = "Dynamohr126tabs.TypeGenerationFormController")
@Api(value = "/Dynamohr126tabs/TypeGenerationForm", description = "Exposes APIs to work with TypeGenerationForm resource.")
@RequestMapping("/Dynamohr126tabs/TypeGenerationForm")
public class TypeGenerationFormController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeGenerationFormController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.TypeGenerationFormService")
	private TypeGenerationFormService typeGenerationFormService;


    @Autowired
    @Qualifier("Dynamohr126tabs.TypeRecruitmentService")
    private TypeRecruitmentService typeRecruitmentService;


    @Autowired
    @Qualifier("Dynamohr126tabs.PayrollDetailService")
    private PayrollDetailService payrollDetailService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ListPeriodicDeductionEmployeeService")
    private ListPeriodicDeductionEmployeeService listPeriodicDeductionEmployeeService;


    @Autowired
    @Qualifier("Dynamohr126tabs.PayrollService")
    private PayrollService payrollService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeSalaryService")
    private EmployeeSalaryService employeeSalaryService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ListPeriodicBonusEmployeeService")
    private ListPeriodicBonusEmployeeService listPeriodicBonusEmployeeService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TypeGenerationForm instances matching the search criteria.")
	public Page<TypeGenerationForm> findTypeGenerationForms( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TypeGenerationForms list");
		return typeGenerationFormService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of TypeGenerationForm instances.")
	public Page<TypeGenerationForm> getTypeGenerationForms(Pageable pageable) {
		LOGGER.debug("Rendering TypeGenerationForms list");
		return typeGenerationFormService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TypeGenerationForm instances.")
	public Long countAllTypeGenerationForms() {
		LOGGER.debug("counting TypeGenerationForms");
		Long count = typeGenerationFormService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TypeGenerationForm instance associated with the given id.")
    public TypeGenerationForm getTypeGenerationForm(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeGenerationForm with id: {}" , id);
        TypeGenerationForm instance = typeGenerationFormService.findById(id);
        LOGGER.debug("TypeGenerationForm details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TypeGenerationForm instance associated with the given id.")
    public boolean deleteTypeGenerationForm(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeGenerationForm with id: {}" , id);
        TypeGenerationForm deleted = typeGenerationFormService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TypeGenerationForm instance associated with the given id.")
    public TypeGenerationForm editTypeGenerationForm(@PathVariable("id") Integer id, @RequestBody TypeGenerationForm instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeGenerationForm with id: {}" , instance.getIdTypeEmployeePaymentMethod());
        instance.setIdTypeEmployeePaymentMethod(id);
        instance = typeGenerationFormService.update(instance);
        LOGGER.debug("TypeGenerationForm details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/payrollDetails", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the payrollDetails instance associated with the given id.")
     public Page<PayrollDetail> findAssociatedpayrollDetails(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated payrollDetails");
        return payrollDetailService.findAssociatedValues(id,"typeGenerationForm","idTypeEmployeePaymentMethod", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeSalaries", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeSalaries instance associated with the given id.")
     public Page<EmployeeSalary> findAssociatedemployeeSalaries(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeeSalaries");
        return employeeSalaryService.findAssociatedValues(id,"typeGenerationForm","idTypeEmployeePaymentMethod", pageable);
   }

    @RequestMapping(value="/{id:.+}/listPeriodicDeductionEmployees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listPeriodicDeductionEmployees instance associated with the given id.")
     public Page<ListPeriodicDeductionEmployee> findAssociatedlistPeriodicDeductionEmployees(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated listPeriodicDeductionEmployees");
        return listPeriodicDeductionEmployeeService.findAssociatedValues(id,"typeGenerationForm","idTypeEmployeePaymentMethod", pageable);
   }

    @RequestMapping(value="/{id:.+}/listPeriodicBonusEmployees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listPeriodicBonusEmployees instance associated with the given id.")
     public Page<ListPeriodicBonusEmployee> findAssociatedlistPeriodicBonusEmployees(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated listPeriodicBonusEmployees");
        return listPeriodicBonusEmployeeService.findAssociatedValues(id,"typeGenerationForm","idTypeEmployeePaymentMethod", pageable);
   }

    @RequestMapping(value="/{id:.+}/typeRecruitments", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the typeRecruitments instance associated with the given id.")
     public Page<TypeRecruitment> findAssociatedtypeRecruitments(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated typeRecruitments");
        return typeRecruitmentService.findAssociatedValues(id,"typeGenerationForm","idTypeEmployeePaymentMethod", pageable);
   }

    @RequestMapping(value="/{id:.+}/payrolls", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the payrolls instance associated with the given id.")
     public Page<Payroll> findAssociatedpayrolls(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated payrolls");
        return payrollService.findAssociatedValues(id,"typeGenerationForm","idTypeEmployeePaymentMethod", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TypeGenerationForm instance.")
	public TypeGenerationForm createTypeGenerationForm(@RequestBody TypeGenerationForm instance) {
		LOGGER.debug("Create TypeGenerationForm with information: {}" , instance);
		instance = typeGenerationFormService.create(instance);
		LOGGER.debug("Created TypeGenerationForm with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTypeGenerationFormService(TypeGenerationFormService service) {
		this.typeGenerationFormService = service;
	}
}

