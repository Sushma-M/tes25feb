/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.DetallePlanillaIngresosService;
import org.springframework.web.bind.annotation.RequestBody;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class DetallePlanillaIngresos.
 * @see com.test_25feb.dynamohr126tabs.DetallePlanillaIngresos
 */

@RestController(value = "Dynamohr126tabs.DetallePlanillaIngresosController")
@Api(value = "/Dynamohr126tabs/DetallePlanillaIngresos", description = "Exposes APIs to work with DetallePlanillaIngresos resource.")
@RequestMapping("/Dynamohr126tabs/DetallePlanillaIngresos")
public class DetallePlanillaIngresosController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DetallePlanillaIngresosController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.DetallePlanillaIngresosService")
	private DetallePlanillaIngresosService detallePlanillaIngresosService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of DetallePlanillaIngresos instances matching the search criteria.")
	public Page<DetallePlanillaIngresos> findDetallePlanillaIngresoss( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering DetallePlanillaIngresoss list");
		return detallePlanillaIngresosService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of DetallePlanillaIngresos instances.")
	public Page<DetallePlanillaIngresos> getDetallePlanillaIngresoss(Pageable pageable) {
		LOGGER.debug("Rendering DetallePlanillaIngresoss list");
		return detallePlanillaIngresosService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of DetallePlanillaIngresos instances.")
	public Long countAllDetallePlanillaIngresoss() {
		LOGGER.debug("counting DetallePlanillaIngresoss");
		Long count = detallePlanillaIngresosService.countAll();
		return count;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the DetallePlanillaIngresos instance associated with the given composite-id.")
	public DetallePlanillaIngresos getDetallePlanillaIngresos( @RequestParam("idPayrollDetail") Integer idPayrollDetail, @RequestParam("type_") String type_, @RequestParam("code") String code, @RequestParam("description_") String description_, @RequestParam("currency") String currency, @RequestParam("value_") Double value_)
	 throws EntityNotFoundException {
	    DetallePlanillaIngresosId temp = new DetallePlanillaIngresosId();
	    temp.setIdPayrollDetail(idPayrollDetail);
	    temp.setType_(type_);
	    temp.setCode(code);
	    temp.setDescription_(description_);
	    temp.setCurrency(currency);
	    temp.setValue_(value_);
		LOGGER.debug("Getting DetallePlanillaIngresos with id: {}" , temp);
		DetallePlanillaIngresos instance = detallePlanillaIngresosService.findById(temp);
		LOGGER.debug("DetallePlanillaIngresos details with id: {}" , instance);
		return instance;
	}
	@RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
	@ApiOperation(value = "Deletes the DetallePlanillaIngresos instance associated with the given composite-id.")
	public boolean deleteDetallePlanillaIngresos( @RequestParam("idPayrollDetail") Integer idPayrollDetail, @RequestParam("type_") String type_, @RequestParam("code") String code, @RequestParam("description_") String description_, @RequestParam("currency") String currency, @RequestParam("value_") Double value_)throws EntityNotFoundException {
	    DetallePlanillaIngresosId temp = new DetallePlanillaIngresosId();
        temp.setIdPayrollDetail(idPayrollDetail);
        temp.setType_(type_);
        temp.setCode(code);
        temp.setDescription_(description_);
        temp.setCurrency(currency);
        temp.setValue_(value_);
		LOGGER.debug("Deleting DetallePlanillaIngresos with id: {}" , temp);
		DetallePlanillaIngresos deleted = detallePlanillaIngresosService.delete(temp);
		return deleted != null;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
	@ApiOperation(value = "Updates the DetallePlanillaIngresos instance associated with the given composite-id.")
	public DetallePlanillaIngresos editDetallePlanillaIngresos( @RequestParam("idPayrollDetail") Integer idPayrollDetail, @RequestParam("type_") String type_, @RequestParam("code") String code, @RequestParam("description_") String description_, @RequestParam("currency") String currency, @RequestParam("value_") Double value_, @RequestBody DetallePlanillaIngresos instance) throws EntityNotFoundException {
	    DetallePlanillaIngresosId temp = new DetallePlanillaIngresosId();
         temp.setIdPayrollDetail(idPayrollDetail);
         temp.setType_(type_);
         temp.setCode(code);
         temp.setDescription_(description_);
         temp.setCurrency(currency);
         temp.setValue_(value_);
        detallePlanillaIngresosService.delete(temp);
        instance = detallePlanillaIngresosService.create(instance);
	    LOGGER.debug("DetallePlanillaIngresos details with id is updated: {}" , instance);
		return instance;
	}

	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new DetallePlanillaIngresos instance.")
	public DetallePlanillaIngresos createDetallePlanillaIngresos(@RequestBody DetallePlanillaIngresos instance) {
		LOGGER.debug("Create DetallePlanillaIngresos with information: {}" , instance);
		instance = detallePlanillaIngresosService.create(instance);
		LOGGER.debug("Created DetallePlanillaIngresos with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setDetallePlanillaIngresosService(DetallePlanillaIngresosService service) {
		this.detallePlanillaIngresosService = service;
	}
}

