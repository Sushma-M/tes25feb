/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.AlertService;
import com.test_25feb.dynamohr126tabs.service.TypeAlertService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class TypeAlert.
 * @see com.test_25feb.dynamohr126tabs.TypeAlert
 */

@RestController(value = "Dynamohr126tabs.TypeAlertController")
@Api(value = "/Dynamohr126tabs/TypeAlert", description = "Exposes APIs to work with TypeAlert resource.")
@RequestMapping("/Dynamohr126tabs/TypeAlert")
public class TypeAlertController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeAlertController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.TypeAlertService")
	private TypeAlertService typeAlertService;


    @Autowired
    @Qualifier("Dynamohr126tabs.AlertService")
    private AlertService alertService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TypeAlert instances matching the search criteria.")
	public Page<TypeAlert> findTypeAlerts( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TypeAlerts list");
		return typeAlertService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of TypeAlert instances.")
	public Page<TypeAlert> getTypeAlerts(Pageable pageable) {
		LOGGER.debug("Rendering TypeAlerts list");
		return typeAlertService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TypeAlert instances.")
	public Long countAllTypeAlerts() {
		LOGGER.debug("counting TypeAlerts");
		Long count = typeAlertService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TypeAlert instance associated with the given id.")
    public TypeAlert getTypeAlert(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeAlert with id: {}" , id);
        TypeAlert instance = typeAlertService.findById(id);
        LOGGER.debug("TypeAlert details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TypeAlert instance associated with the given id.")
    public boolean deleteTypeAlert(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeAlert with id: {}" , id);
        TypeAlert deleted = typeAlertService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TypeAlert instance associated with the given id.")
    public TypeAlert editTypeAlert(@PathVariable("id") Integer id, @RequestBody TypeAlert instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeAlert with id: {}" , instance.getIdTypeAlert());
        instance.setIdTypeAlert(id);
        instance = typeAlertService.update(instance);
        LOGGER.debug("TypeAlert details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/alerts", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the alerts instance associated with the given id.")
     public Page<Alert> findAssociatedalerts(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated alerts");
        return alertService.findAssociatedValues(id,"typeAlert","idTypeAlert", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TypeAlert instance.")
	public TypeAlert createTypeAlert(@RequestBody TypeAlert instance) {
		LOGGER.debug("Create TypeAlert with information: {}" , instance);
		instance = typeAlertService.create(instance);
		LOGGER.debug("Created TypeAlert with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTypeAlertService(TypeAlertService service) {
		this.typeAlertService = service;
	}
}

