/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.AssessmentEmployeeDataService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class AssessmentEmployeeData.
 * @see com.test_25feb.dynamohr126tabs.AssessmentEmployeeData
 */

@RestController(value = "Dynamohr126tabs.AssessmentEmployeeDataController")
@Api(value = "/Dynamohr126tabs/AssessmentEmployeeData", description = "Exposes APIs to work with AssessmentEmployeeData resource.")
@RequestMapping("/Dynamohr126tabs/AssessmentEmployeeData")
public class AssessmentEmployeeDataController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AssessmentEmployeeDataController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.AssessmentEmployeeDataService")
	private AssessmentEmployeeDataService assessmentEmployeeDataService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of AssessmentEmployeeData instances matching the search criteria.")
	public Page<AssessmentEmployeeData> findAssessmentEmployeeDatas( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering AssessmentEmployeeDatas list");
		return assessmentEmployeeDataService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of AssessmentEmployeeData instances.")
	public Page<AssessmentEmployeeData> getAssessmentEmployeeDatas(Pageable pageable) {
		LOGGER.debug("Rendering AssessmentEmployeeDatas list");
		return assessmentEmployeeDataService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of AssessmentEmployeeData instances.")
	public Long countAllAssessmentEmployeeDatas() {
		LOGGER.debug("counting AssessmentEmployeeDatas");
		Long count = assessmentEmployeeDataService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the AssessmentEmployeeData instance associated with the given id.")
    public AssessmentEmployeeData getAssessmentEmployeeData(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting AssessmentEmployeeData with id: {}" , id);
        AssessmentEmployeeData instance = assessmentEmployeeDataService.findById(id);
        LOGGER.debug("AssessmentEmployeeData details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the AssessmentEmployeeData instance associated with the given id.")
    public boolean deleteAssessmentEmployeeData(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AssessmentEmployeeData with id: {}" , id);
        AssessmentEmployeeData deleted = assessmentEmployeeDataService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the AssessmentEmployeeData instance associated with the given id.")
    public AssessmentEmployeeData editAssessmentEmployeeData(@PathVariable("id") Integer id, @RequestBody AssessmentEmployeeData instance) throws EntityNotFoundException {
        LOGGER.debug("Editing AssessmentEmployeeData with id: {}" , instance.getIdAssessmentEmployeeData());
        instance.setIdAssessmentEmployeeData(id);
        instance = assessmentEmployeeDataService.update(instance);
        LOGGER.debug("AssessmentEmployeeData details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new AssessmentEmployeeData instance.")
	public AssessmentEmployeeData createAssessmentEmployeeData(@RequestBody AssessmentEmployeeData instance) {
		LOGGER.debug("Create AssessmentEmployeeData with information: {}" , instance);
		instance = assessmentEmployeeDataService.create(instance);
		LOGGER.debug("Created AssessmentEmployeeData with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setAssessmentEmployeeDataService(AssessmentEmployeeDataService service) {
		this.assessmentEmployeeDataService = service;
	}
}

