/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.IncidenceEmployeeService;
import com.test_25feb.dynamohr126tabs.service.TypeIncidentService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class TypeIncident.
 * @see com.test_25feb.dynamohr126tabs.TypeIncident
 */

@RestController(value = "Dynamohr126tabs.TypeIncidentController")
@Api(value = "/Dynamohr126tabs/TypeIncident", description = "Exposes APIs to work with TypeIncident resource.")
@RequestMapping("/Dynamohr126tabs/TypeIncident")
public class TypeIncidentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeIncidentController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.TypeIncidentService")
	private TypeIncidentService typeIncidentService;


    @Autowired
    @Qualifier("Dynamohr126tabs.IncidenceEmployeeService")
    private IncidenceEmployeeService incidenceEmployeeService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TypeIncident instances matching the search criteria.")
	public Page<TypeIncident> findTypeIncidents( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TypeIncidents list");
		return typeIncidentService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of TypeIncident instances.")
	public Page<TypeIncident> getTypeIncidents(Pageable pageable) {
		LOGGER.debug("Rendering TypeIncidents list");
		return typeIncidentService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TypeIncident instances.")
	public Long countAllTypeIncidents() {
		LOGGER.debug("counting TypeIncidents");
		Long count = typeIncidentService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TypeIncident instance associated with the given id.")
    public TypeIncident getTypeIncident(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeIncident with id: {}" , id);
        TypeIncident instance = typeIncidentService.findById(id);
        LOGGER.debug("TypeIncident details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TypeIncident instance associated with the given id.")
    public boolean deleteTypeIncident(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeIncident with id: {}" , id);
        TypeIncident deleted = typeIncidentService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TypeIncident instance associated with the given id.")
    public TypeIncident editTypeIncident(@PathVariable("id") Integer id, @RequestBody TypeIncident instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeIncident with id: {}" , instance.getIdTypeIncident());
        instance.setIdTypeIncident(id);
        instance = typeIncidentService.update(instance);
        LOGGER.debug("TypeIncident details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/incidenceEmployees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the incidenceEmployees instance associated with the given id.")
     public Page<IncidenceEmployee> findAssociatedincidenceEmployees(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated incidenceEmployees");
        return incidenceEmployeeService.findAssociatedValues(id,"typeIncident","idTypeIncident", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TypeIncident instance.")
	public TypeIncident createTypeIncident(@RequestBody TypeIncident instance) {
		LOGGER.debug("Create TypeIncident with information: {}" , instance);
		instance = typeIncidentService.create(instance);
		LOGGER.debug("Created TypeIncident with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTypeIncidentService(TypeIncidentService service) {
		this.typeIncidentService = service;
	}
}

