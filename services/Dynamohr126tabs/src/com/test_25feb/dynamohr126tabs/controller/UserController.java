/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.ApplicantNoteService;
import com.test_25feb.dynamohr126tabs.service.EmployeeAssessmentService;
import com.test_25feb.dynamohr126tabs.service.EmployeeMessageService;
import com.test_25feb.dynamohr126tabs.service.LogService;
import com.test_25feb.dynamohr126tabs.service.PaymentCheckService;
import com.test_25feb.dynamohr126tabs.service.PayrollService;
import com.test_25feb.dynamohr126tabs.service.UserService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class User.
 * @see com.test_25feb.dynamohr126tabs.User
 */

@RestController(value = "Dynamohr126tabs.UserController")
@Api(value = "/Dynamohr126tabs/User", description = "Exposes APIs to work with User resource.")
@RequestMapping("/Dynamohr126tabs/User")
public class UserController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.UserService")
	private UserService userService;


    @Autowired
    @Qualifier("Dynamohr126tabs.LogService")
    private LogService logService;


    @Autowired
    @Qualifier("Dynamohr126tabs.PayrollService")
    private PayrollService payrollService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ApplicantNoteService")
    private ApplicantNoteService applicantNoteService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeAssessmentService")
    private EmployeeAssessmentService employeeAssessmentService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeMessageService")
    private EmployeeMessageService employeeMessageService;


    @Autowired
    @Qualifier("Dynamohr126tabs.PaymentCheckService")
    private PaymentCheckService paymentCheckService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of User instances matching the search criteria.")
	public Page<User> findUsers( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Users list");
		return userService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of User instances.")
	public Page<User> getUsers(Pageable pageable) {
		LOGGER.debug("Rendering Users list");
		return userService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of User instances.")
	public Long countAllUsers() {
		LOGGER.debug("counting Users");
		Long count = userService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the User instance associated with the given id.")
    public User getUser(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting User with id: {}" , id);
        User instance = userService.findById(id);
        LOGGER.debug("User details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the User instance associated with the given id.")
    public boolean deleteUser(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting User with id: {}" , id);
        User deleted = userService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the User instance associated with the given id.")
    public User editUser(@PathVariable("id") Integer id, @RequestBody User instance) throws EntityNotFoundException {
        LOGGER.debug("Editing User with id: {}" , instance.getIdUser());
        instance.setIdUser(id);
        instance = userService.update(instance);
        LOGGER.debug("User details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/applicantNotes", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the applicantNotes instance associated with the given id.")
     public Page<ApplicantNote> findAssociatedapplicantNotes(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated applicantNotes");
        return applicantNoteService.findAssociatedValues(id,"user","idUser", pageable);
   }

    @RequestMapping(value="/{id:.+}/payrollsForFkUserConfirmation", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the payrollsForFkUserConfirmation instance associated with the given id.")
     public Page<Payroll> findAssociatedpayrollsForFkUserConfirmation(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated payrollsForFkUserConfirmation");
        return payrollService.findAssociatedValues(id,"userByFkUserConfirmation","idUser", pageable);
   }

    @RequestMapping(value="/{id:.+}/payrollsForFkUserPrints", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the payrollsForFkUserPrints instance associated with the given id.")
     public Page<Payroll> findAssociatedpayrollsForFkUserPrints(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated payrollsForFkUserPrints");
        return payrollService.findAssociatedValues(id,"userByFkUserConfirmation","idUser", pageable);
   }

    @RequestMapping(value="/{id:.+}/logs", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the logs instance associated with the given id.")
     public Page<Log> findAssociatedlogs(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated logs");
        return logService.findAssociatedValues(id,"user","idUser", pageable);
   }

    @RequestMapping(value="/{id:.+}/paymentChecks", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the paymentChecks instance associated with the given id.")
     public Page<PaymentCheck> findAssociatedpaymentChecks(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated paymentChecks");
        return paymentCheckService.findAssociatedValues(id,"user","idUser", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeMessagesForFkUserReceive", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeMessagesForFkUserReceive instance associated with the given id.")
     public Page<EmployeeMessage> findAssociatedemployeeMessagesForFkUserReceive(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeeMessagesForFkUserReceive");
        return employeeMessageService.findAssociatedValues(id,"userByFkUserSends","idUser", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeMessagesForFkUserSends", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeMessagesForFkUserSends instance associated with the given id.")
     public Page<EmployeeMessage> findAssociatedemployeeMessagesForFkUserSends(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeeMessagesForFkUserSends");
        return employeeMessageService.findAssociatedValues(id,"userByFkUserSends","idUser", pageable);
   }

    @RequestMapping(value="/{id:.+}/payrollsForFkUserElaborate", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the payrollsForFkUserElaborate instance associated with the given id.")
     public Page<Payroll> findAssociatedpayrollsForFkUserElaborate(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated payrollsForFkUserElaborate");
        return payrollService.findAssociatedValues(id,"userByFkUserConfirmation","idUser", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeAssessments", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeAssessments instance associated with the given id.")
     public Page<EmployeeAssessment> findAssociatedemployeeAssessments(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeeAssessments");
        return employeeAssessmentService.findAssociatedValues(id,"user","idUser", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new User instance.")
	public User createUser(@RequestBody User instance) {
		LOGGER.debug("Create User with information: {}" , instance);
		instance = userService.create(instance);
		LOGGER.debug("Created User with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setUserService(UserService service) {
		this.userService = service;
	}
}

