/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.TypeCommissionService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class TypeCommission.
 * @see com.test_25feb.dynamohr126tabs.TypeCommission
 */

@RestController(value = "Dynamohr126tabs.TypeCommissionController")
@Api(value = "/Dynamohr126tabs/TypeCommission", description = "Exposes APIs to work with TypeCommission resource.")
@RequestMapping("/Dynamohr126tabs/TypeCommission")
public class TypeCommissionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeCommissionController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.TypeCommissionService")
	private TypeCommissionService typeCommissionService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TypeCommission instances matching the search criteria.")
	public Page<TypeCommission> findTypeCommissions( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TypeCommissions list");
		return typeCommissionService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of TypeCommission instances.")
	public Page<TypeCommission> getTypeCommissions(Pageable pageable) {
		LOGGER.debug("Rendering TypeCommissions list");
		return typeCommissionService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TypeCommission instances.")
	public Long countAllTypeCommissions() {
		LOGGER.debug("counting TypeCommissions");
		Long count = typeCommissionService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TypeCommission instance associated with the given id.")
    public TypeCommission getTypeCommission(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeCommission with id: {}" , id);
        TypeCommission instance = typeCommissionService.findById(id);
        LOGGER.debug("TypeCommission details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TypeCommission instance associated with the given id.")
    public boolean deleteTypeCommission(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeCommission with id: {}" , id);
        TypeCommission deleted = typeCommissionService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TypeCommission instance associated with the given id.")
    public TypeCommission editTypeCommission(@PathVariable("id") Integer id, @RequestBody TypeCommission instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeCommission with id: {}" , instance.getIdTypeCommission());
        instance.setIdTypeCommission(id);
        instance = typeCommissionService.update(instance);
        LOGGER.debug("TypeCommission details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TypeCommission instance.")
	public TypeCommission createTypeCommission(@RequestBody TypeCommission instance) {
		LOGGER.debug("Create TypeCommission with information: {}" , instance);
		instance = typeCommissionService.create(instance);
		LOGGER.debug("Created TypeCommission with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTypeCommissionService(TypeCommissionService service) {
		this.typeCommissionService = service;
	}
}

