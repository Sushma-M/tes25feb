/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.EmployeeService;
import com.test_25feb.dynamohr126tabs.service.TypeEmployeeStatusService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class TypeEmployeeStatus.
 * @see com.test_25feb.dynamohr126tabs.TypeEmployeeStatus
 */

@RestController(value = "Dynamohr126tabs.TypeEmployeeStatusController")
@Api(value = "/Dynamohr126tabs/TypeEmployeeStatus", description = "Exposes APIs to work with TypeEmployeeStatus resource.")
@RequestMapping("/Dynamohr126tabs/TypeEmployeeStatus")
public class TypeEmployeeStatusController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeEmployeeStatusController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.TypeEmployeeStatusService")
	private TypeEmployeeStatusService typeEmployeeStatusService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeService")
    private EmployeeService employeeService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TypeEmployeeStatus instances matching the search criteria.")
	public Page<TypeEmployeeStatus> findTypeEmployeeStatuss( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TypeEmployeeStatuss list");
		return typeEmployeeStatusService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of TypeEmployeeStatus instances.")
	public Page<TypeEmployeeStatus> getTypeEmployeeStatuss(Pageable pageable) {
		LOGGER.debug("Rendering TypeEmployeeStatuss list");
		return typeEmployeeStatusService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TypeEmployeeStatus instances.")
	public Long countAllTypeEmployeeStatuss() {
		LOGGER.debug("counting TypeEmployeeStatuss");
		Long count = typeEmployeeStatusService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TypeEmployeeStatus instance associated with the given id.")
    public TypeEmployeeStatus getTypeEmployeeStatus(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeEmployeeStatus with id: {}" , id);
        TypeEmployeeStatus instance = typeEmployeeStatusService.findById(id);
        LOGGER.debug("TypeEmployeeStatus details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TypeEmployeeStatus instance associated with the given id.")
    public boolean deleteTypeEmployeeStatus(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeEmployeeStatus with id: {}" , id);
        TypeEmployeeStatus deleted = typeEmployeeStatusService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TypeEmployeeStatus instance associated with the given id.")
    public TypeEmployeeStatus editTypeEmployeeStatus(@PathVariable("id") Integer id, @RequestBody TypeEmployeeStatus instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeEmployeeStatus with id: {}" , instance.getIdTypeApplicantStatus());
        instance.setIdTypeApplicantStatus(id);
        instance = typeEmployeeStatusService.update(instance);
        LOGGER.debug("TypeEmployeeStatus details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/employees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employees instance associated with the given id.")
     public Page<Employee> findAssociatedemployees(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employees");
        return employeeService.findAssociatedValues(id,"typeEmployeeStatus","idTypeApplicantStatus", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TypeEmployeeStatus instance.")
	public TypeEmployeeStatus createTypeEmployeeStatus(@RequestBody TypeEmployeeStatus instance) {
		LOGGER.debug("Create TypeEmployeeStatus with information: {}" , instance);
		instance = typeEmployeeStatusService.create(instance);
		LOGGER.debug("Created TypeEmployeeStatus with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTypeEmployeeStatusService(TypeEmployeeStatusService service) {
		this.typeEmployeeStatusService = service;
	}
}

