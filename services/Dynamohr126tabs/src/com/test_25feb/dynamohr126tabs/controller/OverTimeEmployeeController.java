/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.ListOvertimePayrollService;
import com.test_25feb.dynamohr126tabs.service.OverTimeEmployeeService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class OverTimeEmployee.
 * @see com.test_25feb.dynamohr126tabs.OverTimeEmployee
 */

@RestController(value = "Dynamohr126tabs.OverTimeEmployeeController")
@Api(value = "/Dynamohr126tabs/OverTimeEmployee", description = "Exposes APIs to work with OverTimeEmployee resource.")
@RequestMapping("/Dynamohr126tabs/OverTimeEmployee")
public class OverTimeEmployeeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(OverTimeEmployeeController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.OverTimeEmployeeService")
	private OverTimeEmployeeService overTimeEmployeeService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ListOvertimePayrollService")
    private ListOvertimePayrollService listOvertimePayrollService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of OverTimeEmployee instances matching the search criteria.")
	public Page<OverTimeEmployee> findOverTimeEmployees( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering OverTimeEmployees list");
		return overTimeEmployeeService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of OverTimeEmployee instances.")
	public Page<OverTimeEmployee> getOverTimeEmployees(Pageable pageable) {
		LOGGER.debug("Rendering OverTimeEmployees list");
		return overTimeEmployeeService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of OverTimeEmployee instances.")
	public Long countAllOverTimeEmployees() {
		LOGGER.debug("counting OverTimeEmployees");
		Long count = overTimeEmployeeService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the OverTimeEmployee instance associated with the given id.")
    public OverTimeEmployee getOverTimeEmployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting OverTimeEmployee with id: {}" , id);
        OverTimeEmployee instance = overTimeEmployeeService.findById(id);
        LOGGER.debug("OverTimeEmployee details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the OverTimeEmployee instance associated with the given id.")
    public boolean deleteOverTimeEmployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting OverTimeEmployee with id: {}" , id);
        OverTimeEmployee deleted = overTimeEmployeeService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the OverTimeEmployee instance associated with the given id.")
    public OverTimeEmployee editOverTimeEmployee(@PathVariable("id") Integer id, @RequestBody OverTimeEmployee instance) throws EntityNotFoundException {
        LOGGER.debug("Editing OverTimeEmployee with id: {}" , instance.getIdOverTimeEmployee());
        instance.setIdOverTimeEmployee(id);
        instance = overTimeEmployeeService.update(instance);
        LOGGER.debug("OverTimeEmployee details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/listOvertimePayrolls", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listOvertimePayrolls instance associated with the given id.")
     public Page<ListOvertimePayroll> findAssociatedlistOvertimePayrolls(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated listOvertimePayrolls");
        return listOvertimePayrollService.findAssociatedValues(id,"overTimeEmployee","idOverTimeEmployee", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new OverTimeEmployee instance.")
	public OverTimeEmployee createOverTimeEmployee(@RequestBody OverTimeEmployee instance) {
		LOGGER.debug("Create OverTimeEmployee with information: {}" , instance);
		instance = overTimeEmployeeService.create(instance);
		LOGGER.debug("Created OverTimeEmployee with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setOverTimeEmployeeService(OverTimeEmployeeService service) {
		this.overTimeEmployeeService = service;
	}
}

