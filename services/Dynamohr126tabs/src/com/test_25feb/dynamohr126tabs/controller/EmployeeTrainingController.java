/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.EmployeeTrainingService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class EmployeeTraining.
 * @see com.test_25feb.dynamohr126tabs.EmployeeTraining
 */

@RestController(value = "Dynamohr126tabs.EmployeeTrainingController")
@Api(value = "/Dynamohr126tabs/EmployeeTraining", description = "Exposes APIs to work with EmployeeTraining resource.")
@RequestMapping("/Dynamohr126tabs/EmployeeTraining")
public class EmployeeTrainingController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeTrainingController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.EmployeeTrainingService")
	private EmployeeTrainingService employeeTrainingService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of EmployeeTraining instances matching the search criteria.")
	public Page<EmployeeTraining> findEmployeeTrainings( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering EmployeeTrainings list");
		return employeeTrainingService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of EmployeeTraining instances.")
	public Page<EmployeeTraining> getEmployeeTrainings(Pageable pageable) {
		LOGGER.debug("Rendering EmployeeTrainings list");
		return employeeTrainingService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of EmployeeTraining instances.")
	public Long countAllEmployeeTrainings() {
		LOGGER.debug("counting EmployeeTrainings");
		Long count = employeeTrainingService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the EmployeeTraining instance associated with the given id.")
    public EmployeeTraining getEmployeeTraining(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting EmployeeTraining with id: {}" , id);
        EmployeeTraining instance = employeeTrainingService.findById(id);
        LOGGER.debug("EmployeeTraining details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the EmployeeTraining instance associated with the given id.")
    public boolean deleteEmployeeTraining(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeTraining with id: {}" , id);
        EmployeeTraining deleted = employeeTrainingService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the EmployeeTraining instance associated with the given id.")
    public EmployeeTraining editEmployeeTraining(@PathVariable("id") Integer id, @RequestBody EmployeeTraining instance) throws EntityNotFoundException {
        LOGGER.debug("Editing EmployeeTraining with id: {}" , instance.getIdEmployeeTraining());
        instance.setIdEmployeeTraining(id);
        instance = employeeTrainingService.update(instance);
        LOGGER.debug("EmployeeTraining details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new EmployeeTraining instance.")
	public EmployeeTraining createEmployeeTraining(@RequestBody EmployeeTraining instance) {
		LOGGER.debug("Create EmployeeTraining with information: {}" , instance);
		instance = employeeTrainingService.create(instance);
		LOGGER.debug("Created EmployeeTraining with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setEmployeeTrainingService(EmployeeTrainingService service) {
		this.employeeTrainingService = service;
	}
}

