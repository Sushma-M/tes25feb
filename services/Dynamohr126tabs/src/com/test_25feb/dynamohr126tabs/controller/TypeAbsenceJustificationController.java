/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.JustifiedAbsenseService;
import com.test_25feb.dynamohr126tabs.service.TypeAbsenceJustificationService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class TypeAbsenceJustification.
 * @see com.test_25feb.dynamohr126tabs.TypeAbsenceJustification
 */

@RestController(value = "Dynamohr126tabs.TypeAbsenceJustificationController")
@Api(value = "/Dynamohr126tabs/TypeAbsenceJustification", description = "Exposes APIs to work with TypeAbsenceJustification resource.")
@RequestMapping("/Dynamohr126tabs/TypeAbsenceJustification")
public class TypeAbsenceJustificationController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeAbsenceJustificationController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.TypeAbsenceJustificationService")
	private TypeAbsenceJustificationService typeAbsenceJustificationService;


    @Autowired
    @Qualifier("Dynamohr126tabs.JustifiedAbsenseService")
    private JustifiedAbsenseService justifiedAbsenseService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TypeAbsenceJustification instances matching the search criteria.")
	public Page<TypeAbsenceJustification> findTypeAbsenceJustifications( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TypeAbsenceJustifications list");
		return typeAbsenceJustificationService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of TypeAbsenceJustification instances.")
	public Page<TypeAbsenceJustification> getTypeAbsenceJustifications(Pageable pageable) {
		LOGGER.debug("Rendering TypeAbsenceJustifications list");
		return typeAbsenceJustificationService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TypeAbsenceJustification instances.")
	public Long countAllTypeAbsenceJustifications() {
		LOGGER.debug("counting TypeAbsenceJustifications");
		Long count = typeAbsenceJustificationService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TypeAbsenceJustification instance associated with the given id.")
    public TypeAbsenceJustification getTypeAbsenceJustification(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeAbsenceJustification with id: {}" , id);
        TypeAbsenceJustification instance = typeAbsenceJustificationService.findById(id);
        LOGGER.debug("TypeAbsenceJustification details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TypeAbsenceJustification instance associated with the given id.")
    public boolean deleteTypeAbsenceJustification(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeAbsenceJustification with id: {}" , id);
        TypeAbsenceJustification deleted = typeAbsenceJustificationService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TypeAbsenceJustification instance associated with the given id.")
    public TypeAbsenceJustification editTypeAbsenceJustification(@PathVariable("id") Integer id, @RequestBody TypeAbsenceJustification instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeAbsenceJustification with id: {}" , instance.getIdTypeAbsenceJustification());
        instance.setIdTypeAbsenceJustification(id);
        instance = typeAbsenceJustificationService.update(instance);
        LOGGER.debug("TypeAbsenceJustification details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/justifiedAbsenses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the justifiedAbsenses instance associated with the given id.")
     public Page<JustifiedAbsense> findAssociatedjustifiedAbsenses(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated justifiedAbsenses");
        return justifiedAbsenseService.findAssociatedValues(id,"typeAbsenceJustification","idTypeAbsenceJustification", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TypeAbsenceJustification instance.")
	public TypeAbsenceJustification createTypeAbsenceJustification(@RequestBody TypeAbsenceJustification instance) {
		LOGGER.debug("Create TypeAbsenceJustification with information: {}" , instance);
		instance = typeAbsenceJustificationService.create(instance);
		LOGGER.debug("Created TypeAbsenceJustification with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTypeAbsenceJustificationService(TypeAbsenceJustificationService service) {
		this.typeAbsenceJustificationService = service;
	}
}

