/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.EmployeeLaborHistoryService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class EmployeeLaborHistory.
 * @see com.test_25feb.dynamohr126tabs.EmployeeLaborHistory
 */

@RestController(value = "Dynamohr126tabs.EmployeeLaborHistoryController")
@Api(value = "/Dynamohr126tabs/EmployeeLaborHistory", description = "Exposes APIs to work with EmployeeLaborHistory resource.")
@RequestMapping("/Dynamohr126tabs/EmployeeLaborHistory")
public class EmployeeLaborHistoryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeLaborHistoryController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.EmployeeLaborHistoryService")
	private EmployeeLaborHistoryService employeeLaborHistoryService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of EmployeeLaborHistory instances matching the search criteria.")
	public Page<EmployeeLaborHistory> findEmployeeLaborHistorys( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering EmployeeLaborHistorys list");
		return employeeLaborHistoryService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of EmployeeLaborHistory instances.")
	public Page<EmployeeLaborHistory> getEmployeeLaborHistorys(Pageable pageable) {
		LOGGER.debug("Rendering EmployeeLaborHistorys list");
		return employeeLaborHistoryService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of EmployeeLaborHistory instances.")
	public Long countAllEmployeeLaborHistorys() {
		LOGGER.debug("counting EmployeeLaborHistorys");
		Long count = employeeLaborHistoryService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the EmployeeLaborHistory instance associated with the given id.")
    public EmployeeLaborHistory getEmployeeLaborHistory(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting EmployeeLaborHistory with id: {}" , id);
        EmployeeLaborHistory instance = employeeLaborHistoryService.findById(id);
        LOGGER.debug("EmployeeLaborHistory details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the EmployeeLaborHistory instance associated with the given id.")
    public boolean deleteEmployeeLaborHistory(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeLaborHistory with id: {}" , id);
        EmployeeLaborHistory deleted = employeeLaborHistoryService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the EmployeeLaborHistory instance associated with the given id.")
    public EmployeeLaborHistory editEmployeeLaborHistory(@PathVariable("id") Integer id, @RequestBody EmployeeLaborHistory instance) throws EntityNotFoundException {
        LOGGER.debug("Editing EmployeeLaborHistory with id: {}" , instance.getIdEmployeeLaborHistory());
        instance.setIdEmployeeLaborHistory(id);
        instance = employeeLaborHistoryService.update(instance);
        LOGGER.debug("EmployeeLaborHistory details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new EmployeeLaborHistory instance.")
	public EmployeeLaborHistory createEmployeeLaborHistory(@RequestBody EmployeeLaborHistory instance) {
		LOGGER.debug("Create EmployeeLaborHistory with information: {}" , instance);
		instance = employeeLaborHistoryService.create(instance);
		LOGGER.debug("Created EmployeeLaborHistory with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setEmployeeLaborHistoryService(EmployeeLaborHistoryService service) {
		this.employeeLaborHistoryService = service;
	}
}

