/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.EmployeeFileLocationService;
import com.test_25feb.dynamohr126tabs.service.TypeMovementService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class TypeMovement.
 * @see com.test_25feb.dynamohr126tabs.TypeMovement
 */

@RestController(value = "Dynamohr126tabs.TypeMovementController")
@Api(value = "/Dynamohr126tabs/TypeMovement", description = "Exposes APIs to work with TypeMovement resource.")
@RequestMapping("/Dynamohr126tabs/TypeMovement")
public class TypeMovementController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeMovementController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.TypeMovementService")
	private TypeMovementService typeMovementService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeFileLocationService")
    private EmployeeFileLocationService employeeFileLocationService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TypeMovement instances matching the search criteria.")
	public Page<TypeMovement> findTypeMovements( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TypeMovements list");
		return typeMovementService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of TypeMovement instances.")
	public Page<TypeMovement> getTypeMovements(Pageable pageable) {
		LOGGER.debug("Rendering TypeMovements list");
		return typeMovementService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TypeMovement instances.")
	public Long countAllTypeMovements() {
		LOGGER.debug("counting TypeMovements");
		Long count = typeMovementService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TypeMovement instance associated with the given id.")
    public TypeMovement getTypeMovement(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeMovement with id: {}" , id);
        TypeMovement instance = typeMovementService.findById(id);
        LOGGER.debug("TypeMovement details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TypeMovement instance associated with the given id.")
    public boolean deleteTypeMovement(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeMovement with id: {}" , id);
        TypeMovement deleted = typeMovementService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TypeMovement instance associated with the given id.")
    public TypeMovement editTypeMovement(@PathVariable("id") Integer id, @RequestBody TypeMovement instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeMovement with id: {}" , instance.getIdTypeMovement());
        instance.setIdTypeMovement(id);
        instance = typeMovementService.update(instance);
        LOGGER.debug("TypeMovement details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/employeeFileLocations", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeFileLocations instance associated with the given id.")
     public Page<EmployeeFileLocation> findAssociatedemployeeFileLocations(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeeFileLocations");
        return employeeFileLocationService.findAssociatedValues(id,"typeMovement","idTypeMovement", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TypeMovement instance.")
	public TypeMovement createTypeMovement(@RequestBody TypeMovement instance) {
		LOGGER.debug("Create TypeMovement with information: {}" , instance);
		instance = typeMovementService.create(instance);
		LOGGER.debug("Created TypeMovement with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTypeMovementService(TypeMovementService service) {
		this.typeMovementService = service;
	}
}

