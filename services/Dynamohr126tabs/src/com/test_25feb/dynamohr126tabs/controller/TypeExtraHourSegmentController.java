/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.OverTimeSegmentPayrollService;
import com.test_25feb.dynamohr126tabs.service.TypeExtraHourSegmentService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class TypeExtraHourSegment.
 * @see com.test_25feb.dynamohr126tabs.TypeExtraHourSegment
 */

@RestController(value = "Dynamohr126tabs.TypeExtraHourSegmentController")
@Api(value = "/Dynamohr126tabs/TypeExtraHourSegment", description = "Exposes APIs to work with TypeExtraHourSegment resource.")
@RequestMapping("/Dynamohr126tabs/TypeExtraHourSegment")
public class TypeExtraHourSegmentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeExtraHourSegmentController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.TypeExtraHourSegmentService")
	private TypeExtraHourSegmentService typeExtraHourSegmentService;


    @Autowired
    @Qualifier("Dynamohr126tabs.OverTimeSegmentPayrollService")
    private OverTimeSegmentPayrollService overTimeSegmentPayrollService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TypeExtraHourSegment instances matching the search criteria.")
	public Page<TypeExtraHourSegment> findTypeExtraHourSegments( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TypeExtraHourSegments list");
		return typeExtraHourSegmentService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of TypeExtraHourSegment instances.")
	public Page<TypeExtraHourSegment> getTypeExtraHourSegments(Pageable pageable) {
		LOGGER.debug("Rendering TypeExtraHourSegments list");
		return typeExtraHourSegmentService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TypeExtraHourSegment instances.")
	public Long countAllTypeExtraHourSegments() {
		LOGGER.debug("counting TypeExtraHourSegments");
		Long count = typeExtraHourSegmentService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TypeExtraHourSegment instance associated with the given id.")
    public TypeExtraHourSegment getTypeExtraHourSegment(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeExtraHourSegment with id: {}" , id);
        TypeExtraHourSegment instance = typeExtraHourSegmentService.findById(id);
        LOGGER.debug("TypeExtraHourSegment details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TypeExtraHourSegment instance associated with the given id.")
    public boolean deleteTypeExtraHourSegment(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeExtraHourSegment with id: {}" , id);
        TypeExtraHourSegment deleted = typeExtraHourSegmentService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TypeExtraHourSegment instance associated with the given id.")
    public TypeExtraHourSegment editTypeExtraHourSegment(@PathVariable("id") Integer id, @RequestBody TypeExtraHourSegment instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeExtraHourSegment with id: {}" , instance.getIdTypeExtraHourSegment());
        instance.setIdTypeExtraHourSegment(id);
        instance = typeExtraHourSegmentService.update(instance);
        LOGGER.debug("TypeExtraHourSegment details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/overTimeSegmentPayrolls", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the overTimeSegmentPayrolls instance associated with the given id.")
     public Page<OverTimeSegmentPayroll> findAssociatedoverTimeSegmentPayrolls(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated overTimeSegmentPayrolls");
        return overTimeSegmentPayrollService.findAssociatedValues(id,"typeExtraHourSegment","idTypeExtraHourSegment", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TypeExtraHourSegment instance.")
	public TypeExtraHourSegment createTypeExtraHourSegment(@RequestBody TypeExtraHourSegment instance) {
		LOGGER.debug("Create TypeExtraHourSegment with information: {}" , instance);
		instance = typeExtraHourSegmentService.create(instance);
		LOGGER.debug("Created TypeExtraHourSegment with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTypeExtraHourSegmentService(TypeExtraHourSegmentService service) {
		this.typeExtraHourSegmentService = service;
	}
}

