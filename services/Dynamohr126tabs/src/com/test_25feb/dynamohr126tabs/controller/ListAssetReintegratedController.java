/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.ListAssetReintegratedService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class ListAssetReintegrated.
 * @see com.test_25feb.dynamohr126tabs.ListAssetReintegrated
 */

@RestController(value = "Dynamohr126tabs.ListAssetReintegratedController")
@Api(value = "/Dynamohr126tabs/ListAssetReintegrated", description = "Exposes APIs to work with ListAssetReintegrated resource.")
@RequestMapping("/Dynamohr126tabs/ListAssetReintegrated")
public class ListAssetReintegratedController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListAssetReintegratedController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.ListAssetReintegratedService")
	private ListAssetReintegratedService listAssetReintegratedService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ListAssetReintegrated instances matching the search criteria.")
	public Page<ListAssetReintegrated> findListAssetReintegrateds( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ListAssetReintegrateds list");
		return listAssetReintegratedService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of ListAssetReintegrated instances.")
	public Page<ListAssetReintegrated> getListAssetReintegrateds(Pageable pageable) {
		LOGGER.debug("Rendering ListAssetReintegrateds list");
		return listAssetReintegratedService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ListAssetReintegrated instances.")
	public Long countAllListAssetReintegrateds() {
		LOGGER.debug("counting ListAssetReintegrateds");
		Long count = listAssetReintegratedService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ListAssetReintegrated instance associated with the given id.")
    public ListAssetReintegrated getListAssetReintegrated(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ListAssetReintegrated with id: {}" , id);
        ListAssetReintegrated instance = listAssetReintegratedService.findById(id);
        LOGGER.debug("ListAssetReintegrated details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ListAssetReintegrated instance associated with the given id.")
    public boolean deleteListAssetReintegrated(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListAssetReintegrated with id: {}" , id);
        ListAssetReintegrated deleted = listAssetReintegratedService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ListAssetReintegrated instance associated with the given id.")
    public ListAssetReintegrated editListAssetReintegrated(@PathVariable("id") Integer id, @RequestBody ListAssetReintegrated instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ListAssetReintegrated with id: {}" , instance.getIdListAssetReintegrated());
        instance.setIdListAssetReintegrated(id);
        instance = listAssetReintegratedService.update(instance);
        LOGGER.debug("ListAssetReintegrated details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ListAssetReintegrated instance.")
	public ListAssetReintegrated createListAssetReintegrated(@RequestBody ListAssetReintegrated instance) {
		LOGGER.debug("Create ListAssetReintegrated with information: {}" , instance);
		instance = listAssetReintegratedService.create(instance);
		LOGGER.debug("Created ListAssetReintegrated with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setListAssetReintegratedService(ListAssetReintegratedService service) {
		this.listAssetReintegratedService = service;
	}
}

