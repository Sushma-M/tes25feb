/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.DetallePlanillaEgresosService;
import org.springframework.web.bind.annotation.RequestBody;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class DetallePlanillaEgresos.
 * @see com.test_25feb.dynamohr126tabs.DetallePlanillaEgresos
 */

@RestController(value = "Dynamohr126tabs.DetallePlanillaEgresosController")
@Api(value = "/Dynamohr126tabs/DetallePlanillaEgresos", description = "Exposes APIs to work with DetallePlanillaEgresos resource.")
@RequestMapping("/Dynamohr126tabs/DetallePlanillaEgresos")
public class DetallePlanillaEgresosController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DetallePlanillaEgresosController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.DetallePlanillaEgresosService")
	private DetallePlanillaEgresosService detallePlanillaEgresosService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of DetallePlanillaEgresos instances matching the search criteria.")
	public Page<DetallePlanillaEgresos> findDetallePlanillaEgresoss( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering DetallePlanillaEgresoss list");
		return detallePlanillaEgresosService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of DetallePlanillaEgresos instances.")
	public Page<DetallePlanillaEgresos> getDetallePlanillaEgresoss(Pageable pageable) {
		LOGGER.debug("Rendering DetallePlanillaEgresoss list");
		return detallePlanillaEgresosService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of DetallePlanillaEgresos instances.")
	public Long countAllDetallePlanillaEgresoss() {
		LOGGER.debug("counting DetallePlanillaEgresoss");
		Long count = detallePlanillaEgresosService.countAll();
		return count;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the DetallePlanillaEgresos instance associated with the given composite-id.")
	public DetallePlanillaEgresos getDetallePlanillaEgresos( @RequestParam("idPayrollDetail") Integer idPayrollDetail, @RequestParam("type_") String type_, @RequestParam("code") String code, @RequestParam("description_") String description_, @RequestParam("currency") String currency, @RequestParam("value_") Double value_)
	 throws EntityNotFoundException {
	    DetallePlanillaEgresosId temp = new DetallePlanillaEgresosId();
	    temp.setIdPayrollDetail(idPayrollDetail);
	    temp.setType_(type_);
	    temp.setCode(code);
	    temp.setDescription_(description_);
	    temp.setCurrency(currency);
	    temp.setValue_(value_);
		LOGGER.debug("Getting DetallePlanillaEgresos with id: {}" , temp);
		DetallePlanillaEgresos instance = detallePlanillaEgresosService.findById(temp);
		LOGGER.debug("DetallePlanillaEgresos details with id: {}" , instance);
		return instance;
	}
	@RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
	@ApiOperation(value = "Deletes the DetallePlanillaEgresos instance associated with the given composite-id.")
	public boolean deleteDetallePlanillaEgresos( @RequestParam("idPayrollDetail") Integer idPayrollDetail, @RequestParam("type_") String type_, @RequestParam("code") String code, @RequestParam("description_") String description_, @RequestParam("currency") String currency, @RequestParam("value_") Double value_)throws EntityNotFoundException {
	    DetallePlanillaEgresosId temp = new DetallePlanillaEgresosId();
        temp.setIdPayrollDetail(idPayrollDetail);
        temp.setType_(type_);
        temp.setCode(code);
        temp.setDescription_(description_);
        temp.setCurrency(currency);
        temp.setValue_(value_);
		LOGGER.debug("Deleting DetallePlanillaEgresos with id: {}" , temp);
		DetallePlanillaEgresos deleted = detallePlanillaEgresosService.delete(temp);
		return deleted != null;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
	@ApiOperation(value = "Updates the DetallePlanillaEgresos instance associated with the given composite-id.")
	public DetallePlanillaEgresos editDetallePlanillaEgresos( @RequestParam("idPayrollDetail") Integer idPayrollDetail, @RequestParam("type_") String type_, @RequestParam("code") String code, @RequestParam("description_") String description_, @RequestParam("currency") String currency, @RequestParam("value_") Double value_, @RequestBody DetallePlanillaEgresos instance) throws EntityNotFoundException {
	    DetallePlanillaEgresosId temp = new DetallePlanillaEgresosId();
         temp.setIdPayrollDetail(idPayrollDetail);
         temp.setType_(type_);
         temp.setCode(code);
         temp.setDescription_(description_);
         temp.setCurrency(currency);
         temp.setValue_(value_);
        detallePlanillaEgresosService.delete(temp);
        instance = detallePlanillaEgresosService.create(instance);
	    LOGGER.debug("DetallePlanillaEgresos details with id is updated: {}" , instance);
		return instance;
	}

	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new DetallePlanillaEgresos instance.")
	public DetallePlanillaEgresos createDetallePlanillaEgresos(@RequestBody DetallePlanillaEgresos instance) {
		LOGGER.debug("Create DetallePlanillaEgresos with information: {}" , instance);
		instance = detallePlanillaEgresosService.create(instance);
		LOGGER.debug("Created DetallePlanillaEgresos with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setDetallePlanillaEgresosService(DetallePlanillaEgresosService service) {
		this.detallePlanillaEgresosService = service;
	}
}

