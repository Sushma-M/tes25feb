/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.MonthService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class Month.
 * @see com.test_25feb.dynamohr126tabs.Month
 */

@RestController(value = "Dynamohr126tabs.MonthController")
@Api(value = "/Dynamohr126tabs/Month", description = "Exposes APIs to work with Month resource.")
@RequestMapping("/Dynamohr126tabs/Month")
public class MonthController {

    private static final Logger LOGGER = LoggerFactory.getLogger(MonthController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.MonthService")
	private MonthService monthService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Month instances matching the search criteria.")
	public Page<Month> findMonths( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Months list");
		return monthService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of Month instances.")
	public Page<Month> getMonths(Pageable pageable) {
		LOGGER.debug("Rendering Months list");
		return monthService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Month instances.")
	public Long countAllMonths() {
		LOGGER.debug("counting Months");
		Long count = monthService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Month instance associated with the given id.")
    public Month getMonth(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Month with id: {}" , id);
        Month instance = monthService.findById(id);
        LOGGER.debug("Month details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Month instance associated with the given id.")
    public boolean deleteMonth(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Month with id: {}" , id);
        Month deleted = monthService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Month instance associated with the given id.")
    public Month editMonth(@PathVariable("id") Integer id, @RequestBody Month instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Month with id: {}" , instance.getIdMonth());
        instance.setIdMonth(id);
        instance = monthService.update(instance);
        LOGGER.debug("Month details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Month instance.")
	public Month createMonth(@RequestBody Month instance) {
		LOGGER.debug("Create Month with information: {}" , instance);
		instance = monthService.create(instance);
		LOGGER.debug("Created Month with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setMonthService(MonthService service) {
		this.monthService = service;
	}
}

