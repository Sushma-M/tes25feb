/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.ScheduleFixedDayService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class ScheduleFixedDay.
 * @see com.test_25feb.dynamohr126tabs.ScheduleFixedDay
 */

@RestController(value = "Dynamohr126tabs.ScheduleFixedDayController")
@Api(value = "/Dynamohr126tabs/ScheduleFixedDay", description = "Exposes APIs to work with ScheduleFixedDay resource.")
@RequestMapping("/Dynamohr126tabs/ScheduleFixedDay")
public class ScheduleFixedDayController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ScheduleFixedDayController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.ScheduleFixedDayService")
	private ScheduleFixedDayService scheduleFixedDayService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ScheduleFixedDay instances matching the search criteria.")
	public Page<ScheduleFixedDay> findScheduleFixedDays( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ScheduleFixedDays list");
		return scheduleFixedDayService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of ScheduleFixedDay instances.")
	public Page<ScheduleFixedDay> getScheduleFixedDays(Pageable pageable) {
		LOGGER.debug("Rendering ScheduleFixedDays list");
		return scheduleFixedDayService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ScheduleFixedDay instances.")
	public Long countAllScheduleFixedDays() {
		LOGGER.debug("counting ScheduleFixedDays");
		Long count = scheduleFixedDayService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ScheduleFixedDay instance associated with the given id.")
    public ScheduleFixedDay getScheduleFixedDay(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ScheduleFixedDay with id: {}" , id);
        ScheduleFixedDay instance = scheduleFixedDayService.findById(id);
        LOGGER.debug("ScheduleFixedDay details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ScheduleFixedDay instance associated with the given id.")
    public boolean deleteScheduleFixedDay(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ScheduleFixedDay with id: {}" , id);
        ScheduleFixedDay deleted = scheduleFixedDayService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ScheduleFixedDay instance associated with the given id.")
    public ScheduleFixedDay editScheduleFixedDay(@PathVariable("id") Integer id, @RequestBody ScheduleFixedDay instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ScheduleFixedDay with id: {}" , instance.getIdScheduleFixedDay());
        instance.setIdScheduleFixedDay(id);
        instance = scheduleFixedDayService.update(instance);
        LOGGER.debug("ScheduleFixedDay details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ScheduleFixedDay instance.")
	public ScheduleFixedDay createScheduleFixedDay(@RequestBody ScheduleFixedDay instance) {
		LOGGER.debug("Create ScheduleFixedDay with information: {}" , instance);
		instance = scheduleFixedDayService.create(instance);
		LOGGER.debug("Created ScheduleFixedDay with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setScheduleFixedDayService(ScheduleFixedDayService service) {
		this.scheduleFixedDayService = service;
	}
}

