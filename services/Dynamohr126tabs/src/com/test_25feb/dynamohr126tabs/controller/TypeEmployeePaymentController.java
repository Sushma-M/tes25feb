/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.TypeEmployeePaymentService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class TypeEmployeePayment.
 * @see com.test_25feb.dynamohr126tabs.TypeEmployeePayment
 */

@RestController(value = "Dynamohr126tabs.TypeEmployeePaymentController")
@Api(value = "/Dynamohr126tabs/TypeEmployeePayment", description = "Exposes APIs to work with TypeEmployeePayment resource.")
@RequestMapping("/Dynamohr126tabs/TypeEmployeePayment")
public class TypeEmployeePaymentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeEmployeePaymentController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.TypeEmployeePaymentService")
	private TypeEmployeePaymentService typeEmployeePaymentService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TypeEmployeePayment instances matching the search criteria.")
	public Page<TypeEmployeePayment> findTypeEmployeePayments( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TypeEmployeePayments list");
		return typeEmployeePaymentService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of TypeEmployeePayment instances.")
	public Page<TypeEmployeePayment> getTypeEmployeePayments(Pageable pageable) {
		LOGGER.debug("Rendering TypeEmployeePayments list");
		return typeEmployeePaymentService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TypeEmployeePayment instances.")
	public Long countAllTypeEmployeePayments() {
		LOGGER.debug("counting TypeEmployeePayments");
		Long count = typeEmployeePaymentService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TypeEmployeePayment instance associated with the given id.")
    public TypeEmployeePayment getTypeEmployeePayment(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeEmployeePayment with id: {}" , id);
        TypeEmployeePayment instance = typeEmployeePaymentService.findById(id);
        LOGGER.debug("TypeEmployeePayment details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TypeEmployeePayment instance associated with the given id.")
    public boolean deleteTypeEmployeePayment(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeEmployeePayment with id: {}" , id);
        TypeEmployeePayment deleted = typeEmployeePaymentService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TypeEmployeePayment instance associated with the given id.")
    public TypeEmployeePayment editTypeEmployeePayment(@PathVariable("id") Integer id, @RequestBody TypeEmployeePayment instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeEmployeePayment with id: {}" , instance.getIdTypeEmployeePayment());
        instance.setIdTypeEmployeePayment(id);
        instance = typeEmployeePaymentService.update(instance);
        LOGGER.debug("TypeEmployeePayment details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TypeEmployeePayment instance.")
	public TypeEmployeePayment createTypeEmployeePayment(@RequestBody TypeEmployeePayment instance) {
		LOGGER.debug("Create TypeEmployeePayment with information: {}" , instance);
		instance = typeEmployeePaymentService.create(instance);
		LOGGER.debug("Created TypeEmployeePayment with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTypeEmployeePaymentService(TypeEmployeePaymentService service) {
		this.typeEmployeePaymentService = service;
	}
}

