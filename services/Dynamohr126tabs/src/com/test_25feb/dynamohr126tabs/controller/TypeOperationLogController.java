/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.LogOperationService;
import com.test_25feb.dynamohr126tabs.service.TypeOperationLogService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class TypeOperationLog.
 * @see com.test_25feb.dynamohr126tabs.TypeOperationLog
 */

@RestController(value = "Dynamohr126tabs.TypeOperationLogController")
@Api(value = "/Dynamohr126tabs/TypeOperationLog", description = "Exposes APIs to work with TypeOperationLog resource.")
@RequestMapping("/Dynamohr126tabs/TypeOperationLog")
public class TypeOperationLogController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeOperationLogController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.TypeOperationLogService")
	private TypeOperationLogService typeOperationLogService;


    @Autowired
    @Qualifier("Dynamohr126tabs.LogOperationService")
    private LogOperationService logOperationService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TypeOperationLog instances matching the search criteria.")
	public Page<TypeOperationLog> findTypeOperationLogs( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TypeOperationLogs list");
		return typeOperationLogService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of TypeOperationLog instances.")
	public Page<TypeOperationLog> getTypeOperationLogs(Pageable pageable) {
		LOGGER.debug("Rendering TypeOperationLogs list");
		return typeOperationLogService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TypeOperationLog instances.")
	public Long countAllTypeOperationLogs() {
		LOGGER.debug("counting TypeOperationLogs");
		Long count = typeOperationLogService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TypeOperationLog instance associated with the given id.")
    public TypeOperationLog getTypeOperationLog(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeOperationLog with id: {}" , id);
        TypeOperationLog instance = typeOperationLogService.findById(id);
        LOGGER.debug("TypeOperationLog details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TypeOperationLog instance associated with the given id.")
    public boolean deleteTypeOperationLog(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeOperationLog with id: {}" , id);
        TypeOperationLog deleted = typeOperationLogService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TypeOperationLog instance associated with the given id.")
    public TypeOperationLog editTypeOperationLog(@PathVariable("id") Integer id, @RequestBody TypeOperationLog instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeOperationLog with id: {}" , instance.getIdTypeOperationLog());
        instance.setIdTypeOperationLog(id);
        instance = typeOperationLogService.update(instance);
        LOGGER.debug("TypeOperationLog details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/logOperations", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the logOperations instance associated with the given id.")
     public Page<LogOperation> findAssociatedlogOperations(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated logOperations");
        return logOperationService.findAssociatedValues(id,"typeOperationLog","idTypeOperationLog", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TypeOperationLog instance.")
	public TypeOperationLog createTypeOperationLog(@RequestBody TypeOperationLog instance) {
		LOGGER.debug("Create TypeOperationLog with information: {}" , instance);
		instance = typeOperationLogService.create(instance);
		LOGGER.debug("Created TypeOperationLog with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTypeOperationLogService(TypeOperationLogService service) {
		this.typeOperationLogService = service;
	}
}

