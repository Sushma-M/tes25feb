/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.ListLoanDetailPayrollService;
import com.test_25feb.dynamohr126tabs.service.LoanService;
import com.test_25feb.dynamohr126tabs.service.PaymentLoanManualService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class Loan.
 * @see com.test_25feb.dynamohr126tabs.Loan
 */

@RestController(value = "Dynamohr126tabs.LoanController")
@Api(value = "/Dynamohr126tabs/Loan", description = "Exposes APIs to work with Loan resource.")
@RequestMapping("/Dynamohr126tabs/Loan")
public class LoanController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LoanController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.LoanService")
	private LoanService loanService;


    @Autowired
    @Qualifier("Dynamohr126tabs.PaymentLoanManualService")
    private PaymentLoanManualService paymentLoanManualService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ListLoanDetailPayrollService")
    private ListLoanDetailPayrollService listLoanDetailPayrollService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Loan instances matching the search criteria.")
	public Page<Loan> findLoans( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Loans list");
		return loanService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of Loan instances.")
	public Page<Loan> getLoans(Pageable pageable) {
		LOGGER.debug("Rendering Loans list");
		return loanService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Loan instances.")
	public Long countAllLoans() {
		LOGGER.debug("counting Loans");
		Long count = loanService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Loan instance associated with the given id.")
    public Loan getLoan(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Loan with id: {}" , id);
        Loan instance = loanService.findById(id);
        LOGGER.debug("Loan details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Loan instance associated with the given id.")
    public boolean deleteLoan(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Loan with id: {}" , id);
        Loan deleted = loanService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Loan instance associated with the given id.")
    public Loan editLoan(@PathVariable("id") Integer id, @RequestBody Loan instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Loan with id: {}" , instance.getIdLoan());
        instance.setIdLoan(id);
        instance = loanService.update(instance);
        LOGGER.debug("Loan details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/listLoanDetailPayrolls", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listLoanDetailPayrolls instance associated with the given id.")
     public Page<ListLoanDetailPayroll> findAssociatedlistLoanDetailPayrolls(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated listLoanDetailPayrolls");
        return listLoanDetailPayrollService.findAssociatedValues(id,"loan","idLoan", pageable);
   }

    @RequestMapping(value="/{id:.+}/paymentLoanManuals", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the paymentLoanManuals instance associated with the given id.")
     public Page<PaymentLoanManual> findAssociatedpaymentLoanManuals(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated paymentLoanManuals");
        return paymentLoanManualService.findAssociatedValues(id,"loan","idLoan", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Loan instance.")
	public Loan createLoan(@RequestBody Loan instance) {
		LOGGER.debug("Create Loan with information: {}" , instance);
		instance = loanService.create(instance);
		LOGGER.debug("Created Loan with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setLoanService(LoanService service) {
		this.loanService = service;
	}
}

