/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.CompanyDepartmentService;
import com.test_25feb.dynamohr126tabs.service.LocationService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class Location.
 * @see com.test_25feb.dynamohr126tabs.Location
 */

@RestController(value = "Dynamohr126tabs.LocationController")
@Api(value = "/Dynamohr126tabs/Location", description = "Exposes APIs to work with Location resource.")
@RequestMapping("/Dynamohr126tabs/Location")
public class LocationController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LocationController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.LocationService")
	private LocationService locationService;


    @Autowired
    @Qualifier("Dynamohr126tabs.CompanyDepartmentService")
    private CompanyDepartmentService companyDepartmentService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Location instances matching the search criteria.")
	public Page<Location> findLocations( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Locations list");
		return locationService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of Location instances.")
	public Page<Location> getLocations(Pageable pageable) {
		LOGGER.debug("Rendering Locations list");
		return locationService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Location instances.")
	public Long countAllLocations() {
		LOGGER.debug("counting Locations");
		Long count = locationService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Location instance associated with the given id.")
    public Location getLocation(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Location with id: {}" , id);
        Location instance = locationService.findById(id);
        LOGGER.debug("Location details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Location instance associated with the given id.")
    public boolean deleteLocation(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Location with id: {}" , id);
        Location deleted = locationService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Location instance associated with the given id.")
    public Location editLocation(@PathVariable("id") Integer id, @RequestBody Location instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Location with id: {}" , instance.getIdLocation());
        instance.setIdLocation(id);
        instance = locationService.update(instance);
        LOGGER.debug("Location details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/companyDepartments", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the companyDepartments instance associated with the given id.")
     public Page<CompanyDepartment> findAssociatedcompanyDepartments(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated companyDepartments");
        return companyDepartmentService.findAssociatedValues(id,"location","idLocation", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Location instance.")
	public Location createLocation(@RequestBody Location instance) {
		LOGGER.debug("Create Location with information: {}" , instance);
		instance = locationService.create(instance);
		LOGGER.debug("Created Location with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setLocationService(LocationService service) {
		this.locationService = service;
	}
}

