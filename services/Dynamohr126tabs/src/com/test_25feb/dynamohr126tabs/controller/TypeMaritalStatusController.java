/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.ApplicantToPositionService;
import com.test_25feb.dynamohr126tabs.service.EmployeeService;
import com.test_25feb.dynamohr126tabs.service.TypeMaritalStatusService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class TypeMaritalStatus.
 * @see com.test_25feb.dynamohr126tabs.TypeMaritalStatus
 */

@RestController(value = "Dynamohr126tabs.TypeMaritalStatusController")
@Api(value = "/Dynamohr126tabs/TypeMaritalStatus", description = "Exposes APIs to work with TypeMaritalStatus resource.")
@RequestMapping("/Dynamohr126tabs/TypeMaritalStatus")
public class TypeMaritalStatusController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeMaritalStatusController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.TypeMaritalStatusService")
	private TypeMaritalStatusService typeMaritalStatusService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ApplicantToPositionService")
    private ApplicantToPositionService applicantToPositionService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeService")
    private EmployeeService employeeService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TypeMaritalStatus instances matching the search criteria.")
	public Page<TypeMaritalStatus> findTypeMaritalStatuss( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TypeMaritalStatuss list");
		return typeMaritalStatusService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of TypeMaritalStatus instances.")
	public Page<TypeMaritalStatus> getTypeMaritalStatuss(Pageable pageable) {
		LOGGER.debug("Rendering TypeMaritalStatuss list");
		return typeMaritalStatusService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TypeMaritalStatus instances.")
	public Long countAllTypeMaritalStatuss() {
		LOGGER.debug("counting TypeMaritalStatuss");
		Long count = typeMaritalStatusService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TypeMaritalStatus instance associated with the given id.")
    public TypeMaritalStatus getTypeMaritalStatus(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeMaritalStatus with id: {}" , id);
        TypeMaritalStatus instance = typeMaritalStatusService.findById(id);
        LOGGER.debug("TypeMaritalStatus details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TypeMaritalStatus instance associated with the given id.")
    public boolean deleteTypeMaritalStatus(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeMaritalStatus with id: {}" , id);
        TypeMaritalStatus deleted = typeMaritalStatusService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TypeMaritalStatus instance associated with the given id.")
    public TypeMaritalStatus editTypeMaritalStatus(@PathVariable("id") Integer id, @RequestBody TypeMaritalStatus instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeMaritalStatus with id: {}" , instance.getIdTypeEmployeeTermination());
        instance.setIdTypeEmployeeTermination(id);
        instance = typeMaritalStatusService.update(instance);
        LOGGER.debug("TypeMaritalStatus details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/applicantToPositions", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the applicantToPositions instance associated with the given id.")
     public Page<ApplicantToPosition> findAssociatedapplicantToPositions(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated applicantToPositions");
        return applicantToPositionService.findAssociatedValues(id,"typeMaritalStatus","idTypeEmployeeTermination", pageable);
   }

    @RequestMapping(value="/{id:.+}/employees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employees instance associated with the given id.")
     public Page<Employee> findAssociatedemployees(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employees");
        return employeeService.findAssociatedValues(id,"typeMaritalStatus","idTypeEmployeeTermination", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TypeMaritalStatus instance.")
	public TypeMaritalStatus createTypeMaritalStatus(@RequestBody TypeMaritalStatus instance) {
		LOGGER.debug("Create TypeMaritalStatus with information: {}" , instance);
		instance = typeMaritalStatusService.create(instance);
		LOGGER.debug("Created TypeMaritalStatus with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTypeMaritalStatusService(TypeMaritalStatusService service) {
		this.typeMaritalStatusService = service;
	}
}

