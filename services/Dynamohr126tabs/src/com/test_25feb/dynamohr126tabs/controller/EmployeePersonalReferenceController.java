/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.EmployeePersonalReferenceService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class EmployeePersonalReference.
 * @see com.test_25feb.dynamohr126tabs.EmployeePersonalReference
 */

@RestController(value = "Dynamohr126tabs.EmployeePersonalReferenceController")
@Api(value = "/Dynamohr126tabs/EmployeePersonalReference", description = "Exposes APIs to work with EmployeePersonalReference resource.")
@RequestMapping("/Dynamohr126tabs/EmployeePersonalReference")
public class EmployeePersonalReferenceController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeePersonalReferenceController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.EmployeePersonalReferenceService")
	private EmployeePersonalReferenceService employeePersonalReferenceService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of EmployeePersonalReference instances matching the search criteria.")
	public Page<EmployeePersonalReference> findEmployeePersonalReferences( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering EmployeePersonalReferences list");
		return employeePersonalReferenceService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of EmployeePersonalReference instances.")
	public Page<EmployeePersonalReference> getEmployeePersonalReferences(Pageable pageable) {
		LOGGER.debug("Rendering EmployeePersonalReferences list");
		return employeePersonalReferenceService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of EmployeePersonalReference instances.")
	public Long countAllEmployeePersonalReferences() {
		LOGGER.debug("counting EmployeePersonalReferences");
		Long count = employeePersonalReferenceService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the EmployeePersonalReference instance associated with the given id.")
    public EmployeePersonalReference getEmployeePersonalReference(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting EmployeePersonalReference with id: {}" , id);
        EmployeePersonalReference instance = employeePersonalReferenceService.findById(id);
        LOGGER.debug("EmployeePersonalReference details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the EmployeePersonalReference instance associated with the given id.")
    public boolean deleteEmployeePersonalReference(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeePersonalReference with id: {}" , id);
        EmployeePersonalReference deleted = employeePersonalReferenceService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the EmployeePersonalReference instance associated with the given id.")
    public EmployeePersonalReference editEmployeePersonalReference(@PathVariable("id") Integer id, @RequestBody EmployeePersonalReference instance) throws EntityNotFoundException {
        LOGGER.debug("Editing EmployeePersonalReference with id: {}" , instance.getIdEmployeePersonalReference());
        instance.setIdEmployeePersonalReference(id);
        instance = employeePersonalReferenceService.update(instance);
        LOGGER.debug("EmployeePersonalReference details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new EmployeePersonalReference instance.")
	public EmployeePersonalReference createEmployeePersonalReference(@RequestBody EmployeePersonalReference instance) {
		LOGGER.debug("Create EmployeePersonalReference with information: {}" , instance);
		instance = employeePersonalReferenceService.create(instance);
		LOGGER.debug("Created EmployeePersonalReference with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setEmployeePersonalReferenceService(EmployeePersonalReferenceService service) {
		this.employeePersonalReferenceService = service;
	}
}

