/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.AssessmentEmployeeDataService;
import com.test_25feb.dynamohr126tabs.service.AssessmentFieldService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class AssessmentField.
 * @see com.test_25feb.dynamohr126tabs.AssessmentField
 */

@RestController(value = "Dynamohr126tabs.AssessmentFieldController")
@Api(value = "/Dynamohr126tabs/AssessmentField", description = "Exposes APIs to work with AssessmentField resource.")
@RequestMapping("/Dynamohr126tabs/AssessmentField")
public class AssessmentFieldController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AssessmentFieldController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.AssessmentFieldService")
	private AssessmentFieldService assessmentFieldService;


    @Autowired
    @Qualifier("Dynamohr126tabs.AssessmentEmployeeDataService")
    private AssessmentEmployeeDataService assessmentEmployeeDataService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of AssessmentField instances matching the search criteria.")
	public Page<AssessmentField> findAssessmentFields( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering AssessmentFields list");
		return assessmentFieldService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of AssessmentField instances.")
	public Page<AssessmentField> getAssessmentFields(Pageable pageable) {
		LOGGER.debug("Rendering AssessmentFields list");
		return assessmentFieldService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of AssessmentField instances.")
	public Long countAllAssessmentFields() {
		LOGGER.debug("counting AssessmentFields");
		Long count = assessmentFieldService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the AssessmentField instance associated with the given id.")
    public AssessmentField getAssessmentField(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting AssessmentField with id: {}" , id);
        AssessmentField instance = assessmentFieldService.findById(id);
        LOGGER.debug("AssessmentField details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the AssessmentField instance associated with the given id.")
    public boolean deleteAssessmentField(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AssessmentField with id: {}" , id);
        AssessmentField deleted = assessmentFieldService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the AssessmentField instance associated with the given id.")
    public AssessmentField editAssessmentField(@PathVariable("id") Integer id, @RequestBody AssessmentField instance) throws EntityNotFoundException {
        LOGGER.debug("Editing AssessmentField with id: {}" , instance.getIdAssessmentField());
        instance.setIdAssessmentField(id);
        instance = assessmentFieldService.update(instance);
        LOGGER.debug("AssessmentField details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/assessmentEmployeeDatas", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the assessmentEmployeeDatas instance associated with the given id.")
     public Page<AssessmentEmployeeData> findAssociatedassessmentEmployeeDatas(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated assessmentEmployeeDatas");
        return assessmentEmployeeDataService.findAssociatedValues(id,"assessmentField","idAssessmentField", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new AssessmentField instance.")
	public AssessmentField createAssessmentField(@RequestBody AssessmentField instance) {
		LOGGER.debug("Create AssessmentField with information: {}" , instance);
		instance = assessmentFieldService.create(instance);
		LOGGER.debug("Created AssessmentField with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setAssessmentFieldService(AssessmentFieldService service) {
		this.assessmentFieldService = service;
	}
}

