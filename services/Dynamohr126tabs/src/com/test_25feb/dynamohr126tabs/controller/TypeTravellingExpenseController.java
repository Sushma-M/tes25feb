/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.TravelExpenseService;
import com.test_25feb.dynamohr126tabs.service.TypeTravellingExpenseService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class TypeTravellingExpense.
 * @see com.test_25feb.dynamohr126tabs.TypeTravellingExpense
 */

@RestController(value = "Dynamohr126tabs.TypeTravellingExpenseController")
@Api(value = "/Dynamohr126tabs/TypeTravellingExpense", description = "Exposes APIs to work with TypeTravellingExpense resource.")
@RequestMapping("/Dynamohr126tabs/TypeTravellingExpense")
public class TypeTravellingExpenseController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeTravellingExpenseController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.TypeTravellingExpenseService")
	private TypeTravellingExpenseService typeTravellingExpenseService;


    @Autowired
    @Qualifier("Dynamohr126tabs.TravelExpenseService")
    private TravelExpenseService travelExpenseService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TypeTravellingExpense instances matching the search criteria.")
	public Page<TypeTravellingExpense> findTypeTravellingExpenses( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TypeTravellingExpenses list");
		return typeTravellingExpenseService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of TypeTravellingExpense instances.")
	public Page<TypeTravellingExpense> getTypeTravellingExpenses(Pageable pageable) {
		LOGGER.debug("Rendering TypeTravellingExpenses list");
		return typeTravellingExpenseService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TypeTravellingExpense instances.")
	public Long countAllTypeTravellingExpenses() {
		LOGGER.debug("counting TypeTravellingExpenses");
		Long count = typeTravellingExpenseService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TypeTravellingExpense instance associated with the given id.")
    public TypeTravellingExpense getTypeTravellingExpense(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeTravellingExpense with id: {}" , id);
        TypeTravellingExpense instance = typeTravellingExpenseService.findById(id);
        LOGGER.debug("TypeTravellingExpense details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TypeTravellingExpense instance associated with the given id.")
    public boolean deleteTypeTravellingExpense(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeTravellingExpense with id: {}" , id);
        TypeTravellingExpense deleted = typeTravellingExpenseService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TypeTravellingExpense instance associated with the given id.")
    public TypeTravellingExpense editTypeTravellingExpense(@PathVariable("id") Integer id, @RequestBody TypeTravellingExpense instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeTravellingExpense with id: {}" , instance.getIdTypeTravellingExpense());
        instance.setIdTypeTravellingExpense(id);
        instance = typeTravellingExpenseService.update(instance);
        LOGGER.debug("TypeTravellingExpense details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/travelExpenses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the travelExpenses instance associated with the given id.")
     public Page<TravelExpense> findAssociatedtravelExpenses(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated travelExpenses");
        return travelExpenseService.findAssociatedValues(id,"typeTravellingExpense","idTypeTravellingExpense", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TypeTravellingExpense instance.")
	public TypeTravellingExpense createTypeTravellingExpense(@RequestBody TypeTravellingExpense instance) {
		LOGGER.debug("Create TypeTravellingExpense with information: {}" , instance);
		instance = typeTravellingExpenseService.create(instance);
		LOGGER.debug("Created TypeTravellingExpense with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTypeTravellingExpenseService(TypeTravellingExpenseService service) {
		this.typeTravellingExpenseService = service;
	}
}

