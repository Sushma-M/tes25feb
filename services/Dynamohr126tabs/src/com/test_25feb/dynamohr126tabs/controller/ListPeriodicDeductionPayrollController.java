/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.ListPeriodicDeductionPayrollService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class ListPeriodicDeductionPayroll.
 * @see com.test_25feb.dynamohr126tabs.ListPeriodicDeductionPayroll
 */

@RestController(value = "Dynamohr126tabs.ListPeriodicDeductionPayrollController")
@Api(value = "/Dynamohr126tabs/ListPeriodicDeductionPayroll", description = "Exposes APIs to work with ListPeriodicDeductionPayroll resource.")
@RequestMapping("/Dynamohr126tabs/ListPeriodicDeductionPayroll")
public class ListPeriodicDeductionPayrollController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListPeriodicDeductionPayrollController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.ListPeriodicDeductionPayrollService")
	private ListPeriodicDeductionPayrollService listPeriodicDeductionPayrollService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ListPeriodicDeductionPayroll instances matching the search criteria.")
	public Page<ListPeriodicDeductionPayroll> findListPeriodicDeductionPayrolls( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ListPeriodicDeductionPayrolls list");
		return listPeriodicDeductionPayrollService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of ListPeriodicDeductionPayroll instances.")
	public Page<ListPeriodicDeductionPayroll> getListPeriodicDeductionPayrolls(Pageable pageable) {
		LOGGER.debug("Rendering ListPeriodicDeductionPayrolls list");
		return listPeriodicDeductionPayrollService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ListPeriodicDeductionPayroll instances.")
	public Long countAllListPeriodicDeductionPayrolls() {
		LOGGER.debug("counting ListPeriodicDeductionPayrolls");
		Long count = listPeriodicDeductionPayrollService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ListPeriodicDeductionPayroll instance associated with the given id.")
    public ListPeriodicDeductionPayroll getListPeriodicDeductionPayroll(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ListPeriodicDeductionPayroll with id: {}" , id);
        ListPeriodicDeductionPayroll instance = listPeriodicDeductionPayrollService.findById(id);
        LOGGER.debug("ListPeriodicDeductionPayroll details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ListPeriodicDeductionPayroll instance associated with the given id.")
    public boolean deleteListPeriodicDeductionPayroll(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListPeriodicDeductionPayroll with id: {}" , id);
        ListPeriodicDeductionPayroll deleted = listPeriodicDeductionPayrollService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ListPeriodicDeductionPayroll instance associated with the given id.")
    public ListPeriodicDeductionPayroll editListPeriodicDeductionPayroll(@PathVariable("id") Integer id, @RequestBody ListPeriodicDeductionPayroll instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ListPeriodicDeductionPayroll with id: {}" , instance.getIdListPeriodicDeductionPayroll());
        instance.setIdListPeriodicDeductionPayroll(id);
        instance = listPeriodicDeductionPayrollService.update(instance);
        LOGGER.debug("ListPeriodicDeductionPayroll details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ListPeriodicDeductionPayroll instance.")
	public ListPeriodicDeductionPayroll createListPeriodicDeductionPayroll(@RequestBody ListPeriodicDeductionPayroll instance) {
		LOGGER.debug("Create ListPeriodicDeductionPayroll with information: {}" , instance);
		instance = listPeriodicDeductionPayrollService.create(instance);
		LOGGER.debug("Created ListPeriodicDeductionPayroll with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setListPeriodicDeductionPayrollService(ListPeriodicDeductionPayrollService service) {
		this.listPeriodicDeductionPayrollService = service;
	}
}

