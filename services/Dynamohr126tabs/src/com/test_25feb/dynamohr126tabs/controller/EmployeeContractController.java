/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.EmployeeContractService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class EmployeeContract.
 * @see com.test_25feb.dynamohr126tabs.EmployeeContract
 */

@RestController(value = "Dynamohr126tabs.EmployeeContractController")
@Api(value = "/Dynamohr126tabs/EmployeeContract", description = "Exposes APIs to work with EmployeeContract resource.")
@RequestMapping("/Dynamohr126tabs/EmployeeContract")
public class EmployeeContractController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeContractController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.EmployeeContractService")
	private EmployeeContractService employeeContractService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of EmployeeContract instances matching the search criteria.")
	public Page<EmployeeContract> findEmployeeContracts( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering EmployeeContracts list");
		return employeeContractService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of EmployeeContract instances.")
	public Page<EmployeeContract> getEmployeeContracts(Pageable pageable) {
		LOGGER.debug("Rendering EmployeeContracts list");
		return employeeContractService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of EmployeeContract instances.")
	public Long countAllEmployeeContracts() {
		LOGGER.debug("counting EmployeeContracts");
		Long count = employeeContractService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the EmployeeContract instance associated with the given id.")
    public EmployeeContract getEmployeeContract(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting EmployeeContract with id: {}" , id);
        EmployeeContract instance = employeeContractService.findById(id);
        LOGGER.debug("EmployeeContract details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the EmployeeContract instance associated with the given id.")
    public boolean deleteEmployeeContract(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeContract with id: {}" , id);
        EmployeeContract deleted = employeeContractService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the EmployeeContract instance associated with the given id.")
    public EmployeeContract editEmployeeContract(@PathVariable("id") Integer id, @RequestBody EmployeeContract instance) throws EntityNotFoundException {
        LOGGER.debug("Editing EmployeeContract with id: {}" , instance.getIdEmployeeContract());
        instance.setIdEmployeeContract(id);
        instance = employeeContractService.update(instance);
        LOGGER.debug("EmployeeContract details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new EmployeeContract instance.")
	public EmployeeContract createEmployeeContract(@RequestBody EmployeeContract instance) {
		LOGGER.debug("Create EmployeeContract with information: {}" , instance);
		instance = employeeContractService.create(instance);
		LOGGER.debug("Created EmployeeContract with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setEmployeeContractService(EmployeeContractService service) {
		this.employeeContractService = service;
	}
}

