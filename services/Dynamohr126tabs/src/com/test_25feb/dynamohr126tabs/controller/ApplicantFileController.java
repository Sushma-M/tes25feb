/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.ApplicantFileService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class ApplicantFile.
 * @see com.test_25feb.dynamohr126tabs.ApplicantFile
 */

@RestController(value = "Dynamohr126tabs.ApplicantFileController")
@Api(value = "/Dynamohr126tabs/ApplicantFile", description = "Exposes APIs to work with ApplicantFile resource.")
@RequestMapping("/Dynamohr126tabs/ApplicantFile")
public class ApplicantFileController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ApplicantFileController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.ApplicantFileService")
	private ApplicantFileService applicantFileService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ApplicantFile instances matching the search criteria.")
	public Page<ApplicantFile> findApplicantFiles( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ApplicantFiles list");
		return applicantFileService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of ApplicantFile instances.")
	public Page<ApplicantFile> getApplicantFiles(Pageable pageable) {
		LOGGER.debug("Rendering ApplicantFiles list");
		return applicantFileService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ApplicantFile instances.")
	public Long countAllApplicantFiles() {
		LOGGER.debug("counting ApplicantFiles");
		Long count = applicantFileService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ApplicantFile instance associated with the given id.")
    public ApplicantFile getApplicantFile(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ApplicantFile with id: {}" , id);
        ApplicantFile instance = applicantFileService.findById(id);
        LOGGER.debug("ApplicantFile details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ApplicantFile instance associated with the given id.")
    public boolean deleteApplicantFile(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ApplicantFile with id: {}" , id);
        ApplicantFile deleted = applicantFileService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ApplicantFile instance associated with the given id.")
    public ApplicantFile editApplicantFile(@PathVariable("id") Integer id, @RequestBody ApplicantFile instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ApplicantFile with id: {}" , instance.getIdApplicantFile());
        instance.setIdApplicantFile(id);
        instance = applicantFileService.update(instance);
        LOGGER.debug("ApplicantFile details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ApplicantFile instance.")
	public ApplicantFile createApplicantFile(@RequestBody ApplicantFile instance) {
		LOGGER.debug("Create ApplicantFile with information: {}" , instance);
		instance = applicantFileService.create(instance);
		LOGGER.debug("Created ApplicantFile with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setApplicantFileService(ApplicantFileService service) {
		this.applicantFileService = service;
	}
}

