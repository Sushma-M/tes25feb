/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.EmployeeSalaryService;
import com.test_25feb.dynamohr126tabs.service.ScheduleDynamicService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class ScheduleDynamic.
 * @see com.test_25feb.dynamohr126tabs.ScheduleDynamic
 */

@RestController(value = "Dynamohr126tabs.ScheduleDynamicController")
@Api(value = "/Dynamohr126tabs/ScheduleDynamic", description = "Exposes APIs to work with ScheduleDynamic resource.")
@RequestMapping("/Dynamohr126tabs/ScheduleDynamic")
public class ScheduleDynamicController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ScheduleDynamicController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.ScheduleDynamicService")
	private ScheduleDynamicService scheduleDynamicService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeSalaryService")
    private EmployeeSalaryService employeeSalaryService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ScheduleDynamic instances matching the search criteria.")
	public Page<ScheduleDynamic> findScheduleDynamics( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ScheduleDynamics list");
		return scheduleDynamicService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of ScheduleDynamic instances.")
	public Page<ScheduleDynamic> getScheduleDynamics(Pageable pageable) {
		LOGGER.debug("Rendering ScheduleDynamics list");
		return scheduleDynamicService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ScheduleDynamic instances.")
	public Long countAllScheduleDynamics() {
		LOGGER.debug("counting ScheduleDynamics");
		Long count = scheduleDynamicService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ScheduleDynamic instance associated with the given id.")
    public ScheduleDynamic getScheduleDynamic(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ScheduleDynamic with id: {}" , id);
        ScheduleDynamic instance = scheduleDynamicService.findById(id);
        LOGGER.debug("ScheduleDynamic details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ScheduleDynamic instance associated with the given id.")
    public boolean deleteScheduleDynamic(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ScheduleDynamic with id: {}" , id);
        ScheduleDynamic deleted = scheduleDynamicService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ScheduleDynamic instance associated with the given id.")
    public ScheduleDynamic editScheduleDynamic(@PathVariable("id") Integer id, @RequestBody ScheduleDynamic instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ScheduleDynamic with id: {}" , instance.getIdScheduleDynamic());
        instance.setIdScheduleDynamic(id);
        instance = scheduleDynamicService.update(instance);
        LOGGER.debug("ScheduleDynamic details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/employeeSalaries", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeSalaries instance associated with the given id.")
     public Page<EmployeeSalary> findAssociatedemployeeSalaries(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeeSalaries");
        return employeeSalaryService.findAssociatedValues(id,"scheduleDynamic","idScheduleDynamic", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ScheduleDynamic instance.")
	public ScheduleDynamic createScheduleDynamic(@RequestBody ScheduleDynamic instance) {
		LOGGER.debug("Create ScheduleDynamic with information: {}" , instance);
		instance = scheduleDynamicService.create(instance);
		LOGGER.debug("Created ScheduleDynamic with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setScheduleDynamicService(ScheduleDynamicService service) {
		this.scheduleDynamicService = service;
	}
}

