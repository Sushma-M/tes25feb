/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.ListRolePermissionService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class ListRolePermission.
 * @see com.test_25feb.dynamohr126tabs.ListRolePermission
 */

@RestController(value = "Dynamohr126tabs.ListRolePermissionController")
@Api(value = "/Dynamohr126tabs/ListRolePermission", description = "Exposes APIs to work with ListRolePermission resource.")
@RequestMapping("/Dynamohr126tabs/ListRolePermission")
public class ListRolePermissionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListRolePermissionController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.ListRolePermissionService")
	private ListRolePermissionService listRolePermissionService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ListRolePermission instances matching the search criteria.")
	public Page<ListRolePermission> findListRolePermissions( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ListRolePermissions list");
		return listRolePermissionService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of ListRolePermission instances.")
	public Page<ListRolePermission> getListRolePermissions(Pageable pageable) {
		LOGGER.debug("Rendering ListRolePermissions list");
		return listRolePermissionService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ListRolePermission instances.")
	public Long countAllListRolePermissions() {
		LOGGER.debug("counting ListRolePermissions");
		Long count = listRolePermissionService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ListRolePermission instance associated with the given id.")
    public ListRolePermission getListRolePermission(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ListRolePermission with id: {}" , id);
        ListRolePermission instance = listRolePermissionService.findById(id);
        LOGGER.debug("ListRolePermission details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ListRolePermission instance associated with the given id.")
    public boolean deleteListRolePermission(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListRolePermission with id: {}" , id);
        ListRolePermission deleted = listRolePermissionService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ListRolePermission instance associated with the given id.")
    public ListRolePermission editListRolePermission(@PathVariable("id") Integer id, @RequestBody ListRolePermission instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ListRolePermission with id: {}" , instance.getIdListRolePermission());
        instance.setIdListRolePermission(id);
        instance = listRolePermissionService.update(instance);
        LOGGER.debug("ListRolePermission details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ListRolePermission instance.")
	public ListRolePermission createListRolePermission(@RequestBody ListRolePermission instance) {
		LOGGER.debug("Create ListRolePermission with information: {}" , instance);
		instance = listRolePermissionService.create(instance);
		LOGGER.debug("Created ListRolePermission with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setListRolePermissionService(ListRolePermissionService service) {
		this.listRolePermissionService = service;
	}
}

