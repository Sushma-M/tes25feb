/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.AssetReintegrationDocumentService;
import com.test_25feb.dynamohr126tabs.service.ListAssetReintegratedService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class AssetReintegrationDocument.
 * @see com.test_25feb.dynamohr126tabs.AssetReintegrationDocument
 */

@RestController(value = "Dynamohr126tabs.AssetReintegrationDocumentController")
@Api(value = "/Dynamohr126tabs/AssetReintegrationDocument", description = "Exposes APIs to work with AssetReintegrationDocument resource.")
@RequestMapping("/Dynamohr126tabs/AssetReintegrationDocument")
public class AssetReintegrationDocumentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AssetReintegrationDocumentController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.AssetReintegrationDocumentService")
	private AssetReintegrationDocumentService assetReintegrationDocumentService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ListAssetReintegratedService")
    private ListAssetReintegratedService listAssetReintegratedService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of AssetReintegrationDocument instances matching the search criteria.")
	public Page<AssetReintegrationDocument> findAssetReintegrationDocuments( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering AssetReintegrationDocuments list");
		return assetReintegrationDocumentService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of AssetReintegrationDocument instances.")
	public Page<AssetReintegrationDocument> getAssetReintegrationDocuments(Pageable pageable) {
		LOGGER.debug("Rendering AssetReintegrationDocuments list");
		return assetReintegrationDocumentService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of AssetReintegrationDocument instances.")
	public Long countAllAssetReintegrationDocuments() {
		LOGGER.debug("counting AssetReintegrationDocuments");
		Long count = assetReintegrationDocumentService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the AssetReintegrationDocument instance associated with the given id.")
    public AssetReintegrationDocument getAssetReintegrationDocument(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting AssetReintegrationDocument with id: {}" , id);
        AssetReintegrationDocument instance = assetReintegrationDocumentService.findById(id);
        LOGGER.debug("AssetReintegrationDocument details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the AssetReintegrationDocument instance associated with the given id.")
    public boolean deleteAssetReintegrationDocument(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AssetReintegrationDocument with id: {}" , id);
        AssetReintegrationDocument deleted = assetReintegrationDocumentService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the AssetReintegrationDocument instance associated with the given id.")
    public AssetReintegrationDocument editAssetReintegrationDocument(@PathVariable("id") Integer id, @RequestBody AssetReintegrationDocument instance) throws EntityNotFoundException {
        LOGGER.debug("Editing AssetReintegrationDocument with id: {}" , instance.getIdAssetReintegrationDocument());
        instance.setIdAssetReintegrationDocument(id);
        instance = assetReintegrationDocumentService.update(instance);
        LOGGER.debug("AssetReintegrationDocument details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/listAssetReintegrateds", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listAssetReintegrateds instance associated with the given id.")
     public Page<ListAssetReintegrated> findAssociatedlistAssetReintegrateds(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated listAssetReintegrateds");
        return listAssetReintegratedService.findAssociatedValues(id,"assetReintegrationDocument","idAssetReintegrationDocument", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new AssetReintegrationDocument instance.")
	public AssetReintegrationDocument createAssetReintegrationDocument(@RequestBody AssetReintegrationDocument instance) {
		LOGGER.debug("Create AssetReintegrationDocument with information: {}" , instance);
		instance = assetReintegrationDocumentService.create(instance);
		LOGGER.debug("Created AssetReintegrationDocument with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setAssetReintegrationDocumentService(AssetReintegrationDocumentService service) {
		this.assetReintegrationDocumentService = service;
	}
}

