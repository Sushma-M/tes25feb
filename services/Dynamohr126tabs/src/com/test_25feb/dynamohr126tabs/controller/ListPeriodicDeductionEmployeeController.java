/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.ListPeriodicDeductionEmployeeService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class ListPeriodicDeductionEmployee.
 * @see com.test_25feb.dynamohr126tabs.ListPeriodicDeductionEmployee
 */

@RestController(value = "Dynamohr126tabs.ListPeriodicDeductionEmployeeController")
@Api(value = "/Dynamohr126tabs/ListPeriodicDeductionEmployee", description = "Exposes APIs to work with ListPeriodicDeductionEmployee resource.")
@RequestMapping("/Dynamohr126tabs/ListPeriodicDeductionEmployee")
public class ListPeriodicDeductionEmployeeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListPeriodicDeductionEmployeeController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.ListPeriodicDeductionEmployeeService")
	private ListPeriodicDeductionEmployeeService listPeriodicDeductionEmployeeService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ListPeriodicDeductionEmployee instances matching the search criteria.")
	public Page<ListPeriodicDeductionEmployee> findListPeriodicDeductionEmployees( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ListPeriodicDeductionEmployees list");
		return listPeriodicDeductionEmployeeService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of ListPeriodicDeductionEmployee instances.")
	public Page<ListPeriodicDeductionEmployee> getListPeriodicDeductionEmployees(Pageable pageable) {
		LOGGER.debug("Rendering ListPeriodicDeductionEmployees list");
		return listPeriodicDeductionEmployeeService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ListPeriodicDeductionEmployee instances.")
	public Long countAllListPeriodicDeductionEmployees() {
		LOGGER.debug("counting ListPeriodicDeductionEmployees");
		Long count = listPeriodicDeductionEmployeeService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ListPeriodicDeductionEmployee instance associated with the given id.")
    public ListPeriodicDeductionEmployee getListPeriodicDeductionEmployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ListPeriodicDeductionEmployee with id: {}" , id);
        ListPeriodicDeductionEmployee instance = listPeriodicDeductionEmployeeService.findById(id);
        LOGGER.debug("ListPeriodicDeductionEmployee details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ListPeriodicDeductionEmployee instance associated with the given id.")
    public boolean deleteListPeriodicDeductionEmployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListPeriodicDeductionEmployee with id: {}" , id);
        ListPeriodicDeductionEmployee deleted = listPeriodicDeductionEmployeeService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ListPeriodicDeductionEmployee instance associated with the given id.")
    public ListPeriodicDeductionEmployee editListPeriodicDeductionEmployee(@PathVariable("id") Integer id, @RequestBody ListPeriodicDeductionEmployee instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ListPeriodicDeductionEmployee with id: {}" , instance.getIdListPeriodicDeductionEmployee());
        instance.setIdListPeriodicDeductionEmployee(id);
        instance = listPeriodicDeductionEmployeeService.update(instance);
        LOGGER.debug("ListPeriodicDeductionEmployee details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ListPeriodicDeductionEmployee instance.")
	public ListPeriodicDeductionEmployee createListPeriodicDeductionEmployee(@RequestBody ListPeriodicDeductionEmployee instance) {
		LOGGER.debug("Create ListPeriodicDeductionEmployee with information: {}" , instance);
		instance = listPeriodicDeductionEmployeeService.create(instance);
		LOGGER.debug("Created ListPeriodicDeductionEmployee with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setListPeriodicDeductionEmployeeService(ListPeriodicDeductionEmployeeService service) {
		this.listPeriodicDeductionEmployeeService = service;
	}
}

