/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.AssetFileService;
import com.test_25feb.dynamohr126tabs.service.AssetPhotoFileService;
import com.test_25feb.dynamohr126tabs.service.AssetService;
import com.test_25feb.dynamohr126tabs.service.ListAssetDiscardedService;
import com.test_25feb.dynamohr126tabs.service.ListAssetLoadedService;
import com.test_25feb.dynamohr126tabs.service.ListAssetReintegratedService;
import com.test_25feb.dynamohr126tabs.service.ListAssetUnloadedService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class Asset.
 * @see com.test_25feb.dynamohr126tabs.Asset
 */

@RestController(value = "Dynamohr126tabs.AssetController")
@Api(value = "/Dynamohr126tabs/Asset", description = "Exposes APIs to work with Asset resource.")
@RequestMapping("/Dynamohr126tabs/Asset")
public class AssetController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AssetController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.AssetService")
	private AssetService assetService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ListAssetLoadedService")
    private ListAssetLoadedService listAssetLoadedService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ListAssetDiscardedService")
    private ListAssetDiscardedService listAssetDiscardedService;


    @Autowired
    @Qualifier("Dynamohr126tabs.AssetPhotoFileService")
    private AssetPhotoFileService assetPhotoFileService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ListAssetUnloadedService")
    private ListAssetUnloadedService listAssetUnloadedService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ListAssetReintegratedService")
    private ListAssetReintegratedService listAssetReintegratedService;


    @Autowired
    @Qualifier("Dynamohr126tabs.AssetFileService")
    private AssetFileService assetFileService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Asset instances matching the search criteria.")
	public Page<Asset> findAssets( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Assets list");
		return assetService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of Asset instances.")
	public Page<Asset> getAssets(Pageable pageable) {
		LOGGER.debug("Rendering Assets list");
		return assetService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Asset instances.")
	public Long countAllAssets() {
		LOGGER.debug("counting Assets");
		Long count = assetService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Asset instance associated with the given id.")
    public Asset getAsset(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Asset with id: {}" , id);
        Asset instance = assetService.findById(id);
        LOGGER.debug("Asset details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Asset instance associated with the given id.")
    public boolean deleteAsset(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Asset with id: {}" , id);
        Asset deleted = assetService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Asset instance associated with the given id.")
    public Asset editAsset(@PathVariable("id") Integer id, @RequestBody Asset instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Asset with id: {}" , instance.getIdAsset());
        instance.setIdAsset(id);
        instance = assetService.update(instance);
        LOGGER.debug("Asset details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/listAssetLoadeds", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listAssetLoadeds instance associated with the given id.")
     public Page<ListAssetLoaded> findAssociatedlistAssetLoadeds(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated listAssetLoadeds");
        return listAssetLoadedService.findAssociatedValues(id,"asset","idAsset", pageable);
   }

    @RequestMapping(value="/{id:.+}/assetPhotoFiles", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the assetPhotoFiles instance associated with the given id.")
     public Page<AssetPhotoFile> findAssociatedassetPhotoFiles(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated assetPhotoFiles");
        return assetPhotoFileService.findAssociatedValues(id,"asset","idAsset", pageable);
   }

    @RequestMapping(value="/{id:.+}/listAssetUnloadeds", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listAssetUnloadeds instance associated with the given id.")
     public Page<ListAssetUnloaded> findAssociatedlistAssetUnloadeds(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated listAssetUnloadeds");
        return listAssetUnloadedService.findAssociatedValues(id,"asset","idAsset", pageable);
   }

    @RequestMapping(value="/{id:.+}/listAssetDiscardeds", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listAssetDiscardeds instance associated with the given id.")
     public Page<ListAssetDiscarded> findAssociatedlistAssetDiscardeds(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated listAssetDiscardeds");
        return listAssetDiscardedService.findAssociatedValues(id,"asset","idAsset", pageable);
   }

    @RequestMapping(value="/{id:.+}/listAssetReintegrateds", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listAssetReintegrateds instance associated with the given id.")
     public Page<ListAssetReintegrated> findAssociatedlistAssetReintegrateds(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated listAssetReintegrateds");
        return listAssetReintegratedService.findAssociatedValues(id,"asset","idAsset", pageable);
   }

    @RequestMapping(value="/{id:.+}/assetFiles", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the assetFiles instance associated with the given id.")
     public Page<AssetFile> findAssociatedassetFiles(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated assetFiles");
        return assetFileService.findAssociatedValues(id,"asset","idAsset", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Asset instance.")
	public Asset createAsset(@RequestBody Asset instance) {
		LOGGER.debug("Create Asset with information: {}" , instance);
		instance = assetService.create(instance);
		LOGGER.debug("Created Asset with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setAssetService(AssetService service) {
		this.assetService = service;
	}
}

