/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.TimeSheetService;
import com.test_25feb.dynamohr126tabs.service.TypeOperationTimesheetService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class TypeOperationTimesheet.
 * @see com.test_25feb.dynamohr126tabs.TypeOperationTimesheet
 */

@RestController(value = "Dynamohr126tabs.TypeOperationTimesheetController")
@Api(value = "/Dynamohr126tabs/TypeOperationTimesheet", description = "Exposes APIs to work with TypeOperationTimesheet resource.")
@RequestMapping("/Dynamohr126tabs/TypeOperationTimesheet")
public class TypeOperationTimesheetController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeOperationTimesheetController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.TypeOperationTimesheetService")
	private TypeOperationTimesheetService typeOperationTimesheetService;


    @Autowired
    @Qualifier("Dynamohr126tabs.TimeSheetService")
    private TimeSheetService timeSheetService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TypeOperationTimesheet instances matching the search criteria.")
	public Page<TypeOperationTimesheet> findTypeOperationTimesheets( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TypeOperationTimesheets list");
		return typeOperationTimesheetService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of TypeOperationTimesheet instances.")
	public Page<TypeOperationTimesheet> getTypeOperationTimesheets(Pageable pageable) {
		LOGGER.debug("Rendering TypeOperationTimesheets list");
		return typeOperationTimesheetService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TypeOperationTimesheet instances.")
	public Long countAllTypeOperationTimesheets() {
		LOGGER.debug("counting TypeOperationTimesheets");
		Long count = typeOperationTimesheetService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TypeOperationTimesheet instance associated with the given id.")
    public TypeOperationTimesheet getTypeOperationTimesheet(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeOperationTimesheet with id: {}" , id);
        TypeOperationTimesheet instance = typeOperationTimesheetService.findById(id);
        LOGGER.debug("TypeOperationTimesheet details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TypeOperationTimesheet instance associated with the given id.")
    public boolean deleteTypeOperationTimesheet(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeOperationTimesheet with id: {}" , id);
        TypeOperationTimesheet deleted = typeOperationTimesheetService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TypeOperationTimesheet instance associated with the given id.")
    public TypeOperationTimesheet editTypeOperationTimesheet(@PathVariable("id") Integer id, @RequestBody TypeOperationTimesheet instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeOperationTimesheet with id: {}" , instance.getIdTypeOperationTimesheet());
        instance.setIdTypeOperationTimesheet(id);
        instance = typeOperationTimesheetService.update(instance);
        LOGGER.debug("TypeOperationTimesheet details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/timeSheets", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the timeSheets instance associated with the given id.")
     public Page<TimeSheet> findAssociatedtimeSheets(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated timeSheets");
        return timeSheetService.findAssociatedValues(id,"typeOperationTimesheet","idTypeOperationTimesheet", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TypeOperationTimesheet instance.")
	public TypeOperationTimesheet createTypeOperationTimesheet(@RequestBody TypeOperationTimesheet instance) {
		LOGGER.debug("Create TypeOperationTimesheet with information: {}" , instance);
		instance = typeOperationTimesheetService.create(instance);
		LOGGER.debug("Created TypeOperationTimesheet with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTypeOperationTimesheetService(TypeOperationTimesheetService service) {
		this.typeOperationTimesheetService = service;
	}
}

