/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.DeductionEventualService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class DeductionEventual.
 * @see com.test_25feb.dynamohr126tabs.DeductionEventual
 */

@RestController(value = "Dynamohr126tabs.DeductionEventualController")
@Api(value = "/Dynamohr126tabs/DeductionEventual", description = "Exposes APIs to work with DeductionEventual resource.")
@RequestMapping("/Dynamohr126tabs/DeductionEventual")
public class DeductionEventualController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DeductionEventualController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.DeductionEventualService")
	private DeductionEventualService deductionEventualService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of DeductionEventual instances matching the search criteria.")
	public Page<DeductionEventual> findDeductionEventuals( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering DeductionEventuals list");
		return deductionEventualService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of DeductionEventual instances.")
	public Page<DeductionEventual> getDeductionEventuals(Pageable pageable) {
		LOGGER.debug("Rendering DeductionEventuals list");
		return deductionEventualService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of DeductionEventual instances.")
	public Long countAllDeductionEventuals() {
		LOGGER.debug("counting DeductionEventuals");
		Long count = deductionEventualService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the DeductionEventual instance associated with the given id.")
    public DeductionEventual getDeductionEventual(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting DeductionEventual with id: {}" , id);
        DeductionEventual instance = deductionEventualService.findById(id);
        LOGGER.debug("DeductionEventual details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the DeductionEventual instance associated with the given id.")
    public boolean deleteDeductionEventual(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DeductionEventual with id: {}" , id);
        DeductionEventual deleted = deductionEventualService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the DeductionEventual instance associated with the given id.")
    public DeductionEventual editDeductionEventual(@PathVariable("id") Integer id, @RequestBody DeductionEventual instance) throws EntityNotFoundException {
        LOGGER.debug("Editing DeductionEventual with id: {}" , instance.getIdDeductionEventual());
        instance.setIdDeductionEventual(id);
        instance = deductionEventualService.update(instance);
        LOGGER.debug("DeductionEventual details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new DeductionEventual instance.")
	public DeductionEventual createDeductionEventual(@RequestBody DeductionEventual instance) {
		LOGGER.debug("Create DeductionEventual with information: {}" , instance);
		instance = deductionEventualService.create(instance);
		LOGGER.debug("Created DeductionEventual with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setDeductionEventualService(DeductionEventualService service) {
		this.deductionEventualService = service;
	}
}

