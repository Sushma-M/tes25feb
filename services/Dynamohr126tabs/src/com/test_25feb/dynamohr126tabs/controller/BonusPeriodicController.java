/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.BonusPeriodicService;
import com.test_25feb.dynamohr126tabs.service.ListPeriodicBonusEmployeeService;
import com.test_25feb.dynamohr126tabs.service.ListPeriodicBonusPayrollService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class BonusPeriodic.
 * @see com.test_25feb.dynamohr126tabs.BonusPeriodic
 */

@RestController(value = "Dynamohr126tabs.BonusPeriodicController")
@Api(value = "/Dynamohr126tabs/BonusPeriodic", description = "Exposes APIs to work with BonusPeriodic resource.")
@RequestMapping("/Dynamohr126tabs/BonusPeriodic")
public class BonusPeriodicController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BonusPeriodicController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.BonusPeriodicService")
	private BonusPeriodicService bonusPeriodicService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ListPeriodicBonusPayrollService")
    private ListPeriodicBonusPayrollService listPeriodicBonusPayrollService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ListPeriodicBonusEmployeeService")
    private ListPeriodicBonusEmployeeService listPeriodicBonusEmployeeService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of BonusPeriodic instances matching the search criteria.")
	public Page<BonusPeriodic> findBonusPeriodics( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering BonusPeriodics list");
		return bonusPeriodicService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of BonusPeriodic instances.")
	public Page<BonusPeriodic> getBonusPeriodics(Pageable pageable) {
		LOGGER.debug("Rendering BonusPeriodics list");
		return bonusPeriodicService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of BonusPeriodic instances.")
	public Long countAllBonusPeriodics() {
		LOGGER.debug("counting BonusPeriodics");
		Long count = bonusPeriodicService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the BonusPeriodic instance associated with the given id.")
    public BonusPeriodic getBonusPeriodic(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting BonusPeriodic with id: {}" , id);
        BonusPeriodic instance = bonusPeriodicService.findById(id);
        LOGGER.debug("BonusPeriodic details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the BonusPeriodic instance associated with the given id.")
    public boolean deleteBonusPeriodic(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting BonusPeriodic with id: {}" , id);
        BonusPeriodic deleted = bonusPeriodicService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the BonusPeriodic instance associated with the given id.")
    public BonusPeriodic editBonusPeriodic(@PathVariable("id") Integer id, @RequestBody BonusPeriodic instance) throws EntityNotFoundException {
        LOGGER.debug("Editing BonusPeriodic with id: {}" , instance.getIdBonusPeriodic());
        instance.setIdBonusPeriodic(id);
        instance = bonusPeriodicService.update(instance);
        LOGGER.debug("BonusPeriodic details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/listPeriodicBonusPayrolls", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listPeriodicBonusPayrolls instance associated with the given id.")
     public Page<ListPeriodicBonusPayroll> findAssociatedlistPeriodicBonusPayrolls(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated listPeriodicBonusPayrolls");
        return listPeriodicBonusPayrollService.findAssociatedValues(id,"bonusPeriodic","idBonusPeriodic", pageable);
   }

    @RequestMapping(value="/{id:.+}/listPeriodicBonusEmployees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listPeriodicBonusEmployees instance associated with the given id.")
     public Page<ListPeriodicBonusEmployee> findAssociatedlistPeriodicBonusEmployees(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated listPeriodicBonusEmployees");
        return listPeriodicBonusEmployeeService.findAssociatedValues(id,"bonusPeriodic","idBonusPeriodic", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new BonusPeriodic instance.")
	public BonusPeriodic createBonusPeriodic(@RequestBody BonusPeriodic instance) {
		LOGGER.debug("Create BonusPeriodic with information: {}" , instance);
		instance = bonusPeriodicService.create(instance);
		LOGGER.debug("Created BonusPeriodic with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setBonusPeriodicService(BonusPeriodicService service) {
		this.bonusPeriodicService = service;
	}
}

