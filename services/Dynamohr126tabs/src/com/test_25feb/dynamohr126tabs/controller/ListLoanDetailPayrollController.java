/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.ListLoanDetailPayrollService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class ListLoanDetailPayroll.
 * @see com.test_25feb.dynamohr126tabs.ListLoanDetailPayroll
 */

@RestController(value = "Dynamohr126tabs.ListLoanDetailPayrollController")
@Api(value = "/Dynamohr126tabs/ListLoanDetailPayroll", description = "Exposes APIs to work with ListLoanDetailPayroll resource.")
@RequestMapping("/Dynamohr126tabs/ListLoanDetailPayroll")
public class ListLoanDetailPayrollController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListLoanDetailPayrollController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.ListLoanDetailPayrollService")
	private ListLoanDetailPayrollService listLoanDetailPayrollService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ListLoanDetailPayroll instances matching the search criteria.")
	public Page<ListLoanDetailPayroll> findListLoanDetailPayrolls( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ListLoanDetailPayrolls list");
		return listLoanDetailPayrollService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of ListLoanDetailPayroll instances.")
	public Page<ListLoanDetailPayroll> getListLoanDetailPayrolls(Pageable pageable) {
		LOGGER.debug("Rendering ListLoanDetailPayrolls list");
		return listLoanDetailPayrollService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ListLoanDetailPayroll instances.")
	public Long countAllListLoanDetailPayrolls() {
		LOGGER.debug("counting ListLoanDetailPayrolls");
		Long count = listLoanDetailPayrollService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ListLoanDetailPayroll instance associated with the given id.")
    public ListLoanDetailPayroll getListLoanDetailPayroll(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ListLoanDetailPayroll with id: {}" , id);
        ListLoanDetailPayroll instance = listLoanDetailPayrollService.findById(id);
        LOGGER.debug("ListLoanDetailPayroll details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ListLoanDetailPayroll instance associated with the given id.")
    public boolean deleteListLoanDetailPayroll(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListLoanDetailPayroll with id: {}" , id);
        ListLoanDetailPayroll deleted = listLoanDetailPayrollService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ListLoanDetailPayroll instance associated with the given id.")
    public ListLoanDetailPayroll editListLoanDetailPayroll(@PathVariable("id") Integer id, @RequestBody ListLoanDetailPayroll instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ListLoanDetailPayroll with id: {}" , instance.getIdListLoanDetailPayroll());
        instance.setIdListLoanDetailPayroll(id);
        instance = listLoanDetailPayrollService.update(instance);
        LOGGER.debug("ListLoanDetailPayroll details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ListLoanDetailPayroll instance.")
	public ListLoanDetailPayroll createListLoanDetailPayroll(@RequestBody ListLoanDetailPayroll instance) {
		LOGGER.debug("Create ListLoanDetailPayroll with information: {}" , instance);
		instance = listLoanDetailPayrollService.create(instance);
		LOGGER.debug("Created ListLoanDetailPayroll with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setListLoanDetailPayrollService(ListLoanDetailPayrollService service) {
		this.listLoanDetailPayrollService = service;
	}
}

