/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.ListCommissionEmployeeService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class ListCommissionEmployee.
 * @see com.test_25feb.dynamohr126tabs.ListCommissionEmployee
 */

@RestController(value = "Dynamohr126tabs.ListCommissionEmployeeController")
@Api(value = "/Dynamohr126tabs/ListCommissionEmployee", description = "Exposes APIs to work with ListCommissionEmployee resource.")
@RequestMapping("/Dynamohr126tabs/ListCommissionEmployee")
public class ListCommissionEmployeeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListCommissionEmployeeController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.ListCommissionEmployeeService")
	private ListCommissionEmployeeService listCommissionEmployeeService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ListCommissionEmployee instances matching the search criteria.")
	public Page<ListCommissionEmployee> findListCommissionEmployees( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ListCommissionEmployees list");
		return listCommissionEmployeeService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of ListCommissionEmployee instances.")
	public Page<ListCommissionEmployee> getListCommissionEmployees(Pageable pageable) {
		LOGGER.debug("Rendering ListCommissionEmployees list");
		return listCommissionEmployeeService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ListCommissionEmployee instances.")
	public Long countAllListCommissionEmployees() {
		LOGGER.debug("counting ListCommissionEmployees");
		Long count = listCommissionEmployeeService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ListCommissionEmployee instance associated with the given id.")
    public ListCommissionEmployee getListCommissionEmployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ListCommissionEmployee with id: {}" , id);
        ListCommissionEmployee instance = listCommissionEmployeeService.findById(id);
        LOGGER.debug("ListCommissionEmployee details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ListCommissionEmployee instance associated with the given id.")
    public boolean deleteListCommissionEmployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListCommissionEmployee with id: {}" , id);
        ListCommissionEmployee deleted = listCommissionEmployeeService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ListCommissionEmployee instance associated with the given id.")
    public ListCommissionEmployee editListCommissionEmployee(@PathVariable("id") Integer id, @RequestBody ListCommissionEmployee instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ListCommissionEmployee with id: {}" , instance.getIdListCommissionEmployee());
        instance.setIdListCommissionEmployee(id);
        instance = listCommissionEmployeeService.update(instance);
        LOGGER.debug("ListCommissionEmployee details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ListCommissionEmployee instance.")
	public ListCommissionEmployee createListCommissionEmployee(@RequestBody ListCommissionEmployee instance) {
		LOGGER.debug("Create ListCommissionEmployee with information: {}" , instance);
		instance = listCommissionEmployeeService.create(instance);
		LOGGER.debug("Created ListCommissionEmployee with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setListCommissionEmployeeService(ListCommissionEmployeeService service) {
		this.listCommissionEmployeeService = service;
	}
}

