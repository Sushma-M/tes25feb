/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.ListAssetUnloadedService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class ListAssetUnloaded.
 * @see com.test_25feb.dynamohr126tabs.ListAssetUnloaded
 */

@RestController(value = "Dynamohr126tabs.ListAssetUnloadedController")
@Api(value = "/Dynamohr126tabs/ListAssetUnloaded", description = "Exposes APIs to work with ListAssetUnloaded resource.")
@RequestMapping("/Dynamohr126tabs/ListAssetUnloaded")
public class ListAssetUnloadedController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListAssetUnloadedController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.ListAssetUnloadedService")
	private ListAssetUnloadedService listAssetUnloadedService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ListAssetUnloaded instances matching the search criteria.")
	public Page<ListAssetUnloaded> findListAssetUnloadeds( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ListAssetUnloadeds list");
		return listAssetUnloadedService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of ListAssetUnloaded instances.")
	public Page<ListAssetUnloaded> getListAssetUnloadeds(Pageable pageable) {
		LOGGER.debug("Rendering ListAssetUnloadeds list");
		return listAssetUnloadedService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ListAssetUnloaded instances.")
	public Long countAllListAssetUnloadeds() {
		LOGGER.debug("counting ListAssetUnloadeds");
		Long count = listAssetUnloadedService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ListAssetUnloaded instance associated with the given id.")
    public ListAssetUnloaded getListAssetUnloaded(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ListAssetUnloaded with id: {}" , id);
        ListAssetUnloaded instance = listAssetUnloadedService.findById(id);
        LOGGER.debug("ListAssetUnloaded details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ListAssetUnloaded instance associated with the given id.")
    public boolean deleteListAssetUnloaded(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListAssetUnloaded with id: {}" , id);
        ListAssetUnloaded deleted = listAssetUnloadedService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ListAssetUnloaded instance associated with the given id.")
    public ListAssetUnloaded editListAssetUnloaded(@PathVariable("id") Integer id, @RequestBody ListAssetUnloaded instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ListAssetUnloaded with id: {}" , instance.getIdListAssetUnloaded());
        instance.setIdListAssetUnloaded(id);
        instance = listAssetUnloadedService.update(instance);
        LOGGER.debug("ListAssetUnloaded details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ListAssetUnloaded instance.")
	public ListAssetUnloaded createListAssetUnloaded(@RequestBody ListAssetUnloaded instance) {
		LOGGER.debug("Create ListAssetUnloaded with information: {}" , instance);
		instance = listAssetUnloadedService.create(instance);
		LOGGER.debug("Created ListAssetUnloaded with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setListAssetUnloadedService(ListAssetUnloadedService service) {
		this.listAssetUnloadedService = service;
	}
}

