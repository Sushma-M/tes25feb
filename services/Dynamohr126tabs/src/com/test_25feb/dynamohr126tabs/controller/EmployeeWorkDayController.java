/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.EmployeeWorkDayService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class EmployeeWorkDay.
 * @see com.test_25feb.dynamohr126tabs.EmployeeWorkDay
 */

@RestController(value = "Dynamohr126tabs.EmployeeWorkDayController")
@Api(value = "/Dynamohr126tabs/EmployeeWorkDay", description = "Exposes APIs to work with EmployeeWorkDay resource.")
@RequestMapping("/Dynamohr126tabs/EmployeeWorkDay")
public class EmployeeWorkDayController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeWorkDayController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.EmployeeWorkDayService")
	private EmployeeWorkDayService employeeWorkDayService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of EmployeeWorkDay instances matching the search criteria.")
	public Page<EmployeeWorkDay> findEmployeeWorkDays( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering EmployeeWorkDays list");
		return employeeWorkDayService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of EmployeeWorkDay instances.")
	public Page<EmployeeWorkDay> getEmployeeWorkDays(Pageable pageable) {
		LOGGER.debug("Rendering EmployeeWorkDays list");
		return employeeWorkDayService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of EmployeeWorkDay instances.")
	public Long countAllEmployeeWorkDays() {
		LOGGER.debug("counting EmployeeWorkDays");
		Long count = employeeWorkDayService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the EmployeeWorkDay instance associated with the given id.")
    public EmployeeWorkDay getEmployeeWorkDay(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting EmployeeWorkDay with id: {}" , id);
        EmployeeWorkDay instance = employeeWorkDayService.findById(id);
        LOGGER.debug("EmployeeWorkDay details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the EmployeeWorkDay instance associated with the given id.")
    public boolean deleteEmployeeWorkDay(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeWorkDay with id: {}" , id);
        EmployeeWorkDay deleted = employeeWorkDayService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the EmployeeWorkDay instance associated with the given id.")
    public EmployeeWorkDay editEmployeeWorkDay(@PathVariable("id") Integer id, @RequestBody EmployeeWorkDay instance) throws EntityNotFoundException {
        LOGGER.debug("Editing EmployeeWorkDay with id: {}" , instance.getIdEmployeeWorkDay());
        instance.setIdEmployeeWorkDay(id);
        instance = employeeWorkDayService.update(instance);
        LOGGER.debug("EmployeeWorkDay details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new EmployeeWorkDay instance.")
	public EmployeeWorkDay createEmployeeWorkDay(@RequestBody EmployeeWorkDay instance) {
		LOGGER.debug("Create EmployeeWorkDay with information: {}" , instance);
		instance = employeeWorkDayService.create(instance);
		LOGGER.debug("Created EmployeeWorkDay with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setEmployeeWorkDayService(EmployeeWorkDayService service) {
		this.employeeWorkDayService = service;
	}
}

