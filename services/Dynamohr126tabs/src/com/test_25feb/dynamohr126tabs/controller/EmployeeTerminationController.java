/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.EmployeeTerminationService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class EmployeeTermination.
 * @see com.test_25feb.dynamohr126tabs.EmployeeTermination
 */

@RestController(value = "Dynamohr126tabs.EmployeeTerminationController")
@Api(value = "/Dynamohr126tabs/EmployeeTermination", description = "Exposes APIs to work with EmployeeTermination resource.")
@RequestMapping("/Dynamohr126tabs/EmployeeTermination")
public class EmployeeTerminationController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeTerminationController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.EmployeeTerminationService")
	private EmployeeTerminationService employeeTerminationService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of EmployeeTermination instances matching the search criteria.")
	public Page<EmployeeTermination> findEmployeeTerminations( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering EmployeeTerminations list");
		return employeeTerminationService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of EmployeeTermination instances.")
	public Page<EmployeeTermination> getEmployeeTerminations(Pageable pageable) {
		LOGGER.debug("Rendering EmployeeTerminations list");
		return employeeTerminationService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of EmployeeTermination instances.")
	public Long countAllEmployeeTerminations() {
		LOGGER.debug("counting EmployeeTerminations");
		Long count = employeeTerminationService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the EmployeeTermination instance associated with the given id.")
    public EmployeeTermination getEmployeeTermination(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting EmployeeTermination with id: {}" , id);
        EmployeeTermination instance = employeeTerminationService.findById(id);
        LOGGER.debug("EmployeeTermination details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the EmployeeTermination instance associated with the given id.")
    public boolean deleteEmployeeTermination(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeTermination with id: {}" , id);
        EmployeeTermination deleted = employeeTerminationService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the EmployeeTermination instance associated with the given id.")
    public EmployeeTermination editEmployeeTermination(@PathVariable("id") Integer id, @RequestBody EmployeeTermination instance) throws EntityNotFoundException {
        LOGGER.debug("Editing EmployeeTermination with id: {}" , instance.getIdEmployeeTermination());
        instance.setIdEmployeeTermination(id);
        instance = employeeTerminationService.update(instance);
        LOGGER.debug("EmployeeTermination details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new EmployeeTermination instance.")
	public EmployeeTermination createEmployeeTermination(@RequestBody EmployeeTermination instance) {
		LOGGER.debug("Create EmployeeTermination with information: {}" , instance);
		instance = employeeTerminationService.create(instance);
		LOGGER.debug("Created EmployeeTermination with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setEmployeeTerminationService(EmployeeTerminationService service) {
		this.employeeTerminationService = service;
	}
}

