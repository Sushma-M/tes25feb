/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.CompanyInfoService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class CompanyInfo.
 * @see com.test_25feb.dynamohr126tabs.CompanyInfo
 */

@RestController(value = "Dynamohr126tabs.CompanyInfoController")
@Api(value = "/Dynamohr126tabs/CompanyInfo", description = "Exposes APIs to work with CompanyInfo resource.")
@RequestMapping("/Dynamohr126tabs/CompanyInfo")
public class CompanyInfoController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompanyInfoController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.CompanyInfoService")
	private CompanyInfoService companyInfoService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of CompanyInfo instances matching the search criteria.")
	public Page<CompanyInfo> findCompanyInfos( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering CompanyInfos list");
		return companyInfoService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of CompanyInfo instances.")
	public Page<CompanyInfo> getCompanyInfos(Pageable pageable) {
		LOGGER.debug("Rendering CompanyInfos list");
		return companyInfoService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of CompanyInfo instances.")
	public Long countAllCompanyInfos() {
		LOGGER.debug("counting CompanyInfos");
		Long count = companyInfoService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the CompanyInfo instance associated with the given id.")
    public CompanyInfo getCompanyInfo(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting CompanyInfo with id: {}" , id);
        CompanyInfo instance = companyInfoService.findById(id);
        LOGGER.debug("CompanyInfo details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the CompanyInfo instance associated with the given id.")
    public boolean deleteCompanyInfo(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CompanyInfo with id: {}" , id);
        CompanyInfo deleted = companyInfoService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the CompanyInfo instance associated with the given id.")
    public CompanyInfo editCompanyInfo(@PathVariable("id") Integer id, @RequestBody CompanyInfo instance) throws EntityNotFoundException {
        LOGGER.debug("Editing CompanyInfo with id: {}" , instance.getIdCompanyInfo());
        instance.setIdCompanyInfo(id);
        instance = companyInfoService.update(instance);
        LOGGER.debug("CompanyInfo details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new CompanyInfo instance.")
	public CompanyInfo createCompanyInfo(@RequestBody CompanyInfo instance) {
		LOGGER.debug("Create CompanyInfo with information: {}" , instance);
		instance = companyInfoService.create(instance);
		LOGGER.debug("Created CompanyInfo with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setCompanyInfoService(CompanyInfoService service) {
		this.companyInfoService = service;
	}
}

