/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.AssetAssignDocumentService;
import com.test_25feb.dynamohr126tabs.service.AssetDischargeDocumentService;
import com.test_25feb.dynamohr126tabs.service.AssetService;
import com.test_25feb.dynamohr126tabs.service.BadgeEmployeeService;
import com.test_25feb.dynamohr126tabs.service.CompensatoryDayCreditService;
import com.test_25feb.dynamohr126tabs.service.CompensatoryDayDebitService;
import com.test_25feb.dynamohr126tabs.service.EmployeeAssessmentService;
import com.test_25feb.dynamohr126tabs.service.EmployeeContractService;
import com.test_25feb.dynamohr126tabs.service.EmployeeEducationService;
import com.test_25feb.dynamohr126tabs.service.EmployeeFileLocationService;
import com.test_25feb.dynamohr126tabs.service.EmployeeFileService;
import com.test_25feb.dynamohr126tabs.service.EmployeeGeneralDetailService;
import com.test_25feb.dynamohr126tabs.service.EmployeeLaborHistoryService;
import com.test_25feb.dynamohr126tabs.service.EmployeePersonalReferenceService;
import com.test_25feb.dynamohr126tabs.service.EmployeePhotoFileService;
import com.test_25feb.dynamohr126tabs.service.EmployeeSalaryService;
import com.test_25feb.dynamohr126tabs.service.EmployeeService;
import com.test_25feb.dynamohr126tabs.service.EmployeeTerminationService;
import com.test_25feb.dynamohr126tabs.service.EmployeeTrainingService;
import com.test_25feb.dynamohr126tabs.service.EmployeeWorkDayService;
import com.test_25feb.dynamohr126tabs.service.EmployeeWorkProofService;
import com.test_25feb.dynamohr126tabs.service.IncidenceEmployeeService;
import com.test_25feb.dynamohr126tabs.service.IsrDetailService;
import com.test_25feb.dynamohr126tabs.service.JustifiedAbsenseService;
import com.test_25feb.dynamohr126tabs.service.ListCommissionEmployeeService;
import com.test_25feb.dynamohr126tabs.service.ListEmployeePhoneService;
import com.test_25feb.dynamohr126tabs.service.ListEmployeePositionService;
import com.test_25feb.dynamohr126tabs.service.ListPeriodicBonusEmployeeService;
import com.test_25feb.dynamohr126tabs.service.ListPeriodicDeductionEmployeeService;
import com.test_25feb.dynamohr126tabs.service.LoanService;
import com.test_25feb.dynamohr126tabs.service.OverTimeEmployeeService;
import com.test_25feb.dynamohr126tabs.service.PayrollDetailService;
import com.test_25feb.dynamohr126tabs.service.ScheduleDynamicService;
import com.test_25feb.dynamohr126tabs.service.TimeSheetService;
import com.test_25feb.dynamohr126tabs.service.TravelEmployeeService;
import com.test_25feb.dynamohr126tabs.service.VacationDayCreditService;
import com.test_25feb.dynamohr126tabs.service.VacationDayDebitService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class Employee.
 * @see com.test_25feb.dynamohr126tabs.Employee
 */

@RestController(value = "Dynamohr126tabs.EmployeeController")
@Api(value = "/Dynamohr126tabs/Employee", description = "Exposes APIs to work with Employee resource.")
@RequestMapping("/Dynamohr126tabs/Employee")
public class EmployeeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.EmployeeService")
	private EmployeeService employeeService;


    @Autowired
    @Qualifier("Dynamohr126tabs.PayrollDetailService")
    private PayrollDetailService payrollDetailService;


    @Autowired
    @Qualifier("Dynamohr126tabs.CompensatoryDayDebitService")
    private CompensatoryDayDebitService compensatoryDayDebitService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeAssessmentService")
    private EmployeeAssessmentService employeeAssessmentService;


    @Autowired
    @Qualifier("Dynamohr126tabs.TimeSheetService")
    private TimeSheetService timeSheetService;


    @Autowired
    @Qualifier("Dynamohr126tabs.VacationDayDebitService")
    private VacationDayDebitService vacationDayDebitService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeContractService")
    private EmployeeContractService employeeContractService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeFileService")
    private EmployeeFileService employeeFileService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ListCommissionEmployeeService")
    private ListCommissionEmployeeService listCommissionEmployeeService;


    @Autowired
    @Qualifier("Dynamohr126tabs.OverTimeEmployeeService")
    private OverTimeEmployeeService overTimeEmployeeService;


    @Autowired
    @Qualifier("Dynamohr126tabs.IncidenceEmployeeService")
    private IncidenceEmployeeService incidenceEmployeeService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ListEmployeePhoneService")
    private ListEmployeePhoneService listEmployeePhoneService;


    @Autowired
    @Qualifier("Dynamohr126tabs.LoanService")
    private LoanService loanService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeTerminationService")
    private EmployeeTerminationService employeeTerminationService;


    @Autowired
    @Qualifier("Dynamohr126tabs.VacationDayCreditService")
    private VacationDayCreditService vacationDayCreditService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeePhotoFileService")
    private EmployeePhotoFileService employeePhotoFileService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ListPeriodicDeductionEmployeeService")
    private ListPeriodicDeductionEmployeeService listPeriodicDeductionEmployeeService;


    @Autowired
    @Qualifier("Dynamohr126tabs.CompensatoryDayCreditService")
    private CompensatoryDayCreditService compensatoryDayCreditService;


    @Autowired
    @Qualifier("Dynamohr126tabs.AssetService")
    private AssetService assetService;


    @Autowired
    @Qualifier("Dynamohr126tabs.BadgeEmployeeService")
    private BadgeEmployeeService badgeEmployeeService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ListEmployeePositionService")
    private ListEmployeePositionService listEmployeePositionService;


    @Autowired
    @Qualifier("Dynamohr126tabs.AssetDischargeDocumentService")
    private AssetDischargeDocumentService assetDischargeDocumentService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeGeneralDetailService")
    private EmployeeGeneralDetailService employeeGeneralDetailService;


    @Autowired
    @Qualifier("Dynamohr126tabs.IsrDetailService")
    private IsrDetailService isrDetailService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeTrainingService")
    private EmployeeTrainingService employeeTrainingService;


    @Autowired
    @Qualifier("Dynamohr126tabs.AssetAssignDocumentService")
    private AssetAssignDocumentService assetAssignDocumentService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeWorkProofService")
    private EmployeeWorkProofService employeeWorkProofService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeFileLocationService")
    private EmployeeFileLocationService employeeFileLocationService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeSalaryService")
    private EmployeeSalaryService employeeSalaryService;


    @Autowired
    @Qualifier("Dynamohr126tabs.JustifiedAbsenseService")
    private JustifiedAbsenseService justifiedAbsenseService;


    @Autowired
    @Qualifier("Dynamohr126tabs.TravelEmployeeService")
    private TravelEmployeeService travelEmployeeService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ListPeriodicBonusEmployeeService")
    private ListPeriodicBonusEmployeeService listPeriodicBonusEmployeeService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeLaborHistoryService")
    private EmployeeLaborHistoryService employeeLaborHistoryService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeEducationService")
    private EmployeeEducationService employeeEducationService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ScheduleDynamicService")
    private ScheduleDynamicService scheduleDynamicService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeePersonalReferenceService")
    private EmployeePersonalReferenceService employeePersonalReferenceService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeWorkDayService")
    private EmployeeWorkDayService employeeWorkDayService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Employee instances matching the search criteria.")
	public Page<Employee> findEmployees( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Employees list");
		return employeeService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of Employee instances.")
	public Page<Employee> getEmployees(Pageable pageable) {
		LOGGER.debug("Rendering Employees list");
		return employeeService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Employee instances.")
	public Long countAllEmployees() {
		LOGGER.debug("counting Employees");
		Long count = employeeService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Employee instance associated with the given id.")
    public Employee getEmployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Employee with id: {}" , id);
        Employee instance = employeeService.findById(id);
        LOGGER.debug("Employee details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Employee instance associated with the given id.")
    public boolean deleteEmployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Employee with id: {}" , id);
        Employee deleted = employeeService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Employee instance associated with the given id.")
    public Employee editEmployee(@PathVariable("id") Integer id, @RequestBody Employee instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Employee with id: {}" , instance.getIdEmployee());
        instance.setIdEmployee(id);
        instance = employeeService.update(instance);
        LOGGER.debug("Employee details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/vacationDayDebits", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the vacationDayDebits instance associated with the given id.")
     public Page<VacationDayDebit> findAssociatedvacationDayDebits(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated vacationDayDebits");
        return vacationDayDebitService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeGeneralDetails", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeGeneralDetails instance associated with the given id.")
     public Page<EmployeeGeneralDetail> findAssociatedemployeeGeneralDetails(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeeGeneralDetails");
        return employeeGeneralDetailService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeTrainings", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeTrainings instance associated with the given id.")
     public Page<EmployeeTraining> findAssociatedemployeeTrainings(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeeTrainings");
        return employeeTrainingService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/scheduleDynamics", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the scheduleDynamics instance associated with the given id.")
     public Page<ScheduleDynamic> findAssociatedscheduleDynamics(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated scheduleDynamics");
        return scheduleDynamicService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/listCommissionEmployees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listCommissionEmployees instance associated with the given id.")
     public Page<ListCommissionEmployee> findAssociatedlistCommissionEmployees(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated listCommissionEmployees");
        return listCommissionEmployeeService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/incidenceEmployees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the incidenceEmployees instance associated with the given id.")
     public Page<IncidenceEmployee> findAssociatedincidenceEmployees(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated incidenceEmployees");
        return incidenceEmployeeService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/badgeEmployees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the badgeEmployees instance associated with the given id.")
     public Page<BadgeEmployee> findAssociatedbadgeEmployees(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated badgeEmployees");
        return badgeEmployeeService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/listPeriodicBonusEmployees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listPeriodicBonusEmployees instance associated with the given id.")
     public Page<ListPeriodicBonusEmployee> findAssociatedlistPeriodicBonusEmployees(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated listPeriodicBonusEmployees");
        return listPeriodicBonusEmployeeService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeAssessmentsForFkEvaluatedEmployee", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeAssessmentsForFkEvaluatedEmployee instance associated with the given id.")
     public Page<EmployeeAssessment> findAssociatedemployeeAssessmentsForFkEvaluatedEmployee(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeeAssessmentsForFkEvaluatedEmployee");
        return employeeAssessmentService.findAssociatedValues(id,"employeeByFkEvaluatedEmployee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/assetDischargeDocuments", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the assetDischargeDocuments instance associated with the given id.")
     public Page<AssetDischargeDocument> findAssociatedassetDischargeDocuments(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated assetDischargeDocuments");
        return assetDischargeDocumentService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/assetAssignDocuments", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the assetAssignDocuments instance associated with the given id.")
     public Page<AssetAssignDocument> findAssociatedassetAssignDocuments(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated assetAssignDocuments");
        return assetAssignDocumentService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeePhotoFiles", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeePhotoFiles instance associated with the given id.")
     public Page<EmployeePhotoFile> findAssociatedemployeePhotoFiles(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeePhotoFiles");
        return employeePhotoFileService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeWorkDays", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeWorkDays instance associated with the given id.")
     public Page<EmployeeWorkDay> findAssociatedemployeeWorkDays(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeeWorkDays");
        return employeeWorkDayService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/compensatoryDayDebits", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the compensatoryDayDebits instance associated with the given id.")
     public Page<CompensatoryDayDebit> findAssociatedcompensatoryDayDebits(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated compensatoryDayDebits");
        return compensatoryDayDebitService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeEducations", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeEducations instance associated with the given id.")
     public Page<EmployeeEducation> findAssociatedemployeeEducations(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeeEducations");
        return employeeEducationService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeePersonalReferences", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeePersonalReferences instance associated with the given id.")
     public Page<EmployeePersonalReference> findAssociatedemployeePersonalReferences(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeePersonalReferences");
        return employeePersonalReferenceService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeFiles", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeFiles instance associated with the given id.")
     public Page<EmployeeFile> findAssociatedemployeeFiles(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeeFiles");
        return employeeFileService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeTerminations", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeTerminations instance associated with the given id.")
     public Page<EmployeeTermination> findAssociatedemployeeTerminations(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeeTerminations");
        return employeeTerminationService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeLaborHistories", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeLaborHistories instance associated with the given id.")
     public Page<EmployeeLaborHistory> findAssociatedemployeeLaborHistories(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeeLaborHistories");
        return employeeLaborHistoryService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/listPeriodicDeductionEmployees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listPeriodicDeductionEmployees instance associated with the given id.")
     public Page<ListPeriodicDeductionEmployee> findAssociatedlistPeriodicDeductionEmployees(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated listPeriodicDeductionEmployees");
        return listPeriodicDeductionEmployeeService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeAssessmentsForFkEvaluatingEmployee", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeAssessmentsForFkEvaluatingEmployee instance associated with the given id.")
     public Page<EmployeeAssessment> findAssociatedemployeeAssessmentsForFkEvaluatingEmployee(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeeAssessmentsForFkEvaluatingEmployee");
        return employeeAssessmentService.findAssociatedValues(id,"employeeByFkEvaluatedEmployee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/compensatoryDayCredits", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the compensatoryDayCredits instance associated with the given id.")
     public Page<CompensatoryDayCredit> findAssociatedcompensatoryDayCredits(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated compensatoryDayCredits");
        return compensatoryDayCreditService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeFileLocations", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeFileLocations instance associated with the given id.")
     public Page<EmployeeFileLocation> findAssociatedemployeeFileLocations(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeeFileLocations");
        return employeeFileLocationService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeContracts", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeContracts instance associated with the given id.")
     public Page<EmployeeContract> findAssociatedemployeeContracts(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeeContracts");
        return employeeContractService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/justifiedAbsenses", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the justifiedAbsenses instance associated with the given id.")
     public Page<JustifiedAbsense> findAssociatedjustifiedAbsenses(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated justifiedAbsenses");
        return justifiedAbsenseService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/loans", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the loans instance associated with the given id.")
     public Page<Loan> findAssociatedloans(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated loans");
        return loanService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/assets", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the assets instance associated with the given id.")
     public Page<Asset> findAssociatedassets(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated assets");
        return assetService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/payrollDetails", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the payrollDetails instance associated with the given id.")
     public Page<PayrollDetail> findAssociatedpayrollDetails(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated payrollDetails");
        return payrollDetailService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeSalaries", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeSalaries instance associated with the given id.")
     public Page<EmployeeSalary> findAssociatedemployeeSalaries(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeeSalaries");
        return employeeSalaryService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/timeSheets", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the timeSheets instance associated with the given id.")
     public Page<TimeSheet> findAssociatedtimeSheets(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated timeSheets");
        return timeSheetService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeWorkProofs", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeWorkProofs instance associated with the given id.")
     public Page<EmployeeWorkProof> findAssociatedemployeeWorkProofs(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeeWorkProofs");
        return employeeWorkProofService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/listEmployeePositions", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listEmployeePositions instance associated with the given id.")
     public Page<ListEmployeePosition> findAssociatedlistEmployeePositions(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated listEmployeePositions");
        return listEmployeePositionService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/isrDetails", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the isrDetails instance associated with the given id.")
     public Page<IsrDetail> findAssociatedisrDetails(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated isrDetails");
        return isrDetailService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/listEmployeePhones", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listEmployeePhones instance associated with the given id.")
     public Page<ListEmployeePhone> findAssociatedlistEmployeePhones(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated listEmployeePhones");
        return listEmployeePhoneService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/overTimeEmployees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the overTimeEmployees instance associated with the given id.")
     public Page<OverTimeEmployee> findAssociatedoverTimeEmployees(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated overTimeEmployees");
        return overTimeEmployeeService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/vacationDayCredits", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the vacationDayCredits instance associated with the given id.")
     public Page<VacationDayCredit> findAssociatedvacationDayCredits(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated vacationDayCredits");
        return vacationDayCreditService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }

    @RequestMapping(value="/{id:.+}/travelEmployees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the travelEmployees instance associated with the given id.")
     public Page<TravelEmployee> findAssociatedtravelEmployees(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated travelEmployees");
        return travelEmployeeService.findAssociatedValues(id,"employee","idEmployee", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Employee instance.")
	public Employee createEmployee(@RequestBody Employee instance) {
		LOGGER.debug("Create Employee with information: {}" , instance);
		instance = employeeService.create(instance);
		LOGGER.debug("Created Employee with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setEmployeeService(EmployeeService service) {
		this.employeeService = service;
	}
}

