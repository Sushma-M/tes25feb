/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.EmployeeWorkProofService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class EmployeeWorkProof.
 * @see com.test_25feb.dynamohr126tabs.EmployeeWorkProof
 */

@RestController(value = "Dynamohr126tabs.EmployeeWorkProofController")
@Api(value = "/Dynamohr126tabs/EmployeeWorkProof", description = "Exposes APIs to work with EmployeeWorkProof resource.")
@RequestMapping("/Dynamohr126tabs/EmployeeWorkProof")
public class EmployeeWorkProofController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeWorkProofController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.EmployeeWorkProofService")
	private EmployeeWorkProofService employeeWorkProofService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of EmployeeWorkProof instances matching the search criteria.")
	public Page<EmployeeWorkProof> findEmployeeWorkProofs( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering EmployeeWorkProofs list");
		return employeeWorkProofService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of EmployeeWorkProof instances.")
	public Page<EmployeeWorkProof> getEmployeeWorkProofs(Pageable pageable) {
		LOGGER.debug("Rendering EmployeeWorkProofs list");
		return employeeWorkProofService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of EmployeeWorkProof instances.")
	public Long countAllEmployeeWorkProofs() {
		LOGGER.debug("counting EmployeeWorkProofs");
		Long count = employeeWorkProofService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the EmployeeWorkProof instance associated with the given id.")
    public EmployeeWorkProof getEmployeeWorkProof(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting EmployeeWorkProof with id: {}" , id);
        EmployeeWorkProof instance = employeeWorkProofService.findById(id);
        LOGGER.debug("EmployeeWorkProof details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the EmployeeWorkProof instance associated with the given id.")
    public boolean deleteEmployeeWorkProof(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeWorkProof with id: {}" , id);
        EmployeeWorkProof deleted = employeeWorkProofService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the EmployeeWorkProof instance associated with the given id.")
    public EmployeeWorkProof editEmployeeWorkProof(@PathVariable("id") Integer id, @RequestBody EmployeeWorkProof instance) throws EntityNotFoundException {
        LOGGER.debug("Editing EmployeeWorkProof with id: {}" , instance.getIdEmployeeWorkProof());
        instance.setIdEmployeeWorkProof(id);
        instance = employeeWorkProofService.update(instance);
        LOGGER.debug("EmployeeWorkProof details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new EmployeeWorkProof instance.")
	public EmployeeWorkProof createEmployeeWorkProof(@RequestBody EmployeeWorkProof instance) {
		LOGGER.debug("Create EmployeeWorkProof with information: {}" , instance);
		instance = employeeWorkProofService.create(instance);
		LOGGER.debug("Created EmployeeWorkProof with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setEmployeeWorkProofService(EmployeeWorkProofService service) {
		this.employeeWorkProofService = service;
	}
}

