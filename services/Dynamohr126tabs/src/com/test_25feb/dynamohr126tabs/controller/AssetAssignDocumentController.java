/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.AssetAssignDocumentService;
import com.test_25feb.dynamohr126tabs.service.ListAssetLoadedService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class AssetAssignDocument.
 * @see com.test_25feb.dynamohr126tabs.AssetAssignDocument
 */

@RestController(value = "Dynamohr126tabs.AssetAssignDocumentController")
@Api(value = "/Dynamohr126tabs/AssetAssignDocument", description = "Exposes APIs to work with AssetAssignDocument resource.")
@RequestMapping("/Dynamohr126tabs/AssetAssignDocument")
public class AssetAssignDocumentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(AssetAssignDocumentController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.AssetAssignDocumentService")
	private AssetAssignDocumentService assetAssignDocumentService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ListAssetLoadedService")
    private ListAssetLoadedService listAssetLoadedService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of AssetAssignDocument instances matching the search criteria.")
	public Page<AssetAssignDocument> findAssetAssignDocuments( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering AssetAssignDocuments list");
		return assetAssignDocumentService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of AssetAssignDocument instances.")
	public Page<AssetAssignDocument> getAssetAssignDocuments(Pageable pageable) {
		LOGGER.debug("Rendering AssetAssignDocuments list");
		return assetAssignDocumentService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of AssetAssignDocument instances.")
	public Long countAllAssetAssignDocuments() {
		LOGGER.debug("counting AssetAssignDocuments");
		Long count = assetAssignDocumentService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the AssetAssignDocument instance associated with the given id.")
    public AssetAssignDocument getAssetAssignDocument(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting AssetAssignDocument with id: {}" , id);
        AssetAssignDocument instance = assetAssignDocumentService.findById(id);
        LOGGER.debug("AssetAssignDocument details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the AssetAssignDocument instance associated with the given id.")
    public boolean deleteAssetAssignDocument(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting AssetAssignDocument with id: {}" , id);
        AssetAssignDocument deleted = assetAssignDocumentService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the AssetAssignDocument instance associated with the given id.")
    public AssetAssignDocument editAssetAssignDocument(@PathVariable("id") Integer id, @RequestBody AssetAssignDocument instance) throws EntityNotFoundException {
        LOGGER.debug("Editing AssetAssignDocument with id: {}" , instance.getIdAssetAssignDocument());
        instance.setIdAssetAssignDocument(id);
        instance = assetAssignDocumentService.update(instance);
        LOGGER.debug("AssetAssignDocument details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/listAssetLoadeds", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listAssetLoadeds instance associated with the given id.")
     public Page<ListAssetLoaded> findAssociatedlistAssetLoadeds(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated listAssetLoadeds");
        return listAssetLoadedService.findAssociatedValues(id,"assetAssignDocument","idAssetAssignDocument", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new AssetAssignDocument instance.")
	public AssetAssignDocument createAssetAssignDocument(@RequestBody AssetAssignDocument instance) {
		LOGGER.debug("Create AssetAssignDocument with information: {}" , instance);
		instance = assetAssignDocumentService.create(instance);
		LOGGER.debug("Created AssetAssignDocument with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setAssetAssignDocumentService(AssetAssignDocumentService service) {
		this.assetAssignDocumentService = service;
	}
}

