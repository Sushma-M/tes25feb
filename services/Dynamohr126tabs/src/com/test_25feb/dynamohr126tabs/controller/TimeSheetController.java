/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.TimeSheetService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class TimeSheet.
 * @see com.test_25feb.dynamohr126tabs.TimeSheet
 */

@RestController(value = "Dynamohr126tabs.TimeSheetController")
@Api(value = "/Dynamohr126tabs/TimeSheet", description = "Exposes APIs to work with TimeSheet resource.")
@RequestMapping("/Dynamohr126tabs/TimeSheet")
public class TimeSheetController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TimeSheetController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.TimeSheetService")
	private TimeSheetService timeSheetService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TimeSheet instances matching the search criteria.")
	public Page<TimeSheet> findTimeSheets( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TimeSheets list");
		return timeSheetService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of TimeSheet instances.")
	public Page<TimeSheet> getTimeSheets(Pageable pageable) {
		LOGGER.debug("Rendering TimeSheets list");
		return timeSheetService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TimeSheet instances.")
	public Long countAllTimeSheets() {
		LOGGER.debug("counting TimeSheets");
		Long count = timeSheetService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TimeSheet instance associated with the given id.")
    public TimeSheet getTimeSheet(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TimeSheet with id: {}" , id);
        TimeSheet instance = timeSheetService.findById(id);
        LOGGER.debug("TimeSheet details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TimeSheet instance associated with the given id.")
    public boolean deleteTimeSheet(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TimeSheet with id: {}" , id);
        TimeSheet deleted = timeSheetService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TimeSheet instance associated with the given id.")
    public TimeSheet editTimeSheet(@PathVariable("id") Integer id, @RequestBody TimeSheet instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TimeSheet with id: {}" , instance.getIdTimeSheet());
        instance.setIdTimeSheet(id);
        instance = timeSheetService.update(instance);
        LOGGER.debug("TimeSheet details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TimeSheet instance.")
	public TimeSheet createTimeSheet(@RequestBody TimeSheet instance) {
		LOGGER.debug("Create TimeSheet with information: {}" , instance);
		instance = timeSheetService.create(instance);
		LOGGER.debug("Created TimeSheet with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTimeSheetService(TimeSheetService service) {
		this.timeSheetService = service;
	}
}

