/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.EmployeeEducationService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class EmployeeEducation.
 * @see com.test_25feb.dynamohr126tabs.EmployeeEducation
 */

@RestController(value = "Dynamohr126tabs.EmployeeEducationController")
@Api(value = "/Dynamohr126tabs/EmployeeEducation", description = "Exposes APIs to work with EmployeeEducation resource.")
@RequestMapping("/Dynamohr126tabs/EmployeeEducation")
public class EmployeeEducationController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeEducationController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.EmployeeEducationService")
	private EmployeeEducationService employeeEducationService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of EmployeeEducation instances matching the search criteria.")
	public Page<EmployeeEducation> findEmployeeEducations( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering EmployeeEducations list");
		return employeeEducationService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of EmployeeEducation instances.")
	public Page<EmployeeEducation> getEmployeeEducations(Pageable pageable) {
		LOGGER.debug("Rendering EmployeeEducations list");
		return employeeEducationService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of EmployeeEducation instances.")
	public Long countAllEmployeeEducations() {
		LOGGER.debug("counting EmployeeEducations");
		Long count = employeeEducationService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the EmployeeEducation instance associated with the given id.")
    public EmployeeEducation getEmployeeEducation(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting EmployeeEducation with id: {}" , id);
        EmployeeEducation instance = employeeEducationService.findById(id);
        LOGGER.debug("EmployeeEducation details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the EmployeeEducation instance associated with the given id.")
    public boolean deleteEmployeeEducation(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeEducation with id: {}" , id);
        EmployeeEducation deleted = employeeEducationService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the EmployeeEducation instance associated with the given id.")
    public EmployeeEducation editEmployeeEducation(@PathVariable("id") Integer id, @RequestBody EmployeeEducation instance) throws EntityNotFoundException {
        LOGGER.debug("Editing EmployeeEducation with id: {}" , instance.getIdEmployeeEducation());
        instance.setIdEmployeeEducation(id);
        instance = employeeEducationService.update(instance);
        LOGGER.debug("EmployeeEducation details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new EmployeeEducation instance.")
	public EmployeeEducation createEmployeeEducation(@RequestBody EmployeeEducation instance) {
		LOGGER.debug("Create EmployeeEducation with information: {}" , instance);
		instance = employeeEducationService.create(instance);
		LOGGER.debug("Created EmployeeEducation with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setEmployeeEducationService(EmployeeEducationService service) {
		this.employeeEducationService = service;
	}
}

