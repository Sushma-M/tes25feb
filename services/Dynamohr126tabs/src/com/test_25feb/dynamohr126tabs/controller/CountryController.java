/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.ApplicantToPositionService;
import com.test_25feb.dynamohr126tabs.service.CountryService;
import com.test_25feb.dynamohr126tabs.service.EmployeeGeneralDetailService;
import com.test_25feb.dynamohr126tabs.service.EmployeeService;
import com.test_25feb.dynamohr126tabs.service.LocationService;
import com.test_25feb.dynamohr126tabs.service.UserService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class Country.
 * @see com.test_25feb.dynamohr126tabs.Country
 */

@RestController(value = "Dynamohr126tabs.CountryController")
@Api(value = "/Dynamohr126tabs/Country", description = "Exposes APIs to work with Country resource.")
@RequestMapping("/Dynamohr126tabs/Country")
public class CountryController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CountryController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.CountryService")
	private CountryService countryService;


    @Autowired
    @Qualifier("Dynamohr126tabs.UserService")
    private UserService userService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ApplicantToPositionService")
    private ApplicantToPositionService applicantToPositionService;


    @Autowired
    @Qualifier("Dynamohr126tabs.LocationService")
    private LocationService locationService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeService")
    private EmployeeService employeeService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeGeneralDetailService")
    private EmployeeGeneralDetailService employeeGeneralDetailService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Country instances matching the search criteria.")
	public Page<Country> findCountrys( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Countrys list");
		return countryService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of Country instances.")
	public Page<Country> getCountrys(Pageable pageable) {
		LOGGER.debug("Rendering Countrys list");
		return countryService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Country instances.")
	public Long countAllCountrys() {
		LOGGER.debug("counting Countrys");
		Long count = countryService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Country instance associated with the given id.")
    public Country getCountry(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Country with id: {}" , id);
        Country instance = countryService.findById(id);
        LOGGER.debug("Country details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Country instance associated with the given id.")
    public boolean deleteCountry(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Country with id: {}" , id);
        Country deleted = countryService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Country instance associated with the given id.")
    public Country editCountry(@PathVariable("id") Integer id, @RequestBody Country instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Country with id: {}" , instance.getIdCountry());
        instance.setIdCountry(id);
        instance = countryService.update(instance);
        LOGGER.debug("Country details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/employeeGeneralDetails", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeGeneralDetails instance associated with the given id.")
     public Page<EmployeeGeneralDetail> findAssociatedemployeeGeneralDetails(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeeGeneralDetails");
        return employeeGeneralDetailService.findAssociatedValues(id,"country","idCountry", pageable);
   }

    @RequestMapping(value="/{id:.+}/users", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the users instance associated with the given id.")
     public Page<User> findAssociatedusers(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated users");
        return userService.findAssociatedValues(id,"country","idCountry", pageable);
   }

    @RequestMapping(value="/{id:.+}/locations", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the locations instance associated with the given id.")
     public Page<Location> findAssociatedlocations(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated locations");
        return locationService.findAssociatedValues(id,"country","idCountry", pageable);
   }

    @RequestMapping(value="/{id:.+}/applicantToPositions", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the applicantToPositions instance associated with the given id.")
     public Page<ApplicantToPosition> findAssociatedapplicantToPositions(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated applicantToPositions");
        return applicantToPositionService.findAssociatedValues(id,"country","idCountry", pageable);
   }

    @RequestMapping(value="/{id:.+}/employees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employees instance associated with the given id.")
     public Page<Employee> findAssociatedemployees(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employees");
        return employeeService.findAssociatedValues(id,"country","idCountry", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Country instance.")
	public Country createCountry(@RequestBody Country instance) {
		LOGGER.debug("Create Country with information: {}" , instance);
		instance = countryService.create(instance);
		LOGGER.debug("Created Country with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setCountryService(CountryService service) {
		this.countryService = service;
	}
}

