/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.ListTravelExpenseDetailService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class ListTravelExpenseDetail.
 * @see com.test_25feb.dynamohr126tabs.ListTravelExpenseDetail
 */

@RestController(value = "Dynamohr126tabs.ListTravelExpenseDetailController")
@Api(value = "/Dynamohr126tabs/ListTravelExpenseDetail", description = "Exposes APIs to work with ListTravelExpenseDetail resource.")
@RequestMapping("/Dynamohr126tabs/ListTravelExpenseDetail")
public class ListTravelExpenseDetailController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListTravelExpenseDetailController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.ListTravelExpenseDetailService")
	private ListTravelExpenseDetailService listTravelExpenseDetailService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ListTravelExpenseDetail instances matching the search criteria.")
	public Page<ListTravelExpenseDetail> findListTravelExpenseDetails( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ListTravelExpenseDetails list");
		return listTravelExpenseDetailService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of ListTravelExpenseDetail instances.")
	public Page<ListTravelExpenseDetail> getListTravelExpenseDetails(Pageable pageable) {
		LOGGER.debug("Rendering ListTravelExpenseDetails list");
		return listTravelExpenseDetailService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ListTravelExpenseDetail instances.")
	public Long countAllListTravelExpenseDetails() {
		LOGGER.debug("counting ListTravelExpenseDetails");
		Long count = listTravelExpenseDetailService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ListTravelExpenseDetail instance associated with the given id.")
    public ListTravelExpenseDetail getListTravelExpenseDetail(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ListTravelExpenseDetail with id: {}" , id);
        ListTravelExpenseDetail instance = listTravelExpenseDetailService.findById(id);
        LOGGER.debug("ListTravelExpenseDetail details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ListTravelExpenseDetail instance associated with the given id.")
    public boolean deleteListTravelExpenseDetail(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListTravelExpenseDetail with id: {}" , id);
        ListTravelExpenseDetail deleted = listTravelExpenseDetailService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ListTravelExpenseDetail instance associated with the given id.")
    public ListTravelExpenseDetail editListTravelExpenseDetail(@PathVariable("id") Integer id, @RequestBody ListTravelExpenseDetail instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ListTravelExpenseDetail with id: {}" , instance.getIdListTravelExpenseDetail());
        instance.setIdListTravelExpenseDetail(id);
        instance = listTravelExpenseDetailService.update(instance);
        LOGGER.debug("ListTravelExpenseDetail details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ListTravelExpenseDetail instance.")
	public ListTravelExpenseDetail createListTravelExpenseDetail(@RequestBody ListTravelExpenseDetail instance) {
		LOGGER.debug("Create ListTravelExpenseDetail with information: {}" , instance);
		instance = listTravelExpenseDetailService.create(instance);
		LOGGER.debug("Created ListTravelExpenseDetail with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setListTravelExpenseDetailService(ListTravelExpenseDetailService service) {
		this.listTravelExpenseDetailService = service;
	}
}

