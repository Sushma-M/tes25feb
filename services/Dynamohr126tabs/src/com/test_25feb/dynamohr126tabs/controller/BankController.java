/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.BankService;
import com.test_25feb.dynamohr126tabs.service.EmployeeSalaryService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class Bank.
 * @see com.test_25feb.dynamohr126tabs.Bank
 */

@RestController(value = "Dynamohr126tabs.BankController")
@Api(value = "/Dynamohr126tabs/Bank", description = "Exposes APIs to work with Bank resource.")
@RequestMapping("/Dynamohr126tabs/Bank")
public class BankController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BankController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.BankService")
	private BankService bankService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeSalaryService")
    private EmployeeSalaryService employeeSalaryService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Bank instances matching the search criteria.")
	public Page<Bank> findBanks( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Banks list");
		return bankService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of Bank instances.")
	public Page<Bank> getBanks(Pageable pageable) {
		LOGGER.debug("Rendering Banks list");
		return bankService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Bank instances.")
	public Long countAllBanks() {
		LOGGER.debug("counting Banks");
		Long count = bankService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Bank instance associated with the given id.")
    public Bank getBank(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Bank with id: {}" , id);
        Bank instance = bankService.findById(id);
        LOGGER.debug("Bank details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Bank instance associated with the given id.")
    public boolean deleteBank(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Bank with id: {}" , id);
        Bank deleted = bankService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Bank instance associated with the given id.")
    public Bank editBank(@PathVariable("id") Integer id, @RequestBody Bank instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Bank with id: {}" , instance.getIdBank());
        instance.setIdBank(id);
        instance = bankService.update(instance);
        LOGGER.debug("Bank details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/employeeSalaries", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeSalaries instance associated with the given id.")
     public Page<EmployeeSalary> findAssociatedemployeeSalaries(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeeSalaries");
        return employeeSalaryService.findAssociatedValues(id,"bank","idBank", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Bank instance.")
	public Bank createBank(@RequestBody Bank instance) {
		LOGGER.debug("Create Bank with information: {}" , instance);
		instance = bankService.create(instance);
		LOGGER.debug("Created Bank with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setBankService(BankService service) {
		this.bankService = service;
	}
}

