/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.AnnouncementService;
import com.test_25feb.dynamohr126tabs.service.TypeAnnouncementService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class TypeAnnouncement.
 * @see com.test_25feb.dynamohr126tabs.TypeAnnouncement
 */

@RestController(value = "Dynamohr126tabs.TypeAnnouncementController")
@Api(value = "/Dynamohr126tabs/TypeAnnouncement", description = "Exposes APIs to work with TypeAnnouncement resource.")
@RequestMapping("/Dynamohr126tabs/TypeAnnouncement")
public class TypeAnnouncementController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeAnnouncementController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.TypeAnnouncementService")
	private TypeAnnouncementService typeAnnouncementService;


    @Autowired
    @Qualifier("Dynamohr126tabs.AnnouncementService")
    private AnnouncementService announcementService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TypeAnnouncement instances matching the search criteria.")
	public Page<TypeAnnouncement> findTypeAnnouncements( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TypeAnnouncements list");
		return typeAnnouncementService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of TypeAnnouncement instances.")
	public Page<TypeAnnouncement> getTypeAnnouncements(Pageable pageable) {
		LOGGER.debug("Rendering TypeAnnouncements list");
		return typeAnnouncementService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TypeAnnouncement instances.")
	public Long countAllTypeAnnouncements() {
		LOGGER.debug("counting TypeAnnouncements");
		Long count = typeAnnouncementService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TypeAnnouncement instance associated with the given id.")
    public TypeAnnouncement getTypeAnnouncement(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeAnnouncement with id: {}" , id);
        TypeAnnouncement instance = typeAnnouncementService.findById(id);
        LOGGER.debug("TypeAnnouncement details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TypeAnnouncement instance associated with the given id.")
    public boolean deleteTypeAnnouncement(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeAnnouncement with id: {}" , id);
        TypeAnnouncement deleted = typeAnnouncementService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TypeAnnouncement instance associated with the given id.")
    public TypeAnnouncement editTypeAnnouncement(@PathVariable("id") Integer id, @RequestBody TypeAnnouncement instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeAnnouncement with id: {}" , instance.getIdTypeAnnouncement());
        instance.setIdTypeAnnouncement(id);
        instance = typeAnnouncementService.update(instance);
        LOGGER.debug("TypeAnnouncement details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/announcements", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the announcements instance associated with the given id.")
     public Page<Announcement> findAssociatedannouncements(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated announcements");
        return announcementService.findAssociatedValues(id,"typeAnnouncement","idTypeAnnouncement", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TypeAnnouncement instance.")
	public TypeAnnouncement createTypeAnnouncement(@RequestBody TypeAnnouncement instance) {
		LOGGER.debug("Create TypeAnnouncement with information: {}" , instance);
		instance = typeAnnouncementService.create(instance);
		LOGGER.debug("Created TypeAnnouncement with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTypeAnnouncementService(TypeAnnouncementService service) {
		this.typeAnnouncementService = service;
	}
}

