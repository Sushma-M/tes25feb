/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.ListEmployeePhoneService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class ListEmployeePhone.
 * @see com.test_25feb.dynamohr126tabs.ListEmployeePhone
 */

@RestController(value = "Dynamohr126tabs.ListEmployeePhoneController")
@Api(value = "/Dynamohr126tabs/ListEmployeePhone", description = "Exposes APIs to work with ListEmployeePhone resource.")
@RequestMapping("/Dynamohr126tabs/ListEmployeePhone")
public class ListEmployeePhoneController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ListEmployeePhoneController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.ListEmployeePhoneService")
	private ListEmployeePhoneService listEmployeePhoneService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ListEmployeePhone instances matching the search criteria.")
	public Page<ListEmployeePhone> findListEmployeePhones( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ListEmployeePhones list");
		return listEmployeePhoneService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of ListEmployeePhone instances.")
	public Page<ListEmployeePhone> getListEmployeePhones(Pageable pageable) {
		LOGGER.debug("Rendering ListEmployeePhones list");
		return listEmployeePhoneService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ListEmployeePhone instances.")
	public Long countAllListEmployeePhones() {
		LOGGER.debug("counting ListEmployeePhones");
		Long count = listEmployeePhoneService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ListEmployeePhone instance associated with the given id.")
    public ListEmployeePhone getListEmployeePhone(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ListEmployeePhone with id: {}" , id);
        ListEmployeePhone instance = listEmployeePhoneService.findById(id);
        LOGGER.debug("ListEmployeePhone details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ListEmployeePhone instance associated with the given id.")
    public boolean deleteListEmployeePhone(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ListEmployeePhone with id: {}" , id);
        ListEmployeePhone deleted = listEmployeePhoneService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ListEmployeePhone instance associated with the given id.")
    public ListEmployeePhone editListEmployeePhone(@PathVariable("id") Integer id, @RequestBody ListEmployeePhone instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ListEmployeePhone with id: {}" , instance.getIdListEmployeePhone());
        instance.setIdListEmployeePhone(id);
        instance = listEmployeePhoneService.update(instance);
        LOGGER.debug("ListEmployeePhone details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ListEmployeePhone instance.")
	public ListEmployeePhone createListEmployeePhone(@RequestBody ListEmployeePhone instance) {
		LOGGER.debug("Create ListEmployeePhone with information: {}" , instance);
		instance = listEmployeePhoneService.create(instance);
		LOGGER.debug("Created ListEmployeePhone with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setListEmployeePhoneService(ListEmployeePhoneService service) {
		this.listEmployeePhoneService = service;
	}
}

