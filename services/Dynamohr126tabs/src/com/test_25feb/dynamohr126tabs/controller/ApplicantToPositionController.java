/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.ApplicantAppointmentService;
import com.test_25feb.dynamohr126tabs.service.ApplicantFileService;
import com.test_25feb.dynamohr126tabs.service.ApplicantNoteService;
import com.test_25feb.dynamohr126tabs.service.ApplicantToPositionService;
import com.test_25feb.dynamohr126tabs.service.EmployeeService;
import com.test_25feb.dynamohr126tabs.service.WorkPositionVacantService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class ApplicantToPosition.
 * @see com.test_25feb.dynamohr126tabs.ApplicantToPosition
 */

@RestController(value = "Dynamohr126tabs.ApplicantToPositionController")
@Api(value = "/Dynamohr126tabs/ApplicantToPosition", description = "Exposes APIs to work with ApplicantToPosition resource.")
@RequestMapping("/Dynamohr126tabs/ApplicantToPosition")
public class ApplicantToPositionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ApplicantToPositionController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.ApplicantToPositionService")
	private ApplicantToPositionService applicantToPositionService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ApplicantNoteService")
    private ApplicantNoteService applicantNoteService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ApplicantFileService")
    private ApplicantFileService applicantFileService;


    @Autowired
    @Qualifier("Dynamohr126tabs.WorkPositionVacantService")
    private WorkPositionVacantService workPositionVacantService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeService")
    private EmployeeService employeeService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ApplicantAppointmentService")
    private ApplicantAppointmentService applicantAppointmentService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ApplicantToPosition instances matching the search criteria.")
	public Page<ApplicantToPosition> findApplicantToPositions( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ApplicantToPositions list");
		return applicantToPositionService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of ApplicantToPosition instances.")
	public Page<ApplicantToPosition> getApplicantToPositions(Pageable pageable) {
		LOGGER.debug("Rendering ApplicantToPositions list");
		return applicantToPositionService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ApplicantToPosition instances.")
	public Long countAllApplicantToPositions() {
		LOGGER.debug("counting ApplicantToPositions");
		Long count = applicantToPositionService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ApplicantToPosition instance associated with the given id.")
    public ApplicantToPosition getApplicantToPosition(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ApplicantToPosition with id: {}" , id);
        ApplicantToPosition instance = applicantToPositionService.findById(id);
        LOGGER.debug("ApplicantToPosition details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ApplicantToPosition instance associated with the given id.")
    public boolean deleteApplicantToPosition(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ApplicantToPosition with id: {}" , id);
        ApplicantToPosition deleted = applicantToPositionService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ApplicantToPosition instance associated with the given id.")
    public ApplicantToPosition editApplicantToPosition(@PathVariable("id") Integer id, @RequestBody ApplicantToPosition instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ApplicantToPosition with id: {}" , instance.getIdApplicantToPosition());
        instance.setIdApplicantToPosition(id);
        instance = applicantToPositionService.update(instance);
        LOGGER.debug("ApplicantToPosition details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/applicantNotes", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the applicantNotes instance associated with the given id.")
     public Page<ApplicantNote> findAssociatedapplicantNotes(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated applicantNotes");
        return applicantNoteService.findAssociatedValues(id,"applicantToPosition","idApplicantToPosition", pageable);
   }

    @RequestMapping(value="/{id:.+}/applicantFiles", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the applicantFiles instance associated with the given id.")
     public Page<ApplicantFile> findAssociatedapplicantFiles(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated applicantFiles");
        return applicantFileService.findAssociatedValues(id,"applicantToPosition","idApplicantToPosition", pageable);
   }

    @RequestMapping(value="/{id:.+}/workPositionVacantsForFkAspiranteAsignado", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the workPositionVacantsForFkAspiranteAsignado instance associated with the given id.")
     public Page<WorkPositionVacant> findAssociatedworkPositionVacantsForFkAspiranteAsignado(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated workPositionVacantsForFkAspiranteAsignado");
        return workPositionVacantService.findAssociatedValues(id,"applicantToPositionByFkAspiranteAsignado","idApplicantToPosition", pageable);
   }

    @RequestMapping(value="/{id:.+}/applicantAppointments", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the applicantAppointments instance associated with the given id.")
     public Page<ApplicantAppointment> findAssociatedapplicantAppointments(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated applicantAppointments");
        return applicantAppointmentService.findAssociatedValues(id,"applicantToPosition","idApplicantToPosition", pageable);
   }

    @RequestMapping(value="/{id:.+}/employees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employees instance associated with the given id.")
     public Page<Employee> findAssociatedemployees(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employees");
        return employeeService.findAssociatedValues(id,"applicantToPosition","idApplicantToPosition", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ApplicantToPosition instance.")
	public ApplicantToPosition createApplicantToPosition(@RequestBody ApplicantToPosition instance) {
		LOGGER.debug("Create ApplicantToPosition with information: {}" , instance);
		instance = applicantToPositionService.create(instance);
		LOGGER.debug("Created ApplicantToPosition with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setApplicantToPositionService(ApplicantToPositionService service) {
		this.applicantToPositionService = service;
	}
}

