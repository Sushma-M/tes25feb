/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.EmployeeTerminationService;
import com.test_25feb.dynamohr126tabs.service.TypeEmployeeTerminationService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class TypeEmployeeTermination.
 * @see com.test_25feb.dynamohr126tabs.TypeEmployeeTermination
 */

@RestController(value = "Dynamohr126tabs.TypeEmployeeTerminationController")
@Api(value = "/Dynamohr126tabs/TypeEmployeeTermination", description = "Exposes APIs to work with TypeEmployeeTermination resource.")
@RequestMapping("/Dynamohr126tabs/TypeEmployeeTermination")
public class TypeEmployeeTerminationController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeEmployeeTerminationController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.TypeEmployeeTerminationService")
	private TypeEmployeeTerminationService typeEmployeeTerminationService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeTerminationService")
    private EmployeeTerminationService employeeTerminationService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TypeEmployeeTermination instances matching the search criteria.")
	public Page<TypeEmployeeTermination> findTypeEmployeeTerminations( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TypeEmployeeTerminations list");
		return typeEmployeeTerminationService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of TypeEmployeeTermination instances.")
	public Page<TypeEmployeeTermination> getTypeEmployeeTerminations(Pageable pageable) {
		LOGGER.debug("Rendering TypeEmployeeTerminations list");
		return typeEmployeeTerminationService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TypeEmployeeTermination instances.")
	public Long countAllTypeEmployeeTerminations() {
		LOGGER.debug("counting TypeEmployeeTerminations");
		Long count = typeEmployeeTerminationService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TypeEmployeeTermination instance associated with the given id.")
    public TypeEmployeeTermination getTypeEmployeeTermination(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeEmployeeTermination with id: {}" , id);
        TypeEmployeeTermination instance = typeEmployeeTerminationService.findById(id);
        LOGGER.debug("TypeEmployeeTermination details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TypeEmployeeTermination instance associated with the given id.")
    public boolean deleteTypeEmployeeTermination(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeEmployeeTermination with id: {}" , id);
        TypeEmployeeTermination deleted = typeEmployeeTerminationService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TypeEmployeeTermination instance associated with the given id.")
    public TypeEmployeeTermination editTypeEmployeeTermination(@PathVariable("id") Integer id, @RequestBody TypeEmployeeTermination instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeEmployeeTermination with id: {}" , instance.getIdEmployeeTermination());
        instance.setIdEmployeeTermination(id);
        instance = typeEmployeeTerminationService.update(instance);
        LOGGER.debug("TypeEmployeeTermination details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/employeeTerminations", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeTerminations instance associated with the given id.")
     public Page<EmployeeTermination> findAssociatedemployeeTerminations(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeeTerminations");
        return employeeTerminationService.findAssociatedValues(id,"typeEmployeeTermination","idEmployeeTermination", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TypeEmployeeTermination instance.")
	public TypeEmployeeTermination createTypeEmployeeTermination(@RequestBody TypeEmployeeTermination instance) {
		LOGGER.debug("Create TypeEmployeeTermination with information: {}" , instance);
		instance = typeEmployeeTerminationService.create(instance);
		LOGGER.debug("Created TypeEmployeeTermination with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTypeEmployeeTerminationService(TypeEmployeeTerminationService service) {
		this.typeEmployeeTerminationService = service;
	}
}

