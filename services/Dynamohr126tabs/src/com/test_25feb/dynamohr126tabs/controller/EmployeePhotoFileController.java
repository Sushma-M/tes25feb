/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.EmployeePhotoFileService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class EmployeePhotoFile.
 * @see com.test_25feb.dynamohr126tabs.EmployeePhotoFile
 */

@RestController(value = "Dynamohr126tabs.EmployeePhotoFileController")
@Api(value = "/Dynamohr126tabs/EmployeePhotoFile", description = "Exposes APIs to work with EmployeePhotoFile resource.")
@RequestMapping("/Dynamohr126tabs/EmployeePhotoFile")
public class EmployeePhotoFileController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeePhotoFileController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.EmployeePhotoFileService")
	private EmployeePhotoFileService employeePhotoFileService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of EmployeePhotoFile instances matching the search criteria.")
	public Page<EmployeePhotoFile> findEmployeePhotoFiles( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering EmployeePhotoFiles list");
		return employeePhotoFileService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of EmployeePhotoFile instances.")
	public Page<EmployeePhotoFile> getEmployeePhotoFiles(Pageable pageable) {
		LOGGER.debug("Rendering EmployeePhotoFiles list");
		return employeePhotoFileService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of EmployeePhotoFile instances.")
	public Long countAllEmployeePhotoFiles() {
		LOGGER.debug("counting EmployeePhotoFiles");
		Long count = employeePhotoFileService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the EmployeePhotoFile instance associated with the given id.")
    public EmployeePhotoFile getEmployeePhotoFile(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting EmployeePhotoFile with id: {}" , id);
        EmployeePhotoFile instance = employeePhotoFileService.findById(id);
        LOGGER.debug("EmployeePhotoFile details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the EmployeePhotoFile instance associated with the given id.")
    public boolean deleteEmployeePhotoFile(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeePhotoFile with id: {}" , id);
        EmployeePhotoFile deleted = employeePhotoFileService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the EmployeePhotoFile instance associated with the given id.")
    public EmployeePhotoFile editEmployeePhotoFile(@PathVariable("id") Integer id, @RequestBody EmployeePhotoFile instance) throws EntityNotFoundException {
        LOGGER.debug("Editing EmployeePhotoFile with id: {}" , instance.getIdEmployeePhotoFile());
        instance.setIdEmployeePhotoFile(id);
        instance = employeePhotoFileService.update(instance);
        LOGGER.debug("EmployeePhotoFile details with id: {}" , instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.POST, consumes = {"multipart/form-data"})
    @ApiOperation(value = "Updates the EmployeePhotoFile instance associated with the given id.This API should be used when EmployeePhotoFile instance fields that require multipart data.")
    public EmployeePhotoFile editEmployeePhotoFile(@PathVariable("id") Integer id, MultipartHttpServletRequest multipartHttpServletRequest) throws EntityNotFoundException {
        EmployeePhotoFile newemployeephotofile = WMMultipartUtils.toObject(multipartHttpServletRequest,EmployeePhotoFile.class,"Dynamohr126tabs");
        newemployeephotofile.setIdEmployeePhotoFile(id);
        EmployeePhotoFile oldemployeephotofile = employeePhotoFileService.findById(id);
        WMMultipartUtils.updateLobsContent(oldemployeephotofile,newemployeephotofile);
        LOGGER.debug("Updating employeephotofile with information: {}" , newemployeephotofile);
        return employeePhotoFileService.update(newemployeephotofile);
    }
    @RequestMapping(value = "/{id}/content/{fieldName}", method = RequestMethod.GET, produces="application/octet-stream")
    @ApiOperation(value = "Retrieves content for the given BLOB field in EmployeePhotoFile instance" )
    public DownloadResponse getEmployeePhotoFileBLOBContent(@PathVariable("id") Integer id,@PathVariable("fieldName") String fieldName,HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, @RequestParam( value="download", defaultValue = "false") boolean download) {
        LOGGER.debug("Retrieves content for the given BLOB field {} in EmployeePhotoFile instance" , fieldName);
        if(!WMRuntimeUtils.isLob(EmployeePhotoFile.class,fieldName)) {
            throw new TypeMismatchException("Given field " + fieldName + " is not a valid BLOB type");
        }
        EmployeePhotoFile instance = employeePhotoFileService.findById(id);
        return WMMultipartUtils.buildDownloadResponseForBlob(instance, fieldName, httpServletRequest, download);
    }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new EmployeePhotoFile instance.")
	public EmployeePhotoFile createEmployeePhotoFile(@RequestBody EmployeePhotoFile instance) {
		LOGGER.debug("Create EmployeePhotoFile with information: {}" , instance);
		instance = employeePhotoFileService.create(instance);
		LOGGER.debug("Created EmployeePhotoFile with information: {}" , instance);
	    return instance;
	}

	@RequestMapping(value = "/", method = RequestMethod.POST, consumes = {"multipart/form-data"})
	@ApiOperation(value = "Creates a new EmployeePhotoFile instance.This API should be used when the EmployeePhotoFile instance has fields that requires multipart data.")
    public EmployeePhotoFile createEmployeePhotoFile(MultipartHttpServletRequest multipartHttpServletRequest) {
    	EmployeePhotoFile employeephotofile = WMMultipartUtils.toObject(multipartHttpServletRequest,EmployeePhotoFile.class,"Dynamohr126tabs");
        LOGGER.debug("Creating a new employeephotofile with information: {}" , employeephotofile);
        return employeePhotoFileService.create(employeephotofile);
    }

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setEmployeePhotoFileService(EmployeePhotoFileService service) {
		this.employeePhotoFileService = service;
	}
}

