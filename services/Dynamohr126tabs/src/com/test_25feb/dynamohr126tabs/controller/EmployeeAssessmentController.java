/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.AssessmentEmployeeDataService;
import com.test_25feb.dynamohr126tabs.service.EmployeeAssessmentService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class EmployeeAssessment.
 * @see com.test_25feb.dynamohr126tabs.EmployeeAssessment
 */

@RestController(value = "Dynamohr126tabs.EmployeeAssessmentController")
@Api(value = "/Dynamohr126tabs/EmployeeAssessment", description = "Exposes APIs to work with EmployeeAssessment resource.")
@RequestMapping("/Dynamohr126tabs/EmployeeAssessment")
public class EmployeeAssessmentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeAssessmentController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.EmployeeAssessmentService")
	private EmployeeAssessmentService employeeAssessmentService;


    @Autowired
    @Qualifier("Dynamohr126tabs.AssessmentEmployeeDataService")
    private AssessmentEmployeeDataService assessmentEmployeeDataService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of EmployeeAssessment instances matching the search criteria.")
	public Page<EmployeeAssessment> findEmployeeAssessments( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering EmployeeAssessments list");
		return employeeAssessmentService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of EmployeeAssessment instances.")
	public Page<EmployeeAssessment> getEmployeeAssessments(Pageable pageable) {
		LOGGER.debug("Rendering EmployeeAssessments list");
		return employeeAssessmentService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of EmployeeAssessment instances.")
	public Long countAllEmployeeAssessments() {
		LOGGER.debug("counting EmployeeAssessments");
		Long count = employeeAssessmentService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the EmployeeAssessment instance associated with the given id.")
    public EmployeeAssessment getEmployeeAssessment(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting EmployeeAssessment with id: {}" , id);
        EmployeeAssessment instance = employeeAssessmentService.findById(id);
        LOGGER.debug("EmployeeAssessment details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the EmployeeAssessment instance associated with the given id.")
    public boolean deleteEmployeeAssessment(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeAssessment with id: {}" , id);
        EmployeeAssessment deleted = employeeAssessmentService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the EmployeeAssessment instance associated with the given id.")
    public EmployeeAssessment editEmployeeAssessment(@PathVariable("id") Integer id, @RequestBody EmployeeAssessment instance) throws EntityNotFoundException {
        LOGGER.debug("Editing EmployeeAssessment with id: {}" , instance.getIdEmployeeAssessment());
        instance.setIdEmployeeAssessment(id);
        instance = employeeAssessmentService.update(instance);
        LOGGER.debug("EmployeeAssessment details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/assessmentEmployeeDatas", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the assessmentEmployeeDatas instance associated with the given id.")
     public Page<AssessmentEmployeeData> findAssociatedassessmentEmployeeDatas(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated assessmentEmployeeDatas");
        return assessmentEmployeeDataService.findAssociatedValues(id,"employeeAssessment","idEmployeeAssessment", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new EmployeeAssessment instance.")
	public EmployeeAssessment createEmployeeAssessment(@RequestBody EmployeeAssessment instance) {
		LOGGER.debug("Create EmployeeAssessment with information: {}" , instance);
		instance = employeeAssessmentService.create(instance);
		LOGGER.debug("Created EmployeeAssessment with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setEmployeeAssessmentService(EmployeeAssessmentService service) {
		this.employeeAssessmentService = service;
	}
}

