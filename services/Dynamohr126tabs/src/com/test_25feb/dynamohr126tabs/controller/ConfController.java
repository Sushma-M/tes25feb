/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.ConfService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class Conf.
 * @see com.test_25feb.dynamohr126tabs.Conf
 */

@RestController(value = "Dynamohr126tabs.ConfController")
@Api(value = "/Dynamohr126tabs/Conf", description = "Exposes APIs to work with Conf resource.")
@RequestMapping("/Dynamohr126tabs/Conf")
public class ConfController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ConfController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.ConfService")
	private ConfService confService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Conf instances matching the search criteria.")
	public Page<Conf> findConfs( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Confs list");
		return confService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of Conf instances.")
	public Page<Conf> getConfs(Pageable pageable) {
		LOGGER.debug("Rendering Confs list");
		return confService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Conf instances.")
	public Long countAllConfs() {
		LOGGER.debug("counting Confs");
		Long count = confService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Conf instance associated with the given id.")
    public Conf getConf(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Conf with id: {}" , id);
        Conf instance = confService.findById(id);
        LOGGER.debug("Conf details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Conf instance associated with the given id.")
    public boolean deleteConf(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Conf with id: {}" , id);
        Conf deleted = confService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Conf instance associated with the given id.")
    public Conf editConf(@PathVariable("id") Integer id, @RequestBody Conf instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Conf with id: {}" , instance.getIdConf());
        instance.setIdConf(id);
        instance = confService.update(instance);
        LOGGER.debug("Conf details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Conf instance.")
	public Conf createConf(@RequestBody Conf instance) {
		LOGGER.debug("Create Conf with information: {}" , instance);
		instance = confService.create(instance);
		LOGGER.debug("Created Conf with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setConfService(ConfService service) {
		this.confService = service;
	}
}

