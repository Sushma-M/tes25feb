/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.CommissionService;
import com.test_25feb.dynamohr126tabs.service.ListCommissionEmployeeService;
import com.test_25feb.dynamohr126tabs.service.ListCommissionPayrollService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class Commission.
 * @see com.test_25feb.dynamohr126tabs.Commission
 */

@RestController(value = "Dynamohr126tabs.CommissionController")
@Api(value = "/Dynamohr126tabs/Commission", description = "Exposes APIs to work with Commission resource.")
@RequestMapping("/Dynamohr126tabs/Commission")
public class CommissionController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CommissionController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.CommissionService")
	private CommissionService commissionService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ListCommissionPayrollService")
    private ListCommissionPayrollService listCommissionPayrollService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ListCommissionEmployeeService")
    private ListCommissionEmployeeService listCommissionEmployeeService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Commission instances matching the search criteria.")
	public Page<Commission> findCommissions( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Commissions list");
		return commissionService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of Commission instances.")
	public Page<Commission> getCommissions(Pageable pageable) {
		LOGGER.debug("Rendering Commissions list");
		return commissionService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Commission instances.")
	public Long countAllCommissions() {
		LOGGER.debug("counting Commissions");
		Long count = commissionService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Commission instance associated with the given id.")
    public Commission getCommission(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Commission with id: {}" , id);
        Commission instance = commissionService.findById(id);
        LOGGER.debug("Commission details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Commission instance associated with the given id.")
    public boolean deleteCommission(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Commission with id: {}" , id);
        Commission deleted = commissionService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Commission instance associated with the given id.")
    public Commission editCommission(@PathVariable("id") Integer id, @RequestBody Commission instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Commission with id: {}" , instance.getIdCommission());
        instance.setIdCommission(id);
        instance = commissionService.update(instance);
        LOGGER.debug("Commission details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/listCommissionEmployees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listCommissionEmployees instance associated with the given id.")
     public Page<ListCommissionEmployee> findAssociatedlistCommissionEmployees(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated listCommissionEmployees");
        return listCommissionEmployeeService.findAssociatedValues(id,"commission","idCommission", pageable);
   }

    @RequestMapping(value="/{id:.+}/listCommissionPayrolls", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listCommissionPayrolls instance associated with the given id.")
     public Page<ListCommissionPayroll> findAssociatedlistCommissionPayrolls(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated listCommissionPayrolls");
        return listCommissionPayrollService.findAssociatedValues(id,"commission","idCommission", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Commission instance.")
	public Commission createCommission(@RequestBody Commission instance) {
		LOGGER.debug("Create Commission with information: {}" , instance);
		instance = commissionService.create(instance);
		LOGGER.debug("Created Commission with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setCommissionService(CommissionService service) {
		this.commissionService = service;
	}
}

