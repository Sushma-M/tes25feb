/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.CompanyDepartmentService;
import com.test_25feb.dynamohr126tabs.service.WorkPositionService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class CompanyDepartment.
 * @see com.test_25feb.dynamohr126tabs.CompanyDepartment
 */

@RestController(value = "Dynamohr126tabs.CompanyDepartmentController")
@Api(value = "/Dynamohr126tabs/CompanyDepartment", description = "Exposes APIs to work with CompanyDepartment resource.")
@RequestMapping("/Dynamohr126tabs/CompanyDepartment")
public class CompanyDepartmentController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CompanyDepartmentController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.CompanyDepartmentService")
	private CompanyDepartmentService companyDepartmentService;


    @Autowired
    @Qualifier("Dynamohr126tabs.WorkPositionService")
    private WorkPositionService workPositionService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of CompanyDepartment instances matching the search criteria.")
	public Page<CompanyDepartment> findCompanyDepartments( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering CompanyDepartments list");
		return companyDepartmentService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of CompanyDepartment instances.")
	public Page<CompanyDepartment> getCompanyDepartments(Pageable pageable) {
		LOGGER.debug("Rendering CompanyDepartments list");
		return companyDepartmentService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of CompanyDepartment instances.")
	public Long countAllCompanyDepartments() {
		LOGGER.debug("counting CompanyDepartments");
		Long count = companyDepartmentService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the CompanyDepartment instance associated with the given id.")
    public CompanyDepartment getCompanyDepartment(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting CompanyDepartment with id: {}" , id);
        CompanyDepartment instance = companyDepartmentService.findById(id);
        LOGGER.debug("CompanyDepartment details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the CompanyDepartment instance associated with the given id.")
    public boolean deleteCompanyDepartment(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CompanyDepartment with id: {}" , id);
        CompanyDepartment deleted = companyDepartmentService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the CompanyDepartment instance associated with the given id.")
    public CompanyDepartment editCompanyDepartment(@PathVariable("id") Integer id, @RequestBody CompanyDepartment instance) throws EntityNotFoundException {
        LOGGER.debug("Editing CompanyDepartment with id: {}" , instance.getIdCompanyDepartment());
        instance.setIdCompanyDepartment(id);
        instance = companyDepartmentService.update(instance);
        LOGGER.debug("CompanyDepartment details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/companyDepartmentsForFkSuperiorDepartment", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the companyDepartmentsForFkSuperiorDepartment instance associated with the given id.")
     public Page<CompanyDepartment> findAssociatedcompanyDepartmentsForFkSuperiorDepartment(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated companyDepartmentsForFkSuperiorDepartment");
        return companyDepartmentService.findAssociatedValues(id,"companyDepartmentByFkSuperiorDepartment","idCompanyDepartment", pageable);
   }

    @RequestMapping(value="/{id:.+}/workPositions", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the workPositions instance associated with the given id.")
     public Page<WorkPosition> findAssociatedworkPositions(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated workPositions");
        return workPositionService.findAssociatedValues(id,"companyDepartment","idCompanyDepartment", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new CompanyDepartment instance.")
	public CompanyDepartment createCompanyDepartment(@RequestBody CompanyDepartment instance) {
		LOGGER.debug("Create CompanyDepartment with information: {}" , instance);
		instance = companyDepartmentService.create(instance);
		LOGGER.debug("Created CompanyDepartment with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setCompanyDepartmentService(CompanyDepartmentService service) {
		this.companyDepartmentService = service;
	}
}

