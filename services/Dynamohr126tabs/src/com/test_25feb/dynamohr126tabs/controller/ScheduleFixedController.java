/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.EmployeeSalaryService;
import com.test_25feb.dynamohr126tabs.service.ScheduleFixedDayService;
import com.test_25feb.dynamohr126tabs.service.ScheduleFixedService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class ScheduleFixed.
 * @see com.test_25feb.dynamohr126tabs.ScheduleFixed
 */

@RestController(value = "Dynamohr126tabs.ScheduleFixedController")
@Api(value = "/Dynamohr126tabs/ScheduleFixed", description = "Exposes APIs to work with ScheduleFixed resource.")
@RequestMapping("/Dynamohr126tabs/ScheduleFixed")
public class ScheduleFixedController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ScheduleFixedController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.ScheduleFixedService")
	private ScheduleFixedService scheduleFixedService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ScheduleFixedDayService")
    private ScheduleFixedDayService scheduleFixedDayService;


    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeSalaryService")
    private EmployeeSalaryService employeeSalaryService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ScheduleFixed instances matching the search criteria.")
	public Page<ScheduleFixed> findScheduleFixeds( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ScheduleFixeds list");
		return scheduleFixedService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of ScheduleFixed instances.")
	public Page<ScheduleFixed> getScheduleFixeds(Pageable pageable) {
		LOGGER.debug("Rendering ScheduleFixeds list");
		return scheduleFixedService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ScheduleFixed instances.")
	public Long countAllScheduleFixeds() {
		LOGGER.debug("counting ScheduleFixeds");
		Long count = scheduleFixedService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ScheduleFixed instance associated with the given id.")
    public ScheduleFixed getScheduleFixed(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ScheduleFixed with id: {}" , id);
        ScheduleFixed instance = scheduleFixedService.findById(id);
        LOGGER.debug("ScheduleFixed details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ScheduleFixed instance associated with the given id.")
    public boolean deleteScheduleFixed(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ScheduleFixed with id: {}" , id);
        ScheduleFixed deleted = scheduleFixedService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ScheduleFixed instance associated with the given id.")
    public ScheduleFixed editScheduleFixed(@PathVariable("id") Integer id, @RequestBody ScheduleFixed instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ScheduleFixed with id: {}" , instance.getIdScheduleFixed());
        instance.setIdScheduleFixed(id);
        instance = scheduleFixedService.update(instance);
        LOGGER.debug("ScheduleFixed details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/scheduleFixedDays", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the scheduleFixedDays instance associated with the given id.")
     public Page<ScheduleFixedDay> findAssociatedscheduleFixedDays(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated scheduleFixedDays");
        return scheduleFixedDayService.findAssociatedValues(id,"scheduleFixed","idScheduleFixed", pageable);
   }

    @RequestMapping(value="/{id:.+}/employeeSalaries", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the employeeSalaries instance associated with the given id.")
     public Page<EmployeeSalary> findAssociatedemployeeSalaries(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated employeeSalaries");
        return employeeSalaryService.findAssociatedValues(id,"scheduleFixed","idScheduleFixed", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ScheduleFixed instance.")
	public ScheduleFixed createScheduleFixed(@RequestBody ScheduleFixed instance) {
		LOGGER.debug("Create ScheduleFixed with information: {}" , instance);
		instance = scheduleFixedService.create(instance);
		LOGGER.debug("Created ScheduleFixed with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setScheduleFixedService(ScheduleFixedService service) {
		this.scheduleFixedService = service;
	}
}

