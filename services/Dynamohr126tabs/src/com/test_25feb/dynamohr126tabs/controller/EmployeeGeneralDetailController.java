/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.EmployeeGeneralDetailService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class EmployeeGeneralDetail.
 * @see com.test_25feb.dynamohr126tabs.EmployeeGeneralDetail
 */

@RestController(value = "Dynamohr126tabs.EmployeeGeneralDetailController")
@Api(value = "/Dynamohr126tabs/EmployeeGeneralDetail", description = "Exposes APIs to work with EmployeeGeneralDetail resource.")
@RequestMapping("/Dynamohr126tabs/EmployeeGeneralDetail")
public class EmployeeGeneralDetailController {

    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeGeneralDetailController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.EmployeeGeneralDetailService")
	private EmployeeGeneralDetailService employeeGeneralDetailService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of EmployeeGeneralDetail instances matching the search criteria.")
	public Page<EmployeeGeneralDetail> findEmployeeGeneralDetails( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering EmployeeGeneralDetails list");
		return employeeGeneralDetailService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of EmployeeGeneralDetail instances.")
	public Page<EmployeeGeneralDetail> getEmployeeGeneralDetails(Pageable pageable) {
		LOGGER.debug("Rendering EmployeeGeneralDetails list");
		return employeeGeneralDetailService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of EmployeeGeneralDetail instances.")
	public Long countAllEmployeeGeneralDetails() {
		LOGGER.debug("counting EmployeeGeneralDetails");
		Long count = employeeGeneralDetailService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the EmployeeGeneralDetail instance associated with the given id.")
    public EmployeeGeneralDetail getEmployeeGeneralDetail(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting EmployeeGeneralDetail with id: {}" , id);
        EmployeeGeneralDetail instance = employeeGeneralDetailService.findById(id);
        LOGGER.debug("EmployeeGeneralDetail details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the EmployeeGeneralDetail instance associated with the given id.")
    public boolean deleteEmployeeGeneralDetail(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting EmployeeGeneralDetail with id: {}" , id);
        EmployeeGeneralDetail deleted = employeeGeneralDetailService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the EmployeeGeneralDetail instance associated with the given id.")
    public EmployeeGeneralDetail editEmployeeGeneralDetail(@PathVariable("id") Integer id, @RequestBody EmployeeGeneralDetail instance) throws EntityNotFoundException {
        LOGGER.debug("Editing EmployeeGeneralDetail with id: {}" , instance.getIdEmployeeGeneralDetail());
        instance.setIdEmployeeGeneralDetail(id);
        instance = employeeGeneralDetailService.update(instance);
        LOGGER.debug("EmployeeGeneralDetail details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new EmployeeGeneralDetail instance.")
	public EmployeeGeneralDetail createEmployeeGeneralDetail(@RequestBody EmployeeGeneralDetail instance) {
		LOGGER.debug("Create EmployeeGeneralDetail with information: {}" , instance);
		instance = employeeGeneralDetailService.create(instance);
		LOGGER.debug("Created EmployeeGeneralDetail with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setEmployeeGeneralDetailService(EmployeeGeneralDetailService service) {
		this.employeeGeneralDetailService = service;
	}
}

