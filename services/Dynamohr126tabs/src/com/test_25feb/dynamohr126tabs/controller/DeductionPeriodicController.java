/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.DeductionPeriodicService;
import com.test_25feb.dynamohr126tabs.service.ListPeriodicDeductionEmployeeService;
import com.test_25feb.dynamohr126tabs.service.ListPeriodicDeductionPayrollService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class DeductionPeriodic.
 * @see com.test_25feb.dynamohr126tabs.DeductionPeriodic
 */

@RestController(value = "Dynamohr126tabs.DeductionPeriodicController")
@Api(value = "/Dynamohr126tabs/DeductionPeriodic", description = "Exposes APIs to work with DeductionPeriodic resource.")
@RequestMapping("/Dynamohr126tabs/DeductionPeriodic")
public class DeductionPeriodicController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DeductionPeriodicController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.DeductionPeriodicService")
	private DeductionPeriodicService deductionPeriodicService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ListPeriodicDeductionPayrollService")
    private ListPeriodicDeductionPayrollService listPeriodicDeductionPayrollService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ListPeriodicDeductionEmployeeService")
    private ListPeriodicDeductionEmployeeService listPeriodicDeductionEmployeeService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of DeductionPeriodic instances matching the search criteria.")
	public Page<DeductionPeriodic> findDeductionPeriodics( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering DeductionPeriodics list");
		return deductionPeriodicService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of DeductionPeriodic instances.")
	public Page<DeductionPeriodic> getDeductionPeriodics(Pageable pageable) {
		LOGGER.debug("Rendering DeductionPeriodics list");
		return deductionPeriodicService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of DeductionPeriodic instances.")
	public Long countAllDeductionPeriodics() {
		LOGGER.debug("counting DeductionPeriodics");
		Long count = deductionPeriodicService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the DeductionPeriodic instance associated with the given id.")
    public DeductionPeriodic getDeductionPeriodic(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting DeductionPeriodic with id: {}" , id);
        DeductionPeriodic instance = deductionPeriodicService.findById(id);
        LOGGER.debug("DeductionPeriodic details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the DeductionPeriodic instance associated with the given id.")
    public boolean deleteDeductionPeriodic(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DeductionPeriodic with id: {}" , id);
        DeductionPeriodic deleted = deductionPeriodicService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the DeductionPeriodic instance associated with the given id.")
    public DeductionPeriodic editDeductionPeriodic(@PathVariable("id") Integer id, @RequestBody DeductionPeriodic instance) throws EntityNotFoundException {
        LOGGER.debug("Editing DeductionPeriodic with id: {}" , instance.getIdDeductionPeriodic());
        instance.setIdDeductionPeriodic(id);
        instance = deductionPeriodicService.update(instance);
        LOGGER.debug("DeductionPeriodic details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/listPeriodicDeductionEmployees", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listPeriodicDeductionEmployees instance associated with the given id.")
     public Page<ListPeriodicDeductionEmployee> findAssociatedlistPeriodicDeductionEmployees(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated listPeriodicDeductionEmployees");
        return listPeriodicDeductionEmployeeService.findAssociatedValues(id,"deductionPeriodic","idDeductionPeriodic", pageable);
   }

    @RequestMapping(value="/{id:.+}/listPeriodicDeductionPayrolls", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listPeriodicDeductionPayrolls instance associated with the given id.")
     public Page<ListPeriodicDeductionPayroll> findAssociatedlistPeriodicDeductionPayrolls(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated listPeriodicDeductionPayrolls");
        return listPeriodicDeductionPayrollService.findAssociatedValues(id,"deductionPeriodic","idDeductionPeriodic", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new DeductionPeriodic instance.")
	public DeductionPeriodic createDeductionPeriodic(@RequestBody DeductionPeriodic instance) {
		LOGGER.debug("Create DeductionPeriodic with information: {}" , instance);
		instance = deductionPeriodicService.create(instance);
		LOGGER.debug("Created DeductionPeriodic with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setDeductionPeriodicService(DeductionPeriodicService service) {
		this.deductionPeriodicService = service;
	}
}

