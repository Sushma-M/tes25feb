/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.IncidenceEmployeeService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class IncidenceEmployee.
 * @see com.test_25feb.dynamohr126tabs.IncidenceEmployee
 */

@RestController(value = "Dynamohr126tabs.IncidenceEmployeeController")
@Api(value = "/Dynamohr126tabs/IncidenceEmployee", description = "Exposes APIs to work with IncidenceEmployee resource.")
@RequestMapping("/Dynamohr126tabs/IncidenceEmployee")
public class IncidenceEmployeeController {

    private static final Logger LOGGER = LoggerFactory.getLogger(IncidenceEmployeeController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.IncidenceEmployeeService")
	private IncidenceEmployeeService incidenceEmployeeService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of IncidenceEmployee instances matching the search criteria.")
	public Page<IncidenceEmployee> findIncidenceEmployees( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering IncidenceEmployees list");
		return incidenceEmployeeService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of IncidenceEmployee instances.")
	public Page<IncidenceEmployee> getIncidenceEmployees(Pageable pageable) {
		LOGGER.debug("Rendering IncidenceEmployees list");
		return incidenceEmployeeService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of IncidenceEmployee instances.")
	public Long countAllIncidenceEmployees() {
		LOGGER.debug("counting IncidenceEmployees");
		Long count = incidenceEmployeeService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the IncidenceEmployee instance associated with the given id.")
    public IncidenceEmployee getIncidenceEmployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting IncidenceEmployee with id: {}" , id);
        IncidenceEmployee instance = incidenceEmployeeService.findById(id);
        LOGGER.debug("IncidenceEmployee details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the IncidenceEmployee instance associated with the given id.")
    public boolean deleteIncidenceEmployee(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting IncidenceEmployee with id: {}" , id);
        IncidenceEmployee deleted = incidenceEmployeeService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the IncidenceEmployee instance associated with the given id.")
    public IncidenceEmployee editIncidenceEmployee(@PathVariable("id") Integer id, @RequestBody IncidenceEmployee instance) throws EntityNotFoundException {
        LOGGER.debug("Editing IncidenceEmployee with id: {}" , instance.getIdIncidenceEmployee());
        instance.setIdIncidenceEmployee(id);
        instance = incidenceEmployeeService.update(instance);
        LOGGER.debug("IncidenceEmployee details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new IncidenceEmployee instance.")
	public IncidenceEmployee createIncidenceEmployee(@RequestBody IncidenceEmployee instance) {
		LOGGER.debug("Create IncidenceEmployee with information: {}" , instance);
		instance = incidenceEmployeeService.create(instance);
		LOGGER.debug("Created IncidenceEmployee with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setIncidenceEmployeeService(IncidenceEmployeeService service) {
		this.incidenceEmployeeService = service;
	}
}

