/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.JustifiedTravelExpenseFileService;
import com.test_25feb.dynamohr126tabs.service.ListTravelExpenseDetailService;
import com.test_25feb.dynamohr126tabs.service.TravelExpenseService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class TravelExpense.
 * @see com.test_25feb.dynamohr126tabs.TravelExpense
 */

@RestController(value = "Dynamohr126tabs.TravelExpenseController")
@Api(value = "/Dynamohr126tabs/TravelExpense", description = "Exposes APIs to work with TravelExpense resource.")
@RequestMapping("/Dynamohr126tabs/TravelExpense")
public class TravelExpenseController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TravelExpenseController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.TravelExpenseService")
	private TravelExpenseService travelExpenseService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ListTravelExpenseDetailService")
    private ListTravelExpenseDetailService listTravelExpenseDetailService;


    @Autowired
    @Qualifier("Dynamohr126tabs.JustifiedTravelExpenseFileService")
    private JustifiedTravelExpenseFileService justifiedTravelExpenseFileService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TravelExpense instances matching the search criteria.")
	public Page<TravelExpense> findTravelExpenses( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TravelExpenses list");
		return travelExpenseService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of TravelExpense instances.")
	public Page<TravelExpense> getTravelExpenses(Pageable pageable) {
		LOGGER.debug("Rendering TravelExpenses list");
		return travelExpenseService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TravelExpense instances.")
	public Long countAllTravelExpenses() {
		LOGGER.debug("counting TravelExpenses");
		Long count = travelExpenseService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TravelExpense instance associated with the given id.")
    public TravelExpense getTravelExpense(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TravelExpense with id: {}" , id);
        TravelExpense instance = travelExpenseService.findById(id);
        LOGGER.debug("TravelExpense details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TravelExpense instance associated with the given id.")
    public boolean deleteTravelExpense(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TravelExpense with id: {}" , id);
        TravelExpense deleted = travelExpenseService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TravelExpense instance associated with the given id.")
    public TravelExpense editTravelExpense(@PathVariable("id") Integer id, @RequestBody TravelExpense instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TravelExpense with id: {}" , instance.getIdTravelExpense());
        instance.setIdTravelExpense(id);
        instance = travelExpenseService.update(instance);
        LOGGER.debug("TravelExpense details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/justifiedTravelExpenseFiles", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the justifiedTravelExpenseFiles instance associated with the given id.")
     public Page<JustifiedTravelExpenseFile> findAssociatedjustifiedTravelExpenseFiles(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated justifiedTravelExpenseFiles");
        return justifiedTravelExpenseFileService.findAssociatedValues(id,"travelExpense","idTravelExpense", pageable);
   }

    @RequestMapping(value="/{id:.+}/listTravelExpenseDetails", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listTravelExpenseDetails instance associated with the given id.")
     public Page<ListTravelExpenseDetail> findAssociatedlistTravelExpenseDetails(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated listTravelExpenseDetails");
        return listTravelExpenseDetailService.findAssociatedValues(id,"travelExpense","idTravelExpense", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TravelExpense instance.")
	public TravelExpense createTravelExpense(@RequestBody TravelExpense instance) {
		LOGGER.debug("Create TravelExpense with information: {}" , instance);
		instance = travelExpenseService.create(instance);
		LOGGER.debug("Created TravelExpense with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTravelExpenseService(TravelExpenseService service) {
		this.travelExpenseService = service;
	}
}

