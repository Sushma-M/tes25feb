/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.ListCelphoneDetailPayrollService;
import com.test_25feb.dynamohr126tabs.service.PayrollDetailService;
import com.test_25feb.dynamohr126tabs.service.PayrollService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class Payroll.
 * @see com.test_25feb.dynamohr126tabs.Payroll
 */

@RestController(value = "Dynamohr126tabs.PayrollController")
@Api(value = "/Dynamohr126tabs/Payroll", description = "Exposes APIs to work with Payroll resource.")
@RequestMapping("/Dynamohr126tabs/Payroll")
public class PayrollController {

    private static final Logger LOGGER = LoggerFactory.getLogger(PayrollController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.PayrollService")
	private PayrollService payrollService;


    @Autowired
    @Qualifier("Dynamohr126tabs.PayrollDetailService")
    private PayrollDetailService payrollDetailService;


    @Autowired
    @Qualifier("Dynamohr126tabs.ListCelphoneDetailPayrollService")
    private ListCelphoneDetailPayrollService listCelphoneDetailPayrollService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Payroll instances matching the search criteria.")
	public Page<Payroll> findPayrolls( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Payrolls list");
		return payrollService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of Payroll instances.")
	public Page<Payroll> getPayrolls(Pageable pageable) {
		LOGGER.debug("Rendering Payrolls list");
		return payrollService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Payroll instances.")
	public Long countAllPayrolls() {
		LOGGER.debug("counting Payrolls");
		Long count = payrollService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Payroll instance associated with the given id.")
    public Payroll getPayroll(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Payroll with id: {}" , id);
        Payroll instance = payrollService.findById(id);
        LOGGER.debug("Payroll details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Payroll instance associated with the given id.")
    public boolean deletePayroll(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Payroll with id: {}" , id);
        Payroll deleted = payrollService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Payroll instance associated with the given id.")
    public Payroll editPayroll(@PathVariable("id") Integer id, @RequestBody Payroll instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Payroll with id: {}" , instance.getIdPayroll());
        instance.setIdPayroll(id);
        instance = payrollService.update(instance);
        LOGGER.debug("Payroll details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/payrollDetails", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the payrollDetails instance associated with the given id.")
     public Page<PayrollDetail> findAssociatedpayrollDetails(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated payrollDetails");
        return payrollDetailService.findAssociatedValues(id,"payroll","idPayroll", pageable);
   }

    @RequestMapping(value="/{id:.+}/listCelphoneDetailPayrolls", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the listCelphoneDetailPayrolls instance associated with the given id.")
     public Page<ListCelphoneDetailPayroll> findAssociatedlistCelphoneDetailPayrolls(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated listCelphoneDetailPayrolls");
        return listCelphoneDetailPayrollService.findAssociatedValues(id,"payroll","idPayroll", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Payroll instance.")
	public Payroll createPayroll(@RequestBody Payroll instance) {
		LOGGER.debug("Create Payroll with information: {}" , instance);
		instance = payrollService.create(instance);
		LOGGER.debug("Created Payroll with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setPayrollService(PayrollService service) {
		this.payrollService = service;
	}
}

