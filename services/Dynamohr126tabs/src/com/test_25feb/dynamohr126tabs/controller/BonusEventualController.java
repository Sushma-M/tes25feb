/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.BonusEventualService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class BonusEventual.
 * @see com.test_25feb.dynamohr126tabs.BonusEventual
 */

@RestController(value = "Dynamohr126tabs.BonusEventualController")
@Api(value = "/Dynamohr126tabs/BonusEventual", description = "Exposes APIs to work with BonusEventual resource.")
@RequestMapping("/Dynamohr126tabs/BonusEventual")
public class BonusEventualController {

    private static final Logger LOGGER = LoggerFactory.getLogger(BonusEventualController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.BonusEventualService")
	private BonusEventualService bonusEventualService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of BonusEventual instances matching the search criteria.")
	public Page<BonusEventual> findBonusEventuals( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering BonusEventuals list");
		return bonusEventualService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of BonusEventual instances.")
	public Page<BonusEventual> getBonusEventuals(Pageable pageable) {
		LOGGER.debug("Rendering BonusEventuals list");
		return bonusEventualService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of BonusEventual instances.")
	public Long countAllBonusEventuals() {
		LOGGER.debug("counting BonusEventuals");
		Long count = bonusEventualService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the BonusEventual instance associated with the given id.")
    public BonusEventual getBonusEventual(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting BonusEventual with id: {}" , id);
        BonusEventual instance = bonusEventualService.findById(id);
        LOGGER.debug("BonusEventual details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the BonusEventual instance associated with the given id.")
    public boolean deleteBonusEventual(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting BonusEventual with id: {}" , id);
        BonusEventual deleted = bonusEventualService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the BonusEventual instance associated with the given id.")
    public BonusEventual editBonusEventual(@PathVariable("id") Integer id, @RequestBody BonusEventual instance) throws EntityNotFoundException {
        LOGGER.debug("Editing BonusEventual with id: {}" , instance.getIdBonusEventual());
        instance.setIdBonusEventual(id);
        instance = bonusEventualService.update(instance);
        LOGGER.debug("BonusEventual details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new BonusEventual instance.")
	public BonusEventual createBonusEventual(@RequestBody BonusEventual instance) {
		LOGGER.debug("Create BonusEventual with information: {}" , instance);
		instance = bonusEventualService.create(instance);
		LOGGER.debug("Created BonusEventual with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setBonusEventualService(BonusEventualService service) {
		this.bonusEventualService = service;
	}
}

