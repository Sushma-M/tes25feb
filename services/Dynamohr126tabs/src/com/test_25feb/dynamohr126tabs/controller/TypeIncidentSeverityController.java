/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.test_25feb.dynamohr126tabs.service.TypeIncidentService;
import com.test_25feb.dynamohr126tabs.service.TypeIncidentSeverityService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.test_25feb.dynamohr126tabs.*;
import com.test_25feb.dynamohr126tabs.service.*;


/**
 * Controller object for domain model class TypeIncidentSeverity.
 * @see com.test_25feb.dynamohr126tabs.TypeIncidentSeverity
 */

@RestController(value = "Dynamohr126tabs.TypeIncidentSeverityController")
@Api(value = "/Dynamohr126tabs/TypeIncidentSeverity", description = "Exposes APIs to work with TypeIncidentSeverity resource.")
@RequestMapping("/Dynamohr126tabs/TypeIncidentSeverity")
public class TypeIncidentSeverityController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TypeIncidentSeverityController.class);

	@Autowired
	@Qualifier("Dynamohr126tabs.TypeIncidentSeverityService")
	private TypeIncidentSeverityService typeIncidentSeverityService;


    @Autowired
    @Qualifier("Dynamohr126tabs.TypeIncidentService")
    private TypeIncidentService typeIncidentService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TypeIncidentSeverity instances matching the search criteria.")
	public Page<TypeIncidentSeverity> findTypeIncidentSeveritys( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TypeIncidentSeveritys list");
		return typeIncidentSeverityService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of TypeIncidentSeverity instances.")
	public Page<TypeIncidentSeverity> getTypeIncidentSeveritys(Pageable pageable) {
		LOGGER.debug("Rendering TypeIncidentSeveritys list");
		return typeIncidentSeverityService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TypeIncidentSeverity instances.")
	public Long countAllTypeIncidentSeveritys() {
		LOGGER.debug("counting TypeIncidentSeveritys");
		Long count = typeIncidentSeverityService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TypeIncidentSeverity instance associated with the given id.")
    public TypeIncidentSeverity getTypeIncidentSeverity(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TypeIncidentSeverity with id: {}" , id);
        TypeIncidentSeverity instance = typeIncidentSeverityService.findById(id);
        LOGGER.debug("TypeIncidentSeverity details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TypeIncidentSeverity instance associated with the given id.")
    public boolean deleteTypeIncidentSeverity(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TypeIncidentSeverity with id: {}" , id);
        TypeIncidentSeverity deleted = typeIncidentSeverityService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TypeIncidentSeverity instance associated with the given id.")
    public TypeIncidentSeverity editTypeIncidentSeverity(@PathVariable("id") Integer id, @RequestBody TypeIncidentSeverity instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TypeIncidentSeverity with id: {}" , instance.getIdTypeIncidentSeverity());
        instance.setIdTypeIncidentSeverity(id);
        instance = typeIncidentSeverityService.update(instance);
        LOGGER.debug("TypeIncidentSeverity details with id: {}" , instance);
        return instance;
    }


    @RequestMapping(value="/{id:.+}/typeIncidents", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the typeIncidents instance associated with the given id.")
     public Page<TypeIncident> findAssociatedtypeIncidents(Pageable pageable, @PathVariable("id") Integer id){
        LOGGER.debug("Fetching all associated typeIncidents");
        return typeIncidentService.findAssociatedValues(id,"typeIncidentSeverity","idTypeIncidentSeverity", pageable);
   }



	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TypeIncidentSeverity instance.")
	public TypeIncidentSeverity createTypeIncidentSeverity(@RequestBody TypeIncidentSeverity instance) {
		LOGGER.debug("Create TypeIncidentSeverity with information: {}" , instance);
		instance = typeIncidentSeverityService.create(instance);
		LOGGER.debug("Created TypeIncidentSeverity with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTypeIncidentSeverityService(TypeIncidentSeverityService service) {
		this.typeIncidentSeverityService = service;
	}
}

