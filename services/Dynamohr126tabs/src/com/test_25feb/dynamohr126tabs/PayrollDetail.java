/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.persistence.PrimaryKeyJoinColumn;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.annotations.Type;
import org.joda.time.LocalDateTime;


import java.util.Arrays;

import javax.persistence.Transient;
import javax.persistence.CascadeType;
import javax.persistence.UniqueConstraint;



/**
 * PayrollDetail generated by hbm2java
 */
@Entity
@Table(name="`payroll_detail`"
)

public class PayrollDetail  implements java.io.Serializable {

    private Integer idPayrollDetail;


@Type(type="DateTime")
    private LocalDateTime creationDate;
    private Boolean increasedIncomeOutflow;
    private Double basicSalary;
    private Double totalIncome;
    private Double totalExpenditures;
    private Double netSalary;
    private Integer modLocation;
    private Integer modUser;
    private Date modDate;
    private Set<ListCommissionPayroll> listCommissionPayrolls = new HashSet<ListCommissionPayroll>(0);
    private Set<ListPeriodicDeductionPayroll> listPeriodicDeductionPayrolls = new HashSet<ListPeriodicDeductionPayroll>(0);
    private Set<ListPeriodicBonusPayroll> listPeriodicBonusPayrolls = new HashSet<ListPeriodicBonusPayroll>(0);
    private Set<PaymentCheck> paymentChecks = new HashSet<PaymentCheck>(0);
    private Set<ListLoanDetailPayroll> listLoanDetailPayrolls = new HashSet<ListLoanDetailPayroll>(0);
    private Currency currency;
    private Employee employee;
    private Payroll payroll;
    private TypeEmployeePaymentMethod typeEmployeePaymentMethod;
    private TypeGenerationForm typeGenerationForm;
    private Set<BonusEventual> bonusEventuals = new HashSet<BonusEventual>(0);
    private Set<ListTravelExpenseDetail> listTravelExpenseDetails = new HashSet<ListTravelExpenseDetail>(0);
    private Set<DeductionEventual> deductionEventuals = new HashSet<DeductionEventual>(0);
    private Set<ListOvertimePayroll> listOvertimePayrolls = new HashSet<ListOvertimePayroll>(0);

    public PayrollDetail() {
    }


    @Id @GeneratedValue(strategy=IDENTITY)
    

    @Column(name="`id_payroll_detail`", nullable=false, precision=10)
    public Integer getIdPayrollDetail() {
        return this.idPayrollDetail;
    }
    
    public void setIdPayrollDetail(Integer idPayrollDetail) {
        this.idPayrollDetail = idPayrollDetail;
    }

    

    @Column(name="`creation_date`", nullable=false)
    public LocalDateTime getCreationDate() {
        return this.creationDate;
    }
    
    public void setCreationDate(LocalDateTime creationDate) {
        this.creationDate = creationDate;
    }

    

    @Column(name="`increased_income_outflow`", nullable=false)
    public Boolean getIncreasedIncomeOutflow() {
        return this.increasedIncomeOutflow;
    }
    
    public void setIncreasedIncomeOutflow(Boolean increasedIncomeOutflow) {
        this.increasedIncomeOutflow = increasedIncomeOutflow;
    }

    

    @Column(name="`basic_salary`", nullable=false, scale=4)
    public Double getBasicSalary() {
        return this.basicSalary;
    }
    
    public void setBasicSalary(Double basicSalary) {
        this.basicSalary = basicSalary;
    }

    

    @Column(name="`total_income`", nullable=false, scale=4)
    public Double getTotalIncome() {
        return this.totalIncome;
    }
    
    public void setTotalIncome(Double totalIncome) {
        this.totalIncome = totalIncome;
    }

    

    @Column(name="`total_expenditures`", nullable=false, scale=4)
    public Double getTotalExpenditures() {
        return this.totalExpenditures;
    }
    
    public void setTotalExpenditures(Double totalExpenditures) {
        this.totalExpenditures = totalExpenditures;
    }

    

    @Column(name="`net_salary`", nullable=false, scale=4)
    public Double getNetSalary() {
        return this.netSalary;
    }
    
    public void setNetSalary(Double netSalary) {
        this.netSalary = netSalary;
    }

    

    @Column(name="`mod_location`", nullable=false, precision=10)
    public Integer getModLocation() {
        return this.modLocation;
    }
    
    public void setModLocation(Integer modLocation) {
        this.modLocation = modLocation;
    }

    

    @Column(name="`mod_user`", nullable=false, precision=10)
    public Integer getModUser() {
        return this.modUser;
    }
    
    public void setModUser(Integer modUser) {
        this.modUser = modUser;
    }

    @Temporal(TemporalType.TIMESTAMP)

    @Column(name="`mod_date`", nullable=false, length=19)
    public Date getModDate() {
        return this.modDate;
    }
    
    public void setModDate(Date modDate) {
        this.modDate = modDate;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="payrollDetail")
    public Set<ListCommissionPayroll> getListCommissionPayrolls() {
        return this.listCommissionPayrolls;
    }
    
    public void setListCommissionPayrolls(Set<ListCommissionPayroll> listCommissionPayrolls) {
        this.listCommissionPayrolls = listCommissionPayrolls;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="payrollDetail")
    public Set<ListPeriodicDeductionPayroll> getListPeriodicDeductionPayrolls() {
        return this.listPeriodicDeductionPayrolls;
    }
    
    public void setListPeriodicDeductionPayrolls(Set<ListPeriodicDeductionPayroll> listPeriodicDeductionPayrolls) {
        this.listPeriodicDeductionPayrolls = listPeriodicDeductionPayrolls;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="payrollDetail")
    public Set<ListPeriodicBonusPayroll> getListPeriodicBonusPayrolls() {
        return this.listPeriodicBonusPayrolls;
    }
    
    public void setListPeriodicBonusPayrolls(Set<ListPeriodicBonusPayroll> listPeriodicBonusPayrolls) {
        this.listPeriodicBonusPayrolls = listPeriodicBonusPayrolls;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="payrollDetail")
    public Set<PaymentCheck> getPaymentChecks() {
        return this.paymentChecks;
    }
    
    public void setPaymentChecks(Set<PaymentCheck> paymentChecks) {
        this.paymentChecks = paymentChecks;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="payrollDetail")
    public Set<ListLoanDetailPayroll> getListLoanDetailPayrolls() {
        return this.listLoanDetailPayrolls;
    }
    
    public void setListLoanDetailPayrolls(Set<ListLoanDetailPayroll> listLoanDetailPayrolls) {
        this.listLoanDetailPayrolls = listLoanDetailPayrolls;
    }

    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="`fk_currency`", nullable=false)
    public Currency getCurrency() {
        return this.currency;
    }
    
    public void setCurrency(Currency currency) {
        this.currency = currency;
    }

    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="`fk_employee`", nullable=false)
    public Employee getEmployee() {
        return this.employee;
    }
    
    public void setEmployee(Employee employee) {
        this.employee = employee;
    }

    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="`fk_payroll`", nullable=false)
    public Payroll getPayroll() {
        return this.payroll;
    }
    
    public void setPayroll(Payroll payroll) {
        this.payroll = payroll;
    }

    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="`fk_type_employee_payment_method`", nullable=false)
    public TypeEmployeePaymentMethod getTypeEmployeePaymentMethod() {
        return this.typeEmployeePaymentMethod;
    }
    
    public void setTypeEmployeePaymentMethod(TypeEmployeePaymentMethod typeEmployeePaymentMethod) {
        this.typeEmployeePaymentMethod = typeEmployeePaymentMethod;
    }

    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="`fk_type_generation_form`", nullable=false)
    public TypeGenerationForm getTypeGenerationForm() {
        return this.typeGenerationForm;
    }
    
    public void setTypeGenerationForm(TypeGenerationForm typeGenerationForm) {
        this.typeGenerationForm = typeGenerationForm;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="payrollDetail")
    public Set<BonusEventual> getBonusEventuals() {
        return this.bonusEventuals;
    }
    
    public void setBonusEventuals(Set<BonusEventual> bonusEventuals) {
        this.bonusEventuals = bonusEventuals;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="payrollDetail")
    public Set<ListTravelExpenseDetail> getListTravelExpenseDetails() {
        return this.listTravelExpenseDetails;
    }
    
    public void setListTravelExpenseDetails(Set<ListTravelExpenseDetail> listTravelExpenseDetails) {
        this.listTravelExpenseDetails = listTravelExpenseDetails;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="payrollDetail")
    public Set<DeductionEventual> getDeductionEventuals() {
        return this.deductionEventuals;
    }
    
    public void setDeductionEventuals(Set<DeductionEventual> deductionEventuals) {
        this.deductionEventuals = deductionEventuals;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="payrollDetail")
    public Set<ListOvertimePayroll> getListOvertimePayrolls() {
        return this.listOvertimePayrolls;
    }
    
    public void setListOvertimePayrolls(Set<ListOvertimePayroll> listOvertimePayrolls) {
        this.listOvertimePayrolls = listOvertimePayrolls;
    }





    public boolean equals(Object o) {
         if (this == o) return true;
		 if ( (o == null )) return false;
		 if ( !(o instanceof PayrollDetail) )
		    return false;

		 PayrollDetail that = (PayrollDetail) o;

		 return ( (this.getIdPayrollDetail()==that.getIdPayrollDetail()) || ( this.getIdPayrollDetail()!=null && that.getIdPayrollDetail()!=null && this.getIdPayrollDetail().equals(that.getIdPayrollDetail()) ) );
    }

    public int hashCode() {
         int result = 17;

         result = 37 * result + ( getIdPayrollDetail() == null ? 0 : this.getIdPayrollDetail().hashCode() );

         return result;
    }


}

