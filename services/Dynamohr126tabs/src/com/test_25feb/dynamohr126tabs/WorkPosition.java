/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.persistence.PrimaryKeyJoinColumn;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;


import java.util.Arrays;

import javax.persistence.Transient;
import javax.persistence.CascadeType;
import javax.persistence.UniqueConstraint;



/**
 * WorkPosition generated by hbm2java
 */
@Entity
@Table(name="`work_position`"
)

public class WorkPosition  implements java.io.Serializable {

    private Integer idWorkPosition;
    private String postName;
    private String jobDescription;
    private String descripcionFuncionesContrato;
    private String terminosContrato;
    private Double rangoPagoMin;
    private Double rangoPagoMax;
    private String observation;
    private Integer modLocation;
    private Integer modUser;
    private Date modDate;
    private Set<ListEmployeePosition> listEmployeePositions = new HashSet<ListEmployeePosition>(0);
    private Set<WorkPositionRequiement> workPositionRequiements = new HashSet<WorkPositionRequiement>(0);
    private Set<WorkPositionPerformanceIndicator> workPositionPerformanceIndicators = new HashSet<WorkPositionPerformanceIndicator>(0);
    private CompanyDepartment companyDepartment;
    private WorkPosition workPositionByFkSuperiorPosition;
    private Set<WorkPosition> workPositionsForFkSuperiorPosition = new HashSet<WorkPosition>(0);
    private Set<WorkPositionVacant> workPositionVacants = new HashSet<WorkPositionVacant>(0);
    private Set<EmployeeAssessment> employeeAssessments = new HashSet<EmployeeAssessment>(0);
    private Set<WorkPositionResponsibility> workPositionResponsibilities = new HashSet<WorkPositionResponsibility>(0);
    private Set<WorkPositionScope> workPositionScopes = new HashSet<WorkPositionScope>(0);

    public WorkPosition() {
    }


    @Id @GeneratedValue(strategy=IDENTITY)
    

    @Column(name="`id_work_position`", nullable=false, precision=10)
    public Integer getIdWorkPosition() {
        return this.idWorkPosition;
    }
    
    public void setIdWorkPosition(Integer idWorkPosition) {
        this.idWorkPosition = idWorkPosition;
    }

    

    @Column(name="`post_name`", nullable=false, length=100)
    public String getPostName() {
        return this.postName;
    }
    
    public void setPostName(String postName) {
        this.postName = postName;
    }

    

    @Column(name="`job_description`", nullable=false, length=1024)
    public String getJobDescription() {
        return this.jobDescription;
    }
    
    public void setJobDescription(String jobDescription) {
        this.jobDescription = jobDescription;
    }

    

    @Column(name="`descripcion_funciones_contrato`", nullable=false, length=4096)
    public String getDescripcionFuncionesContrato() {
        return this.descripcionFuncionesContrato;
    }
    
    public void setDescripcionFuncionesContrato(String descripcionFuncionesContrato) {
        this.descripcionFuncionesContrato = descripcionFuncionesContrato;
    }

    

    @Column(name="`terminos_contrato`", nullable=false, length=4096)
    public String getTerminosContrato() {
        return this.terminosContrato;
    }
    
    public void setTerminosContrato(String terminosContrato) {
        this.terminosContrato = terminosContrato;
    }

    

    @Column(name="`rango_pago_min`", nullable=false, precision=11)
    public Double getRangoPagoMin() {
        return this.rangoPagoMin;
    }
    
    public void setRangoPagoMin(Double rangoPagoMin) {
        this.rangoPagoMin = rangoPagoMin;
    }

    

    @Column(name="`rango_pago_max`", nullable=false, precision=11)
    public Double getRangoPagoMax() {
        return this.rangoPagoMax;
    }
    
    public void setRangoPagoMax(Double rangoPagoMax) {
        this.rangoPagoMax = rangoPagoMax;
    }

    

    @Column(name="`observation`")
    public String getObservation() {
        return this.observation;
    }
    
    public void setObservation(String observation) {
        this.observation = observation;
    }

    

    @Column(name="`mod_location`", nullable=false, precision=10)
    public Integer getModLocation() {
        return this.modLocation;
    }
    
    public void setModLocation(Integer modLocation) {
        this.modLocation = modLocation;
    }

    

    @Column(name="`mod_user`", nullable=false, precision=10)
    public Integer getModUser() {
        return this.modUser;
    }
    
    public void setModUser(Integer modUser) {
        this.modUser = modUser;
    }

    @Temporal(TemporalType.TIMESTAMP)

    @Column(name="`mod_date`", nullable=false, length=19)
    public Date getModDate() {
        return this.modDate;
    }
    
    public void setModDate(Date modDate) {
        this.modDate = modDate;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="workPosition")
    public Set<ListEmployeePosition> getListEmployeePositions() {
        return this.listEmployeePositions;
    }
    
    public void setListEmployeePositions(Set<ListEmployeePosition> listEmployeePositions) {
        this.listEmployeePositions = listEmployeePositions;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="workPosition")
    public Set<WorkPositionRequiement> getWorkPositionRequiements() {
        return this.workPositionRequiements;
    }
    
    public void setWorkPositionRequiements(Set<WorkPositionRequiement> workPositionRequiements) {
        this.workPositionRequiements = workPositionRequiements;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="workPosition")
    public Set<WorkPositionPerformanceIndicator> getWorkPositionPerformanceIndicators() {
        return this.workPositionPerformanceIndicators;
    }
    
    public void setWorkPositionPerformanceIndicators(Set<WorkPositionPerformanceIndicator> workPositionPerformanceIndicators) {
        this.workPositionPerformanceIndicators = workPositionPerformanceIndicators;
    }

    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="`fk_company_department`", nullable=false)
    public CompanyDepartment getCompanyDepartment() {
        return this.companyDepartment;
    }
    
    public void setCompanyDepartment(CompanyDepartment companyDepartment) {
        this.companyDepartment = companyDepartment;
    }

    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="`fk_superior_position`")
    @JsonIgnoreProperties({"workPositionByFkSuperiorPosition", "workPositionsForFkSuperiorPosition"})
    public WorkPosition getWorkPositionByFkSuperiorPosition() {
        return this.workPositionByFkSuperiorPosition;
    }
    
    public void setWorkPositionByFkSuperiorPosition(WorkPosition workPositionByFkSuperiorPosition) {
        this.workPositionByFkSuperiorPosition = workPositionByFkSuperiorPosition;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="workPositionByFkSuperiorPosition")
    public Set<WorkPosition> getWorkPositionsForFkSuperiorPosition() {
        return this.workPositionsForFkSuperiorPosition;
    }
    
    public void setWorkPositionsForFkSuperiorPosition(Set<WorkPosition> workPositionsForFkSuperiorPosition) {
        this.workPositionsForFkSuperiorPosition = workPositionsForFkSuperiorPosition;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="workPosition")
    public Set<WorkPositionVacant> getWorkPositionVacants() {
        return this.workPositionVacants;
    }
    
    public void setWorkPositionVacants(Set<WorkPositionVacant> workPositionVacants) {
        this.workPositionVacants = workPositionVacants;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="workPosition")
    public Set<EmployeeAssessment> getEmployeeAssessments() {
        return this.employeeAssessments;
    }
    
    public void setEmployeeAssessments(Set<EmployeeAssessment> employeeAssessments) {
        this.employeeAssessments = employeeAssessments;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="workPosition")
    public Set<WorkPositionResponsibility> getWorkPositionResponsibilities() {
        return this.workPositionResponsibilities;
    }
    
    public void setWorkPositionResponsibilities(Set<WorkPositionResponsibility> workPositionResponsibilities) {
        this.workPositionResponsibilities = workPositionResponsibilities;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="workPosition")
    public Set<WorkPositionScope> getWorkPositionScopes() {
        return this.workPositionScopes;
    }
    
    public void setWorkPositionScopes(Set<WorkPositionScope> workPositionScopes) {
        this.workPositionScopes = workPositionScopes;
    }





    public boolean equals(Object o) {
         if (this == o) return true;
		 if ( (o == null )) return false;
		 if ( !(o instanceof WorkPosition) )
		    return false;

		 WorkPosition that = (WorkPosition) o;

		 return ( (this.getIdWorkPosition()==that.getIdWorkPosition()) || ( this.getIdWorkPosition()!=null && that.getIdWorkPosition()!=null && this.getIdWorkPosition().equals(that.getIdWorkPosition()) ) );
    }

    public int hashCode() {
         int result = 17;

         result = 37 * result + ( getIdWorkPosition() == null ? 0 : this.getIdWorkPosition().hashCode() );

         return result;
    }


}

