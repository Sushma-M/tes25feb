/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.persistence.PrimaryKeyJoinColumn;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.annotations.Type;
import org.joda.time.LocalDateTime;


import java.util.Arrays;

import javax.persistence.Transient;
import javax.persistence.CascadeType;
import javax.persistence.UniqueConstraint;



/**
 * ListOvertimePayroll generated by hbm2java
 */
@Entity
@Table(name="`list_overtime_payroll`"
)

public class ListOvertimePayroll  implements java.io.Serializable {

    private Integer idListOvertimePayroll;


@Type(type="DateTime")
    private LocalDateTime startTime;


@Type(type="DateTime")
    private LocalDateTime endTime;
    private Double value_;
    private String observation;
    private Integer modLocation;
    private Integer modUser;
    private Date modDate;
    private Set<OverTimeSegmentPayroll> overTimeSegmentPayrolls = new HashSet<OverTimeSegmentPayroll>(0);
    private Currency currency;
    private OverTimeEmployee overTimeEmployee;
    private PayrollDetail payrollDetail;

    public ListOvertimePayroll() {
    }


    @Id @GeneratedValue(strategy=IDENTITY)
    

    @Column(name="`id_list_overtime_payroll`", nullable=false, precision=10)
    public Integer getIdListOvertimePayroll() {
        return this.idListOvertimePayroll;
    }
    
    public void setIdListOvertimePayroll(Integer idListOvertimePayroll) {
        this.idListOvertimePayroll = idListOvertimePayroll;
    }

    

    @Column(name="`start_time`", nullable=false)
    public LocalDateTime getStartTime() {
        return this.startTime;
    }
    
    public void setStartTime(LocalDateTime startTime) {
        this.startTime = startTime;
    }

    

    @Column(name="`end_time`", nullable=false)
    public LocalDateTime getEndTime() {
        return this.endTime;
    }
    
    public void setEndTime(LocalDateTime endTime) {
        this.endTime = endTime;
    }

    

    @Column(name="`value?`", nullable=false, scale=4)
    public Double getValue_() {
        return this.value_;
    }
    
    public void setValue_(Double value_) {
        this.value_ = value_;
    }

    

    @Column(name="`observation`", length=100)
    public String getObservation() {
        return this.observation;
    }
    
    public void setObservation(String observation) {
        this.observation = observation;
    }

    

    @Column(name="`mod_location`", nullable=false, precision=10)
    public Integer getModLocation() {
        return this.modLocation;
    }
    
    public void setModLocation(Integer modLocation) {
        this.modLocation = modLocation;
    }

    

    @Column(name="`mod_user`", nullable=false, precision=10)
    public Integer getModUser() {
        return this.modUser;
    }
    
    public void setModUser(Integer modUser) {
        this.modUser = modUser;
    }

    @Temporal(TemporalType.TIMESTAMP)

    @Column(name="`mod_date`", nullable=false, length=19)
    public Date getModDate() {
        return this.modDate;
    }
    
    public void setModDate(Date modDate) {
        this.modDate = modDate;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="listOvertimePayroll")
    public Set<OverTimeSegmentPayroll> getOverTimeSegmentPayrolls() {
        return this.overTimeSegmentPayrolls;
    }
    
    public void setOverTimeSegmentPayrolls(Set<OverTimeSegmentPayroll> overTimeSegmentPayrolls) {
        this.overTimeSegmentPayrolls = overTimeSegmentPayrolls;
    }

    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="`fk_currency`", nullable=false)
    public Currency getCurrency() {
        return this.currency;
    }
    
    public void setCurrency(Currency currency) {
        this.currency = currency;
    }

    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="`fk_over_time_employee`", nullable=false)
    public OverTimeEmployee getOverTimeEmployee() {
        return this.overTimeEmployee;
    }
    
    public void setOverTimeEmployee(OverTimeEmployee overTimeEmployee) {
        this.overTimeEmployee = overTimeEmployee;
    }

    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="`fk_payroll_detail`", nullable=false)
    public PayrollDetail getPayrollDetail() {
        return this.payrollDetail;
    }
    
    public void setPayrollDetail(PayrollDetail payrollDetail) {
        this.payrollDetail = payrollDetail;
    }





    public boolean equals(Object o) {
         if (this == o) return true;
		 if ( (o == null )) return false;
		 if ( !(o instanceof ListOvertimePayroll) )
		    return false;

		 ListOvertimePayroll that = (ListOvertimePayroll) o;

		 return ( (this.getIdListOvertimePayroll()==that.getIdListOvertimePayroll()) || ( this.getIdListOvertimePayroll()!=null && that.getIdListOvertimePayroll()!=null && this.getIdListOvertimePayroll().equals(that.getIdListOvertimePayroll()) ) );
    }

    public int hashCode() {
         int result = 17;

         result = 37 * result + ( getIdListOvertimePayroll() == null ? 0 : this.getIdListOvertimePayroll().hashCode() );

         return result;
    }


}

