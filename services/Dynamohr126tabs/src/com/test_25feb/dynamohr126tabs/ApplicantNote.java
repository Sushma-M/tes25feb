/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.persistence.PrimaryKeyJoinColumn;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.annotations.Type;
import org.joda.time.LocalDateTime;


import java.util.Arrays;

import javax.persistence.Transient;
import javax.persistence.CascadeType;
import javax.persistence.UniqueConstraint;



/**
 * ApplicantNote generated by hbm2java
 */
@Entity
@Table(name="`applicant_note`"
)

public class ApplicantNote  implements java.io.Serializable {

    private Integer idApplicantNote;


@Type(type="DateTime")
    private LocalDateTime noteDate;
    private String observation;
    private Integer modLocation;
    private Integer modUser;
    private Date modDate;
    private ApplicantToPosition applicantToPosition;
    private User user;

    public ApplicantNote() {
    }


    @Id @GeneratedValue(strategy=IDENTITY)
    

    @Column(name="`id_applicant_note`", nullable=false, precision=10)
    public Integer getIdApplicantNote() {
        return this.idApplicantNote;
    }
    
    public void setIdApplicantNote(Integer idApplicantNote) {
        this.idApplicantNote = idApplicantNote;
    }

    

    @Column(name="`note_date`", nullable=false)
    public LocalDateTime getNoteDate() {
        return this.noteDate;
    }
    
    public void setNoteDate(LocalDateTime noteDate) {
        this.noteDate = noteDate;
    }

    

    @Column(name="`observation`", nullable=false)
    public String getObservation() {
        return this.observation;
    }
    
    public void setObservation(String observation) {
        this.observation = observation;
    }

    

    @Column(name="`mod_location`", nullable=false, precision=10)
    public Integer getModLocation() {
        return this.modLocation;
    }
    
    public void setModLocation(Integer modLocation) {
        this.modLocation = modLocation;
    }

    

    @Column(name="`mod_user`", nullable=false, precision=10)
    public Integer getModUser() {
        return this.modUser;
    }
    
    public void setModUser(Integer modUser) {
        this.modUser = modUser;
    }

    @Temporal(TemporalType.TIMESTAMP)

    @Column(name="`mod_date`", nullable=false, length=19)
    public Date getModDate() {
        return this.modDate;
    }
    
    public void setModDate(Date modDate) {
        this.modDate = modDate;
    }

    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="`fk_applicant_to_positionp`", nullable=false)
    public ApplicantToPosition getApplicantToPosition() {
        return this.applicantToPosition;
    }
    
    public void setApplicantToPosition(ApplicantToPosition applicantToPosition) {
        this.applicantToPosition = applicantToPosition;
    }

    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="`fk_user_note_auther`", nullable=false)
    public User getUser() {
        return this.user;
    }
    
    public void setUser(User user) {
        this.user = user;
    }





    public boolean equals(Object o) {
         if (this == o) return true;
		 if ( (o == null )) return false;
		 if ( !(o instanceof ApplicantNote) )
		    return false;

		 ApplicantNote that = (ApplicantNote) o;

		 return ( (this.getIdApplicantNote()==that.getIdApplicantNote()) || ( this.getIdApplicantNote()!=null && that.getIdApplicantNote()!=null && this.getIdApplicantNote().equals(that.getIdApplicantNote()) ) );
    }

    public int hashCode() {
         int result = 17;

         result = 37 * result + ( getIdApplicantNote() == null ? 0 : this.getIdApplicantNote().hashCode() );

         return result;
    }


}

