/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.persistence.PrimaryKeyJoinColumn;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;


import java.util.Arrays;

import javax.persistence.Transient;
import javax.persistence.CascadeType;
import javax.persistence.UniqueConstraint;



/**
 * User generated by hbm2java
 */
@Entity
@Table(name="`user`"
)

public class User  implements java.io.Serializable {

    private Integer idUser;
    private String userFullname;
    private String login;
    private String password;
    private String identityNumber;
    private Integer modLocation;
    private Integer modUser;
    private Date modDate;
    private Set<ApplicantNote> applicantNotes = new HashSet<ApplicantNote>(0);
    private Set<EmployeeMessage> employeeMessagesForFkUserSends = new HashSet<EmployeeMessage>(0);
    private Set<EmployeeMessage> employeeMessagesForFkUserReceive = new HashSet<EmployeeMessage>(0);
    private Set<PaymentCheck> paymentChecks = new HashSet<PaymentCheck>(0);
    private Country country;
    private Role role;
    private Set<Log> logs = new HashSet<Log>(0);
    private Set<Payroll> payrollsForFkUserConfirmation = new HashSet<Payroll>(0);
    private Set<Payroll> payrollsForFkUserElaborate = new HashSet<Payroll>(0);
    private Set<Payroll> payrollsForFkUserPrints = new HashSet<Payroll>(0);
    private Set<EmployeeAssessment> employeeAssessments = new HashSet<EmployeeAssessment>(0);

    public User() {
    }


    @Id @GeneratedValue(strategy=IDENTITY)
    

    @Column(name="`id_user`", nullable=false, precision=10)
    public Integer getIdUser() {
        return this.idUser;
    }
    
    public void setIdUser(Integer idUser) {
        this.idUser = idUser;
    }

    

    @Column(name="`user_fullname`", nullable=false, length=150)
    public String getUserFullname() {
        return this.userFullname;
    }
    
    public void setUserFullname(String userFullname) {
        this.userFullname = userFullname;
    }

    

    @Column(name="`login`", nullable=false, length=50)
    public String getLogin() {
        return this.login;
    }
    
    public void setLogin(String login) {
        this.login = login;
    }

    

    @Column(name="`password`", nullable=false, length=64)
    public String getPassword() {
        return this.password;
    }
    
    public void setPassword(String password) {
        this.password = password;
    }

    

    @Column(name="`identity_number`", nullable=false, length=25)
    public String getIdentityNumber() {
        return this.identityNumber;
    }
    
    public void setIdentityNumber(String identityNumber) {
        this.identityNumber = identityNumber;
    }

    

    @Column(name="`mod_location`", nullable=false, precision=10)
    public Integer getModLocation() {
        return this.modLocation;
    }
    
    public void setModLocation(Integer modLocation) {
        this.modLocation = modLocation;
    }

    

    @Column(name="`mod_user`", nullable=false, precision=10)
    public Integer getModUser() {
        return this.modUser;
    }
    
    public void setModUser(Integer modUser) {
        this.modUser = modUser;
    }

    @Temporal(TemporalType.TIMESTAMP)

    @Column(name="`mod_date`", nullable=false, length=19)
    public Date getModDate() {
        return this.modDate;
    }
    
    public void setModDate(Date modDate) {
        this.modDate = modDate;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="user")
    public Set<ApplicantNote> getApplicantNotes() {
        return this.applicantNotes;
    }
    
    public void setApplicantNotes(Set<ApplicantNote> applicantNotes) {
        this.applicantNotes = applicantNotes;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="userByFkUserSends")
    public Set<EmployeeMessage> getEmployeeMessagesForFkUserSends() {
        return this.employeeMessagesForFkUserSends;
    }
    
    public void setEmployeeMessagesForFkUserSends(Set<EmployeeMessage> employeeMessagesForFkUserSends) {
        this.employeeMessagesForFkUserSends = employeeMessagesForFkUserSends;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="userByFkUserReceive")
    public Set<EmployeeMessage> getEmployeeMessagesForFkUserReceive() {
        return this.employeeMessagesForFkUserReceive;
    }
    
    public void setEmployeeMessagesForFkUserReceive(Set<EmployeeMessage> employeeMessagesForFkUserReceive) {
        this.employeeMessagesForFkUserReceive = employeeMessagesForFkUserReceive;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="user")
    public Set<PaymentCheck> getPaymentChecks() {
        return this.paymentChecks;
    }
    
    public void setPaymentChecks(Set<PaymentCheck> paymentChecks) {
        this.paymentChecks = paymentChecks;
    }

    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="`fk_nationality`", nullable=false)
    public Country getCountry() {
        return this.country;
    }
    
    public void setCountry(Country country) {
        this.country = country;
    }

    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="`fk_role`", nullable=false)
    public Role getRole() {
        return this.role;
    }
    
    public void setRole(Role role) {
        this.role = role;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="user")
    public Set<Log> getLogs() {
        return this.logs;
    }
    
    public void setLogs(Set<Log> logs) {
        this.logs = logs;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="userByFkUserConfirmation")
    public Set<Payroll> getPayrollsForFkUserConfirmation() {
        return this.payrollsForFkUserConfirmation;
    }
    
    public void setPayrollsForFkUserConfirmation(Set<Payroll> payrollsForFkUserConfirmation) {
        this.payrollsForFkUserConfirmation = payrollsForFkUserConfirmation;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="userByFkUserElaborate")
    public Set<Payroll> getPayrollsForFkUserElaborate() {
        return this.payrollsForFkUserElaborate;
    }
    
    public void setPayrollsForFkUserElaborate(Set<Payroll> payrollsForFkUserElaborate) {
        this.payrollsForFkUserElaborate = payrollsForFkUserElaborate;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="userByFkUserPrints")
    public Set<Payroll> getPayrollsForFkUserPrints() {
        return this.payrollsForFkUserPrints;
    }
    
    public void setPayrollsForFkUserPrints(Set<Payroll> payrollsForFkUserPrints) {
        this.payrollsForFkUserPrints = payrollsForFkUserPrints;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="user")
    public Set<EmployeeAssessment> getEmployeeAssessments() {
        return this.employeeAssessments;
    }
    
    public void setEmployeeAssessments(Set<EmployeeAssessment> employeeAssessments) {
        this.employeeAssessments = employeeAssessments;
    }





    public boolean equals(Object o) {
         if (this == o) return true;
		 if ( (o == null )) return false;
		 if ( !(o instanceof User) )
		    return false;

		 User that = (User) o;

		 return ( (this.getIdUser()==that.getIdUser()) || ( this.getIdUser()!=null && that.getIdUser()!=null && this.getIdUser().equals(that.getIdUser()) ) );
    }

    public int hashCode() {
         int result = 17;

         result = 37 * result + ( getIdUser() == null ? 0 : this.getIdUser().hashCode() );

         return result;
    }


}

