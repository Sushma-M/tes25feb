/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class WorkPosition.
 * @see com.test_25feb.dynamohr126tabs.WorkPosition
 */
@Service("Dynamohr126tabs.WorkPositionService")
public class WorkPositionServiceImpl implements WorkPositionService {


    private static final Logger LOGGER = LoggerFactory.getLogger(WorkPositionServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.WorkPositionDao")
    private WMGenericDao<WorkPosition, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<WorkPosition, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<WorkPosition> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public WorkPosition create(WorkPosition workposition) {
        LOGGER.debug("Creating a new workposition with information: {}" , workposition);
        return this.wmGenericDao.create(workposition);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public WorkPosition delete(Integer workpositionId) throws EntityNotFoundException {
        LOGGER.debug("Deleting workposition with id: {}" , workpositionId);
        WorkPosition deleted = this.wmGenericDao.findById(workpositionId);
        if (deleted == null) {
            LOGGER.debug("No workposition found with id: {}" , workpositionId);
            throw new EntityNotFoundException(String.valueOf(workpositionId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<WorkPosition> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all workpositions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<WorkPosition> findAll(Pageable pageable) {
        LOGGER.debug("Finding all workpositions");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public WorkPosition findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding workposition by id: {}" , id);
        WorkPosition workposition=this.wmGenericDao.findById(id);
        if(workposition==null){
            LOGGER.debug("No workposition found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return workposition;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public WorkPosition update(WorkPosition updated) throws EntityNotFoundException {
        LOGGER.debug("Updating workposition with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdWorkPosition();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


