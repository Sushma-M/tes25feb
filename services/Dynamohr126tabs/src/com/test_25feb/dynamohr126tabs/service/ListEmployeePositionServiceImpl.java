/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class ListEmployeePosition.
 * @see com.test_25feb.dynamohr126tabs.ListEmployeePosition
 */
@Service("Dynamohr126tabs.ListEmployeePositionService")
public class ListEmployeePositionServiceImpl implements ListEmployeePositionService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ListEmployeePositionServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.ListEmployeePositionDao")
    private WMGenericDao<ListEmployeePosition, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ListEmployeePosition, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<ListEmployeePosition> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListEmployeePosition create(ListEmployeePosition listemployeeposition) {
        LOGGER.debug("Creating a new listemployeeposition with information: {}" , listemployeeposition);
        return this.wmGenericDao.create(listemployeeposition);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListEmployeePosition delete(Integer listemployeepositionId) throws EntityNotFoundException {
        LOGGER.debug("Deleting listemployeeposition with id: {}" , listemployeepositionId);
        ListEmployeePosition deleted = this.wmGenericDao.findById(listemployeepositionId);
        if (deleted == null) {
            LOGGER.debug("No listemployeeposition found with id: {}" , listemployeepositionId);
            throw new EntityNotFoundException(String.valueOf(listemployeepositionId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ListEmployeePosition> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all listemployeepositions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ListEmployeePosition> findAll(Pageable pageable) {
        LOGGER.debug("Finding all listemployeepositions");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListEmployeePosition findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding listemployeeposition by id: {}" , id);
        ListEmployeePosition listemployeeposition=this.wmGenericDao.findById(id);
        if(listemployeeposition==null){
            LOGGER.debug("No listemployeeposition found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return listemployeeposition;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListEmployeePosition update(ListEmployeePosition updated) throws EntityNotFoundException {
        LOGGER.debug("Updating listemployeeposition with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdListEmployeePosition();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


