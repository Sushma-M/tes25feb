/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class TravelExpense.
 * @see com.test_25feb.dynamohr126tabs.TravelExpense
 */
@Service("Dynamohr126tabs.TravelExpenseService")
public class TravelExpenseServiceImpl implements TravelExpenseService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TravelExpenseServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.TravelExpenseDao")
    private WMGenericDao<TravelExpense, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TravelExpense, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<TravelExpense> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public TravelExpense create(TravelExpense travelexpense) {
        LOGGER.debug("Creating a new travelexpense with information: {}" , travelexpense);
        return this.wmGenericDao.create(travelexpense);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TravelExpense delete(Integer travelexpenseId) throws EntityNotFoundException {
        LOGGER.debug("Deleting travelexpense with id: {}" , travelexpenseId);
        TravelExpense deleted = this.wmGenericDao.findById(travelexpenseId);
        if (deleted == null) {
            LOGGER.debug("No travelexpense found with id: {}" , travelexpenseId);
            throw new EntityNotFoundException(String.valueOf(travelexpenseId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TravelExpense> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all travelexpenses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TravelExpense> findAll(Pageable pageable) {
        LOGGER.debug("Finding all travelexpenses");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TravelExpense findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding travelexpense by id: {}" , id);
        TravelExpense travelexpense=this.wmGenericDao.findById(id);
        if(travelexpense==null){
            LOGGER.debug("No travelexpense found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return travelexpense;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TravelExpense update(TravelExpense updated) throws EntityNotFoundException {
        LOGGER.debug("Updating travelexpense with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdTravelExpense();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


