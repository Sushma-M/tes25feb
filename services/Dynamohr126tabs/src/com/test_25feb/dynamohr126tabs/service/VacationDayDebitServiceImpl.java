/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class VacationDayDebit.
 * @see com.test_25feb.dynamohr126tabs.VacationDayDebit
 */
@Service("Dynamohr126tabs.VacationDayDebitService")
public class VacationDayDebitServiceImpl implements VacationDayDebitService {


    private static final Logger LOGGER = LoggerFactory.getLogger(VacationDayDebitServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.VacationDayDebitDao")
    private WMGenericDao<VacationDayDebit, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<VacationDayDebit, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<VacationDayDebit> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public VacationDayDebit create(VacationDayDebit vacationdaydebit) {
        LOGGER.debug("Creating a new vacationdaydebit with information: {}" , vacationdaydebit);
        return this.wmGenericDao.create(vacationdaydebit);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public VacationDayDebit delete(Integer vacationdaydebitId) throws EntityNotFoundException {
        LOGGER.debug("Deleting vacationdaydebit with id: {}" , vacationdaydebitId);
        VacationDayDebit deleted = this.wmGenericDao.findById(vacationdaydebitId);
        if (deleted == null) {
            LOGGER.debug("No vacationdaydebit found with id: {}" , vacationdaydebitId);
            throw new EntityNotFoundException(String.valueOf(vacationdaydebitId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<VacationDayDebit> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all vacationdaydebits");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<VacationDayDebit> findAll(Pageable pageable) {
        LOGGER.debug("Finding all vacationdaydebits");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public VacationDayDebit findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding vacationdaydebit by id: {}" , id);
        VacationDayDebit vacationdaydebit=this.wmGenericDao.findById(id);
        if(vacationdaydebit==null){
            LOGGER.debug("No vacationdaydebit found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return vacationdaydebit;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public VacationDayDebit update(VacationDayDebit updated) throws EntityNotFoundException {
        LOGGER.debug("Updating vacationdaydebit with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdVacationDayDebit();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


