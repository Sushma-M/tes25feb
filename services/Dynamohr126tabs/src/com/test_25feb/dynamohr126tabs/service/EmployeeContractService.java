/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class EmployeeContract.
 * @see com.test_25feb.dynamohr126tabs.EmployeeContract
 */

public interface EmployeeContractService {
   /**
	 * Creates a new employeecontract.
	 * 
	 * @param created
	 *            The information of the created employeecontract.
	 * @return The created employeecontract.
	 */
	public EmployeeContract create(EmployeeContract created);

	/**
	 * Deletes a employeecontract.
	 * 
	 * @param employeecontractId
	 *            The id of the deleted employeecontract.
	 * @return The deleted employeecontract.
	 * @throws EntityNotFoundException
	 *             if no employeecontract is found with the given id.
	 */
	public EmployeeContract delete(Integer employeecontractId) throws EntityNotFoundException;

	/**
	 * Finds all employeecontracts.
	 * 
	 * @return A list of employeecontracts.
	 */
	public Page<EmployeeContract> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<EmployeeContract> findAll(Pageable pageable);
	
	/**
	 * Finds employeecontract by id.
	 * 
	 * @param id
	 *            The id of the wanted employeecontract.
	 * @return The found employeecontract. If no employeecontract is found, this method returns
	 *         null.
	 */
	public EmployeeContract findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a employeecontract.
	 * 
	 * @param updated
	 *            The information of the updated employeecontract.
	 * @return The updated employeecontract.
	 * @throws EntityNotFoundException
	 *             if no employeecontract is found with given id.
	 */
	public EmployeeContract update(EmployeeContract updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the employeecontracts in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the employeecontract.
	 */

	public long countAll();


    public Page<EmployeeContract> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

