/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class ListAssetDiscarded.
 * @see com.test_25feb.dynamohr126tabs.ListAssetDiscarded
 */
@Service("Dynamohr126tabs.ListAssetDiscardedService")
public class ListAssetDiscardedServiceImpl implements ListAssetDiscardedService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ListAssetDiscardedServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.ListAssetDiscardedDao")
    private WMGenericDao<ListAssetDiscarded, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ListAssetDiscarded, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<ListAssetDiscarded> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListAssetDiscarded create(ListAssetDiscarded listassetdiscarded) {
        LOGGER.debug("Creating a new listassetdiscarded with information: {}" , listassetdiscarded);
        return this.wmGenericDao.create(listassetdiscarded);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListAssetDiscarded delete(Integer listassetdiscardedId) throws EntityNotFoundException {
        LOGGER.debug("Deleting listassetdiscarded with id: {}" , listassetdiscardedId);
        ListAssetDiscarded deleted = this.wmGenericDao.findById(listassetdiscardedId);
        if (deleted == null) {
            LOGGER.debug("No listassetdiscarded found with id: {}" , listassetdiscardedId);
            throw new EntityNotFoundException(String.valueOf(listassetdiscardedId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ListAssetDiscarded> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all listassetdiscardeds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ListAssetDiscarded> findAll(Pageable pageable) {
        LOGGER.debug("Finding all listassetdiscardeds");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListAssetDiscarded findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding listassetdiscarded by id: {}" , id);
        ListAssetDiscarded listassetdiscarded=this.wmGenericDao.findById(id);
        if(listassetdiscarded==null){
            LOGGER.debug("No listassetdiscarded found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return listassetdiscarded;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListAssetDiscarded update(ListAssetDiscarded updated) throws EntityNotFoundException {
        LOGGER.debug("Updating listassetdiscarded with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdListAssetDiscarded();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


