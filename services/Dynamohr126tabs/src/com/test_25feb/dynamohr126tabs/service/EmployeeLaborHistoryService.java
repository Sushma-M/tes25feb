/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class EmployeeLaborHistory.
 * @see com.test_25feb.dynamohr126tabs.EmployeeLaborHistory
 */

public interface EmployeeLaborHistoryService {
   /**
	 * Creates a new employeelaborhistory.
	 * 
	 * @param created
	 *            The information of the created employeelaborhistory.
	 * @return The created employeelaborhistory.
	 */
	public EmployeeLaborHistory create(EmployeeLaborHistory created);

	/**
	 * Deletes a employeelaborhistory.
	 * 
	 * @param employeelaborhistoryId
	 *            The id of the deleted employeelaborhistory.
	 * @return The deleted employeelaborhistory.
	 * @throws EntityNotFoundException
	 *             if no employeelaborhistory is found with the given id.
	 */
	public EmployeeLaborHistory delete(Integer employeelaborhistoryId) throws EntityNotFoundException;

	/**
	 * Finds all employeelaborhistorys.
	 * 
	 * @return A list of employeelaborhistorys.
	 */
	public Page<EmployeeLaborHistory> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<EmployeeLaborHistory> findAll(Pageable pageable);
	
	/**
	 * Finds employeelaborhistory by id.
	 * 
	 * @param id
	 *            The id of the wanted employeelaborhistory.
	 * @return The found employeelaborhistory. If no employeelaborhistory is found, this method returns
	 *         null.
	 */
	public EmployeeLaborHistory findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a employeelaborhistory.
	 * 
	 * @param updated
	 *            The information of the updated employeelaborhistory.
	 * @return The updated employeelaborhistory.
	 * @throws EntityNotFoundException
	 *             if no employeelaborhistory is found with given id.
	 */
	public EmployeeLaborHistory update(EmployeeLaborHistory updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the employeelaborhistorys in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the employeelaborhistory.
	 */

	public long countAll();


    public Page<EmployeeLaborHistory> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

