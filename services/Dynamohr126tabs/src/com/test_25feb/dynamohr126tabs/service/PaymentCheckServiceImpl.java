/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class PaymentCheck.
 * @see com.test_25feb.dynamohr126tabs.PaymentCheck
 */
@Service("Dynamohr126tabs.PaymentCheckService")
public class PaymentCheckServiceImpl implements PaymentCheckService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PaymentCheckServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.PaymentCheckDao")
    private WMGenericDao<PaymentCheck, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PaymentCheck, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<PaymentCheck> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public PaymentCheck create(PaymentCheck paymentcheck) {
        LOGGER.debug("Creating a new paymentcheck with information: {}" , paymentcheck);
        return this.wmGenericDao.create(paymentcheck);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public PaymentCheck delete(Integer paymentcheckId) throws EntityNotFoundException {
        LOGGER.debug("Deleting paymentcheck with id: {}" , paymentcheckId);
        PaymentCheck deleted = this.wmGenericDao.findById(paymentcheckId);
        if (deleted == null) {
            LOGGER.debug("No paymentcheck found with id: {}" , paymentcheckId);
            throw new EntityNotFoundException(String.valueOf(paymentcheckId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<PaymentCheck> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all paymentchecks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<PaymentCheck> findAll(Pageable pageable) {
        LOGGER.debug("Finding all paymentchecks");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public PaymentCheck findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding paymentcheck by id: {}" , id);
        PaymentCheck paymentcheck=this.wmGenericDao.findById(id);
        if(paymentcheck==null){
            LOGGER.debug("No paymentcheck found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return paymentcheck;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public PaymentCheck update(PaymentCheck updated) throws EntityNotFoundException {
        LOGGER.debug("Updating paymentcheck with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdPaymentCheck();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


