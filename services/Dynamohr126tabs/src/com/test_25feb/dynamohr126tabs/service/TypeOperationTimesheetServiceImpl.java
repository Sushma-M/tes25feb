/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class TypeOperationTimesheet.
 * @see com.test_25feb.dynamohr126tabs.TypeOperationTimesheet
 */
@Service("Dynamohr126tabs.TypeOperationTimesheetService")
public class TypeOperationTimesheetServiceImpl implements TypeOperationTimesheetService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TypeOperationTimesheetServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.TypeOperationTimesheetDao")
    private WMGenericDao<TypeOperationTimesheet, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeOperationTimesheet, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<TypeOperationTimesheet> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeOperationTimesheet create(TypeOperationTimesheet typeoperationtimesheet) {
        LOGGER.debug("Creating a new typeoperationtimesheet with information: {}" , typeoperationtimesheet);
        return this.wmGenericDao.create(typeoperationtimesheet);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeOperationTimesheet delete(Integer typeoperationtimesheetId) throws EntityNotFoundException {
        LOGGER.debug("Deleting typeoperationtimesheet with id: {}" , typeoperationtimesheetId);
        TypeOperationTimesheet deleted = this.wmGenericDao.findById(typeoperationtimesheetId);
        if (deleted == null) {
            LOGGER.debug("No typeoperationtimesheet found with id: {}" , typeoperationtimesheetId);
            throw new EntityNotFoundException(String.valueOf(typeoperationtimesheetId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeOperationTimesheet> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all typeoperationtimesheets");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeOperationTimesheet> findAll(Pageable pageable) {
        LOGGER.debug("Finding all typeoperationtimesheets");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeOperationTimesheet findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding typeoperationtimesheet by id: {}" , id);
        TypeOperationTimesheet typeoperationtimesheet=this.wmGenericDao.findById(id);
        if(typeoperationtimesheet==null){
            LOGGER.debug("No typeoperationtimesheet found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return typeoperationtimesheet;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeOperationTimesheet update(TypeOperationTimesheet updated) throws EntityNotFoundException {
        LOGGER.debug("Updating typeoperationtimesheet with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdTypeOperationTimesheet();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


