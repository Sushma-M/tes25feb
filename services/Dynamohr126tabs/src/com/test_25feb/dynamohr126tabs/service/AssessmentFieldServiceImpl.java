/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class AssessmentField.
 * @see com.test_25feb.dynamohr126tabs.AssessmentField
 */
@Service("Dynamohr126tabs.AssessmentFieldService")
public class AssessmentFieldServiceImpl implements AssessmentFieldService {


    private static final Logger LOGGER = LoggerFactory.getLogger(AssessmentFieldServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.AssessmentFieldDao")
    private WMGenericDao<AssessmentField, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AssessmentField, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<AssessmentField> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssessmentField create(AssessmentField assessmentfield) {
        LOGGER.debug("Creating a new assessmentfield with information: {}" , assessmentfield);
        return this.wmGenericDao.create(assessmentfield);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssessmentField delete(Integer assessmentfieldId) throws EntityNotFoundException {
        LOGGER.debug("Deleting assessmentfield with id: {}" , assessmentfieldId);
        AssessmentField deleted = this.wmGenericDao.findById(assessmentfieldId);
        if (deleted == null) {
            LOGGER.debug("No assessmentfield found with id: {}" , assessmentfieldId);
            throw new EntityNotFoundException(String.valueOf(assessmentfieldId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<AssessmentField> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all assessmentfields");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<AssessmentField> findAll(Pageable pageable) {
        LOGGER.debug("Finding all assessmentfields");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssessmentField findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding assessmentfield by id: {}" , id);
        AssessmentField assessmentfield=this.wmGenericDao.findById(id);
        if(assessmentfield==null){
            LOGGER.debug("No assessmentfield found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return assessmentfield;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssessmentField update(AssessmentField updated) throws EntityNotFoundException {
        LOGGER.debug("Updating assessmentfield with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdAssessmentField();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


