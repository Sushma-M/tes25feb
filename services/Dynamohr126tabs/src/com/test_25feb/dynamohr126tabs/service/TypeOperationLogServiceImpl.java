/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class TypeOperationLog.
 * @see com.test_25feb.dynamohr126tabs.TypeOperationLog
 */
@Service("Dynamohr126tabs.TypeOperationLogService")
public class TypeOperationLogServiceImpl implements TypeOperationLogService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TypeOperationLogServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.TypeOperationLogDao")
    private WMGenericDao<TypeOperationLog, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeOperationLog, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<TypeOperationLog> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeOperationLog create(TypeOperationLog typeoperationlog) {
        LOGGER.debug("Creating a new typeoperationlog with information: {}" , typeoperationlog);
        return this.wmGenericDao.create(typeoperationlog);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeOperationLog delete(Integer typeoperationlogId) throws EntityNotFoundException {
        LOGGER.debug("Deleting typeoperationlog with id: {}" , typeoperationlogId);
        TypeOperationLog deleted = this.wmGenericDao.findById(typeoperationlogId);
        if (deleted == null) {
            LOGGER.debug("No typeoperationlog found with id: {}" , typeoperationlogId);
            throw new EntityNotFoundException(String.valueOf(typeoperationlogId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeOperationLog> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all typeoperationlogs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeOperationLog> findAll(Pageable pageable) {
        LOGGER.debug("Finding all typeoperationlogs");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeOperationLog findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding typeoperationlog by id: {}" , id);
        TypeOperationLog typeoperationlog=this.wmGenericDao.findById(id);
        if(typeoperationlog==null){
            LOGGER.debug("No typeoperationlog found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return typeoperationlog;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeOperationLog update(TypeOperationLog updated) throws EntityNotFoundException {
        LOGGER.debug("Updating typeoperationlog with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdTypeOperationLog();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


