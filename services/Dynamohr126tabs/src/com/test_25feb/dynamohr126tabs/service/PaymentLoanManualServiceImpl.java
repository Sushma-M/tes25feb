/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class PaymentLoanManual.
 * @see com.test_25feb.dynamohr126tabs.PaymentLoanManual
 */
@Service("Dynamohr126tabs.PaymentLoanManualService")
public class PaymentLoanManualServiceImpl implements PaymentLoanManualService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PaymentLoanManualServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.PaymentLoanManualDao")
    private WMGenericDao<PaymentLoanManual, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PaymentLoanManual, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<PaymentLoanManual> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public PaymentLoanManual create(PaymentLoanManual paymentloanmanual) {
        LOGGER.debug("Creating a new paymentloanmanual with information: {}" , paymentloanmanual);
        return this.wmGenericDao.create(paymentloanmanual);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public PaymentLoanManual delete(Integer paymentloanmanualId) throws EntityNotFoundException {
        LOGGER.debug("Deleting paymentloanmanual with id: {}" , paymentloanmanualId);
        PaymentLoanManual deleted = this.wmGenericDao.findById(paymentloanmanualId);
        if (deleted == null) {
            LOGGER.debug("No paymentloanmanual found with id: {}" , paymentloanmanualId);
            throw new EntityNotFoundException(String.valueOf(paymentloanmanualId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<PaymentLoanManual> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all paymentloanmanuals");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<PaymentLoanManual> findAll(Pageable pageable) {
        LOGGER.debug("Finding all paymentloanmanuals");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public PaymentLoanManual findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding paymentloanmanual by id: {}" , id);
        PaymentLoanManual paymentloanmanual=this.wmGenericDao.findById(id);
        if(paymentloanmanual==null){
            LOGGER.debug("No paymentloanmanual found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return paymentloanmanual;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public PaymentLoanManual update(PaymentLoanManual updated) throws EntityNotFoundException {
        LOGGER.debug("Updating paymentloanmanual with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdPaymentLoanManual();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


