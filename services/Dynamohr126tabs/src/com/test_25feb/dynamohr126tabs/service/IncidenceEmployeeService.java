/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class IncidenceEmployee.
 * @see com.test_25feb.dynamohr126tabs.IncidenceEmployee
 */

public interface IncidenceEmployeeService {
   /**
	 * Creates a new incidenceemployee.
	 * 
	 * @param created
	 *            The information of the created incidenceemployee.
	 * @return The created incidenceemployee.
	 */
	public IncidenceEmployee create(IncidenceEmployee created);

	/**
	 * Deletes a incidenceemployee.
	 * 
	 * @param incidenceemployeeId
	 *            The id of the deleted incidenceemployee.
	 * @return The deleted incidenceemployee.
	 * @throws EntityNotFoundException
	 *             if no incidenceemployee is found with the given id.
	 */
	public IncidenceEmployee delete(Integer incidenceemployeeId) throws EntityNotFoundException;

	/**
	 * Finds all incidenceemployees.
	 * 
	 * @return A list of incidenceemployees.
	 */
	public Page<IncidenceEmployee> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<IncidenceEmployee> findAll(Pageable pageable);
	
	/**
	 * Finds incidenceemployee by id.
	 * 
	 * @param id
	 *            The id of the wanted incidenceemployee.
	 * @return The found incidenceemployee. If no incidenceemployee is found, this method returns
	 *         null.
	 */
	public IncidenceEmployee findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a incidenceemployee.
	 * 
	 * @param updated
	 *            The information of the updated incidenceemployee.
	 * @return The updated incidenceemployee.
	 * @throws EntityNotFoundException
	 *             if no incidenceemployee is found with given id.
	 */
	public IncidenceEmployee update(IncidenceEmployee updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the incidenceemployees in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the incidenceemployee.
	 */

	public long countAll();


    public Page<IncidenceEmployee> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

