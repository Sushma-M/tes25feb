/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class TypeIncident.
 * @see com.test_25feb.dynamohr126tabs.TypeIncident
 */

public interface TypeIncidentService {
   /**
	 * Creates a new typeincident.
	 * 
	 * @param created
	 *            The information of the created typeincident.
	 * @return The created typeincident.
	 */
	public TypeIncident create(TypeIncident created);

	/**
	 * Deletes a typeincident.
	 * 
	 * @param typeincidentId
	 *            The id of the deleted typeincident.
	 * @return The deleted typeincident.
	 * @throws EntityNotFoundException
	 *             if no typeincident is found with the given id.
	 */
	public TypeIncident delete(Integer typeincidentId) throws EntityNotFoundException;

	/**
	 * Finds all typeincidents.
	 * 
	 * @return A list of typeincidents.
	 */
	public Page<TypeIncident> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<TypeIncident> findAll(Pageable pageable);
	
	/**
	 * Finds typeincident by id.
	 * 
	 * @param id
	 *            The id of the wanted typeincident.
	 * @return The found typeincident. If no typeincident is found, this method returns
	 *         null.
	 */
	public TypeIncident findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a typeincident.
	 * 
	 * @param updated
	 *            The information of the updated typeincident.
	 * @return The updated typeincident.
	 * @throws EntityNotFoundException
	 *             if no typeincident is found with given id.
	 */
	public TypeIncident update(TypeIncident updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the typeincidents in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the typeincident.
	 */

	public long countAll();


    public Page<TypeIncident> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

