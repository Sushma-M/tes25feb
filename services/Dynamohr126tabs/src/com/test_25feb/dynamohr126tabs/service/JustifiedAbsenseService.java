/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class JustifiedAbsense.
 * @see com.test_25feb.dynamohr126tabs.JustifiedAbsense
 */

public interface JustifiedAbsenseService {
   /**
	 * Creates a new justifiedabsense.
	 * 
	 * @param created
	 *            The information of the created justifiedabsense.
	 * @return The created justifiedabsense.
	 */
	public JustifiedAbsense create(JustifiedAbsense created);

	/**
	 * Deletes a justifiedabsense.
	 * 
	 * @param justifiedabsenseId
	 *            The id of the deleted justifiedabsense.
	 * @return The deleted justifiedabsense.
	 * @throws EntityNotFoundException
	 *             if no justifiedabsense is found with the given id.
	 */
	public JustifiedAbsense delete(Integer justifiedabsenseId) throws EntityNotFoundException;

	/**
	 * Finds all justifiedabsenses.
	 * 
	 * @return A list of justifiedabsenses.
	 */
	public Page<JustifiedAbsense> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<JustifiedAbsense> findAll(Pageable pageable);
	
	/**
	 * Finds justifiedabsense by id.
	 * 
	 * @param id
	 *            The id of the wanted justifiedabsense.
	 * @return The found justifiedabsense. If no justifiedabsense is found, this method returns
	 *         null.
	 */
	public JustifiedAbsense findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a justifiedabsense.
	 * 
	 * @param updated
	 *            The information of the updated justifiedabsense.
	 * @return The updated justifiedabsense.
	 * @throws EntityNotFoundException
	 *             if no justifiedabsense is found with given id.
	 */
	public JustifiedAbsense update(JustifiedAbsense updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the justifiedabsenses in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the justifiedabsense.
	 */

	public long countAll();


    public Page<JustifiedAbsense> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

