/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class ScheduleFixedDay.
 * @see com.test_25feb.dynamohr126tabs.ScheduleFixedDay
 */
@Service("Dynamohr126tabs.ScheduleFixedDayService")
public class ScheduleFixedDayServiceImpl implements ScheduleFixedDayService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ScheduleFixedDayServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.ScheduleFixedDayDao")
    private WMGenericDao<ScheduleFixedDay, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ScheduleFixedDay, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<ScheduleFixedDay> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public ScheduleFixedDay create(ScheduleFixedDay schedulefixedday) {
        LOGGER.debug("Creating a new schedulefixedday with information: {}" , schedulefixedday);
        return this.wmGenericDao.create(schedulefixedday);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ScheduleFixedDay delete(Integer schedulefixeddayId) throws EntityNotFoundException {
        LOGGER.debug("Deleting schedulefixedday with id: {}" , schedulefixeddayId);
        ScheduleFixedDay deleted = this.wmGenericDao.findById(schedulefixeddayId);
        if (deleted == null) {
            LOGGER.debug("No schedulefixedday found with id: {}" , schedulefixeddayId);
            throw new EntityNotFoundException(String.valueOf(schedulefixeddayId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ScheduleFixedDay> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all schedulefixeddays");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ScheduleFixedDay> findAll(Pageable pageable) {
        LOGGER.debug("Finding all schedulefixeddays");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ScheduleFixedDay findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding schedulefixedday by id: {}" , id);
        ScheduleFixedDay schedulefixedday=this.wmGenericDao.findById(id);
        if(schedulefixedday==null){
            LOGGER.debug("No schedulefixedday found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return schedulefixedday;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ScheduleFixedDay update(ScheduleFixedDay updated) throws EntityNotFoundException {
        LOGGER.debug("Updating schedulefixedday with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdScheduleFixedDay();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


