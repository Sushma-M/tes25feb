/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class EmployeePersonalReference.
 * @see com.test_25feb.dynamohr126tabs.EmployeePersonalReference
 */

public interface EmployeePersonalReferenceService {
   /**
	 * Creates a new employeepersonalreference.
	 * 
	 * @param created
	 *            The information of the created employeepersonalreference.
	 * @return The created employeepersonalreference.
	 */
	public EmployeePersonalReference create(EmployeePersonalReference created);

	/**
	 * Deletes a employeepersonalreference.
	 * 
	 * @param employeepersonalreferenceId
	 *            The id of the deleted employeepersonalreference.
	 * @return The deleted employeepersonalreference.
	 * @throws EntityNotFoundException
	 *             if no employeepersonalreference is found with the given id.
	 */
	public EmployeePersonalReference delete(Integer employeepersonalreferenceId) throws EntityNotFoundException;

	/**
	 * Finds all employeepersonalreferences.
	 * 
	 * @return A list of employeepersonalreferences.
	 */
	public Page<EmployeePersonalReference> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<EmployeePersonalReference> findAll(Pageable pageable);
	
	/**
	 * Finds employeepersonalreference by id.
	 * 
	 * @param id
	 *            The id of the wanted employeepersonalreference.
	 * @return The found employeepersonalreference. If no employeepersonalreference is found, this method returns
	 *         null.
	 */
	public EmployeePersonalReference findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a employeepersonalreference.
	 * 
	 * @param updated
	 *            The information of the updated employeepersonalreference.
	 * @return The updated employeepersonalreference.
	 * @throws EntityNotFoundException
	 *             if no employeepersonalreference is found with given id.
	 */
	public EmployeePersonalReference update(EmployeePersonalReference updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the employeepersonalreferences in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the employeepersonalreference.
	 */

	public long countAll();


    public Page<EmployeePersonalReference> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

