/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class ListAssetUnloaded.
 * @see com.test_25feb.dynamohr126tabs.ListAssetUnloaded
 */
@Service("Dynamohr126tabs.ListAssetUnloadedService")
public class ListAssetUnloadedServiceImpl implements ListAssetUnloadedService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ListAssetUnloadedServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.ListAssetUnloadedDao")
    private WMGenericDao<ListAssetUnloaded, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ListAssetUnloaded, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<ListAssetUnloaded> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListAssetUnloaded create(ListAssetUnloaded listassetunloaded) {
        LOGGER.debug("Creating a new listassetunloaded with information: {}" , listassetunloaded);
        return this.wmGenericDao.create(listassetunloaded);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListAssetUnloaded delete(Integer listassetunloadedId) throws EntityNotFoundException {
        LOGGER.debug("Deleting listassetunloaded with id: {}" , listassetunloadedId);
        ListAssetUnloaded deleted = this.wmGenericDao.findById(listassetunloadedId);
        if (deleted == null) {
            LOGGER.debug("No listassetunloaded found with id: {}" , listassetunloadedId);
            throw new EntityNotFoundException(String.valueOf(listassetunloadedId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ListAssetUnloaded> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all listassetunloadeds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ListAssetUnloaded> findAll(Pageable pageable) {
        LOGGER.debug("Finding all listassetunloadeds");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListAssetUnloaded findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding listassetunloaded by id: {}" , id);
        ListAssetUnloaded listassetunloaded=this.wmGenericDao.findById(id);
        if(listassetunloaded==null){
            LOGGER.debug("No listassetunloaded found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return listassetunloaded;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListAssetUnloaded update(ListAssetUnloaded updated) throws EntityNotFoundException {
        LOGGER.debug("Updating listassetunloaded with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdListAssetUnloaded();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


