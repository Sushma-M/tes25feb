/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class VacationDayCredit.
 * @see com.test_25feb.dynamohr126tabs.VacationDayCredit
 */
@Service("Dynamohr126tabs.VacationDayCreditService")
public class VacationDayCreditServiceImpl implements VacationDayCreditService {


    private static final Logger LOGGER = LoggerFactory.getLogger(VacationDayCreditServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.VacationDayCreditDao")
    private WMGenericDao<VacationDayCredit, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<VacationDayCredit, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<VacationDayCredit> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public VacationDayCredit create(VacationDayCredit vacationdaycredit) {
        LOGGER.debug("Creating a new vacationdaycredit with information: {}" , vacationdaycredit);
        return this.wmGenericDao.create(vacationdaycredit);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public VacationDayCredit delete(Integer vacationdaycreditId) throws EntityNotFoundException {
        LOGGER.debug("Deleting vacationdaycredit with id: {}" , vacationdaycreditId);
        VacationDayCredit deleted = this.wmGenericDao.findById(vacationdaycreditId);
        if (deleted == null) {
            LOGGER.debug("No vacationdaycredit found with id: {}" , vacationdaycreditId);
            throw new EntityNotFoundException(String.valueOf(vacationdaycreditId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<VacationDayCredit> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all vacationdaycredits");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<VacationDayCredit> findAll(Pageable pageable) {
        LOGGER.debug("Finding all vacationdaycredits");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public VacationDayCredit findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding vacationdaycredit by id: {}" , id);
        VacationDayCredit vacationdaycredit=this.wmGenericDao.findById(id);
        if(vacationdaycredit==null){
            LOGGER.debug("No vacationdaycredit found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return vacationdaycredit;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public VacationDayCredit update(VacationDayCredit updated) throws EntityNotFoundException {
        LOGGER.debug("Updating vacationdaycredit with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdVacationDayCredit();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


