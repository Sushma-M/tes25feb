/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class Loan.
 * @see com.test_25feb.dynamohr126tabs.Loan
 */

public interface LoanService {
   /**
	 * Creates a new loan.
	 * 
	 * @param created
	 *            The information of the created loan.
	 * @return The created loan.
	 */
	public Loan create(Loan created);

	/**
	 * Deletes a loan.
	 * 
	 * @param loanId
	 *            The id of the deleted loan.
	 * @return The deleted loan.
	 * @throws EntityNotFoundException
	 *             if no loan is found with the given id.
	 */
	public Loan delete(Integer loanId) throws EntityNotFoundException;

	/**
	 * Finds all loans.
	 * 
	 * @return A list of loans.
	 */
	public Page<Loan> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Loan> findAll(Pageable pageable);
	
	/**
	 * Finds loan by id.
	 * 
	 * @param id
	 *            The id of the wanted loan.
	 * @return The found loan. If no loan is found, this method returns
	 *         null.
	 */
	public Loan findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a loan.
	 * 
	 * @param updated
	 *            The information of the updated loan.
	 * @return The updated loan.
	 * @throws EntityNotFoundException
	 *             if no loan is found with given id.
	 */
	public Loan update(Loan updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the loans in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the loan.
	 */

	public long countAll();


    public Page<Loan> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

