/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class ListCelphoneDetailPayroll.
 * @see com.test_25feb.dynamohr126tabs.ListCelphoneDetailPayroll
 */
@Service("Dynamohr126tabs.ListCelphoneDetailPayrollService")
public class ListCelphoneDetailPayrollServiceImpl implements ListCelphoneDetailPayrollService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ListCelphoneDetailPayrollServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.ListCelphoneDetailPayrollDao")
    private WMGenericDao<ListCelphoneDetailPayroll, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ListCelphoneDetailPayroll, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<ListCelphoneDetailPayroll> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListCelphoneDetailPayroll create(ListCelphoneDetailPayroll listcelphonedetailpayroll) {
        LOGGER.debug("Creating a new listcelphonedetailpayroll with information: {}" , listcelphonedetailpayroll);
        return this.wmGenericDao.create(listcelphonedetailpayroll);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListCelphoneDetailPayroll delete(Integer listcelphonedetailpayrollId) throws EntityNotFoundException {
        LOGGER.debug("Deleting listcelphonedetailpayroll with id: {}" , listcelphonedetailpayrollId);
        ListCelphoneDetailPayroll deleted = this.wmGenericDao.findById(listcelphonedetailpayrollId);
        if (deleted == null) {
            LOGGER.debug("No listcelphonedetailpayroll found with id: {}" , listcelphonedetailpayrollId);
            throw new EntityNotFoundException(String.valueOf(listcelphonedetailpayrollId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ListCelphoneDetailPayroll> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all listcelphonedetailpayrolls");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ListCelphoneDetailPayroll> findAll(Pageable pageable) {
        LOGGER.debug("Finding all listcelphonedetailpayrolls");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListCelphoneDetailPayroll findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding listcelphonedetailpayroll by id: {}" , id);
        ListCelphoneDetailPayroll listcelphonedetailpayroll=this.wmGenericDao.findById(id);
        if(listcelphonedetailpayroll==null){
            LOGGER.debug("No listcelphonedetailpayroll found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return listcelphonedetailpayroll;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListCelphoneDetailPayroll update(ListCelphoneDetailPayroll updated) throws EntityNotFoundException {
        LOGGER.debug("Updating listcelphonedetailpayroll with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdListCelphoneDetailPayroll();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


