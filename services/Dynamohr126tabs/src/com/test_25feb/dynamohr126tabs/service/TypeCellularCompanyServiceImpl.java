/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class TypeCellularCompany.
 * @see com.test_25feb.dynamohr126tabs.TypeCellularCompany
 */
@Service("Dynamohr126tabs.TypeCellularCompanyService")
public class TypeCellularCompanyServiceImpl implements TypeCellularCompanyService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TypeCellularCompanyServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.TypeCellularCompanyDao")
    private WMGenericDao<TypeCellularCompany, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeCellularCompany, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<TypeCellularCompany> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeCellularCompany create(TypeCellularCompany typecellularcompany) {
        LOGGER.debug("Creating a new typecellularcompany with information: {}" , typecellularcompany);
        return this.wmGenericDao.create(typecellularcompany);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeCellularCompany delete(Integer typecellularcompanyId) throws EntityNotFoundException {
        LOGGER.debug("Deleting typecellularcompany with id: {}" , typecellularcompanyId);
        TypeCellularCompany deleted = this.wmGenericDao.findById(typecellularcompanyId);
        if (deleted == null) {
            LOGGER.debug("No typecellularcompany found with id: {}" , typecellularcompanyId);
            throw new EntityNotFoundException(String.valueOf(typecellularcompanyId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeCellularCompany> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all typecellularcompanys");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeCellularCompany> findAll(Pageable pageable) {
        LOGGER.debug("Finding all typecellularcompanys");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeCellularCompany findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding typecellularcompany by id: {}" , id);
        TypeCellularCompany typecellularcompany=this.wmGenericDao.findById(id);
        if(typecellularcompany==null){
            LOGGER.debug("No typecellularcompany found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return typecellularcompany;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeCellularCompany update(TypeCellularCompany updated) throws EntityNotFoundException {
        LOGGER.debug("Updating typecellularcompany with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdTypeCellularCompany();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


