/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class DeductionPeriodic.
 * @see com.test_25feb.dynamohr126tabs.DeductionPeriodic
 */

public interface DeductionPeriodicService {
   /**
	 * Creates a new deductionperiodic.
	 * 
	 * @param created
	 *            The information of the created deductionperiodic.
	 * @return The created deductionperiodic.
	 */
	public DeductionPeriodic create(DeductionPeriodic created);

	/**
	 * Deletes a deductionperiodic.
	 * 
	 * @param deductionperiodicId
	 *            The id of the deleted deductionperiodic.
	 * @return The deleted deductionperiodic.
	 * @throws EntityNotFoundException
	 *             if no deductionperiodic is found with the given id.
	 */
	public DeductionPeriodic delete(Integer deductionperiodicId) throws EntityNotFoundException;

	/**
	 * Finds all deductionperiodics.
	 * 
	 * @return A list of deductionperiodics.
	 */
	public Page<DeductionPeriodic> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<DeductionPeriodic> findAll(Pageable pageable);
	
	/**
	 * Finds deductionperiodic by id.
	 * 
	 * @param id
	 *            The id of the wanted deductionperiodic.
	 * @return The found deductionperiodic. If no deductionperiodic is found, this method returns
	 *         null.
	 */
	public DeductionPeriodic findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a deductionperiodic.
	 * 
	 * @param updated
	 *            The information of the updated deductionperiodic.
	 * @return The updated deductionperiodic.
	 * @throws EntityNotFoundException
	 *             if no deductionperiodic is found with given id.
	 */
	public DeductionPeriodic update(DeductionPeriodic updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the deductionperiodics in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the deductionperiodic.
	 */

	public long countAll();


    public Page<DeductionPeriodic> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

