/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class Bank.
 * @see com.test_25feb.dynamohr126tabs.Bank
 */
@Service("Dynamohr126tabs.BankService")
public class BankServiceImpl implements BankService {


    private static final Logger LOGGER = LoggerFactory.getLogger(BankServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.BankDao")
    private WMGenericDao<Bank, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Bank, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<Bank> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public Bank create(Bank bank) {
        LOGGER.debug("Creating a new bank with information: {}" , bank);
        return this.wmGenericDao.create(bank);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Bank delete(Integer bankId) throws EntityNotFoundException {
        LOGGER.debug("Deleting bank with id: {}" , bankId);
        Bank deleted = this.wmGenericDao.findById(bankId);
        if (deleted == null) {
            LOGGER.debug("No bank found with id: {}" , bankId);
            throw new EntityNotFoundException(String.valueOf(bankId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<Bank> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all banks");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<Bank> findAll(Pageable pageable) {
        LOGGER.debug("Finding all banks");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Bank findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding bank by id: {}" , id);
        Bank bank=this.wmGenericDao.findById(id);
        if(bank==null){
            LOGGER.debug("No bank found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return bank;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Bank update(Bank updated) throws EntityNotFoundException {
        LOGGER.debug("Updating bank with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdBank();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


