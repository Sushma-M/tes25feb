/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class TypeAlert.
 * @see com.test_25feb.dynamohr126tabs.TypeAlert
 */
@Service("Dynamohr126tabs.TypeAlertService")
public class TypeAlertServiceImpl implements TypeAlertService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TypeAlertServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.TypeAlertDao")
    private WMGenericDao<TypeAlert, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeAlert, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<TypeAlert> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeAlert create(TypeAlert typealert) {
        LOGGER.debug("Creating a new typealert with information: {}" , typealert);
        return this.wmGenericDao.create(typealert);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeAlert delete(Integer typealertId) throws EntityNotFoundException {
        LOGGER.debug("Deleting typealert with id: {}" , typealertId);
        TypeAlert deleted = this.wmGenericDao.findById(typealertId);
        if (deleted == null) {
            LOGGER.debug("No typealert found with id: {}" , typealertId);
            throw new EntityNotFoundException(String.valueOf(typealertId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeAlert> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all typealerts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeAlert> findAll(Pageable pageable) {
        LOGGER.debug("Finding all typealerts");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeAlert findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding typealert by id: {}" , id);
        TypeAlert typealert=this.wmGenericDao.findById(id);
        if(typealert==null){
            LOGGER.debug("No typealert found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return typealert;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeAlert update(TypeAlert updated) throws EntityNotFoundException {
        LOGGER.debug("Updating typealert with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdTypeAlert();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


