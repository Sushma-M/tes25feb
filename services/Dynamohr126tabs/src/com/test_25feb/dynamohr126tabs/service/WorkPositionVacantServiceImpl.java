/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class WorkPositionVacant.
 * @see com.test_25feb.dynamohr126tabs.WorkPositionVacant
 */
@Service("Dynamohr126tabs.WorkPositionVacantService")
public class WorkPositionVacantServiceImpl implements WorkPositionVacantService {


    private static final Logger LOGGER = LoggerFactory.getLogger(WorkPositionVacantServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.WorkPositionVacantDao")
    private WMGenericDao<WorkPositionVacant, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<WorkPositionVacant, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<WorkPositionVacant> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public WorkPositionVacant create(WorkPositionVacant workpositionvacant) {
        LOGGER.debug("Creating a new workpositionvacant with information: {}" , workpositionvacant);
        return this.wmGenericDao.create(workpositionvacant);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public WorkPositionVacant delete(Integer workpositionvacantId) throws EntityNotFoundException {
        LOGGER.debug("Deleting workpositionvacant with id: {}" , workpositionvacantId);
        WorkPositionVacant deleted = this.wmGenericDao.findById(workpositionvacantId);
        if (deleted == null) {
            LOGGER.debug("No workpositionvacant found with id: {}" , workpositionvacantId);
            throw new EntityNotFoundException(String.valueOf(workpositionvacantId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<WorkPositionVacant> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all workpositionvacants");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<WorkPositionVacant> findAll(Pageable pageable) {
        LOGGER.debug("Finding all workpositionvacants");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public WorkPositionVacant findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding workpositionvacant by id: {}" , id);
        WorkPositionVacant workpositionvacant=this.wmGenericDao.findById(id);
        if(workpositionvacant==null){
            LOGGER.debug("No workpositionvacant found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return workpositionvacant;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public WorkPositionVacant update(WorkPositionVacant updated) throws EntityNotFoundException {
        LOGGER.debug("Updating workpositionvacant with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdWorkPositionVacant();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


