/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class ApplicantFile.
 * @see com.test_25feb.dynamohr126tabs.ApplicantFile
 */
@Service("Dynamohr126tabs.ApplicantFileService")
public class ApplicantFileServiceImpl implements ApplicantFileService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ApplicantFileServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.ApplicantFileDao")
    private WMGenericDao<ApplicantFile, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ApplicantFile, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<ApplicantFile> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public ApplicantFile create(ApplicantFile applicantfile) {
        LOGGER.debug("Creating a new applicantfile with information: {}" , applicantfile);
        return this.wmGenericDao.create(applicantfile);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ApplicantFile delete(Integer applicantfileId) throws EntityNotFoundException {
        LOGGER.debug("Deleting applicantfile with id: {}" , applicantfileId);
        ApplicantFile deleted = this.wmGenericDao.findById(applicantfileId);
        if (deleted == null) {
            LOGGER.debug("No applicantfile found with id: {}" , applicantfileId);
            throw new EntityNotFoundException(String.valueOf(applicantfileId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ApplicantFile> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all applicantfiles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ApplicantFile> findAll(Pageable pageable) {
        LOGGER.debug("Finding all applicantfiles");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ApplicantFile findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding applicantfile by id: {}" , id);
        ApplicantFile applicantfile=this.wmGenericDao.findById(id);
        if(applicantfile==null){
            LOGGER.debug("No applicantfile found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return applicantfile;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ApplicantFile update(ApplicantFile updated) throws EntityNotFoundException {
        LOGGER.debug("Updating applicantfile with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdApplicantFile();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


