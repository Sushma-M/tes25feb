/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class BadgeEmployee.
 * @see com.test_25feb.dynamohr126tabs.BadgeEmployee
 */
@Service("Dynamohr126tabs.BadgeEmployeeService")
public class BadgeEmployeeServiceImpl implements BadgeEmployeeService {


    private static final Logger LOGGER = LoggerFactory.getLogger(BadgeEmployeeServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.BadgeEmployeeDao")
    private WMGenericDao<BadgeEmployee, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BadgeEmployee, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<BadgeEmployee> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public BadgeEmployee create(BadgeEmployee badgeemployee) {
        LOGGER.debug("Creating a new badgeemployee with information: {}" , badgeemployee);
        return this.wmGenericDao.create(badgeemployee);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public BadgeEmployee delete(Integer badgeemployeeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting badgeemployee with id: {}" , badgeemployeeId);
        BadgeEmployee deleted = this.wmGenericDao.findById(badgeemployeeId);
        if (deleted == null) {
            LOGGER.debug("No badgeemployee found with id: {}" , badgeemployeeId);
            throw new EntityNotFoundException(String.valueOf(badgeemployeeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<BadgeEmployee> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all badgeemployees");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<BadgeEmployee> findAll(Pageable pageable) {
        LOGGER.debug("Finding all badgeemployees");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public BadgeEmployee findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding badgeemployee by id: {}" , id);
        BadgeEmployee badgeemployee=this.wmGenericDao.findById(id);
        if(badgeemployee==null){
            LOGGER.debug("No badgeemployee found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return badgeemployee;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public BadgeEmployee update(BadgeEmployee updated) throws EntityNotFoundException {
        LOGGER.debug("Updating badgeemployee with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdBadgeEmployee();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


