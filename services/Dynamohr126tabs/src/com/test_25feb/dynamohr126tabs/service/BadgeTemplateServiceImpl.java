/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class BadgeTemplate.
 * @see com.test_25feb.dynamohr126tabs.BadgeTemplate
 */
@Service("Dynamohr126tabs.BadgeTemplateService")
public class BadgeTemplateServiceImpl implements BadgeTemplateService {


    private static final Logger LOGGER = LoggerFactory.getLogger(BadgeTemplateServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.BadgeTemplateDao")
    private WMGenericDao<BadgeTemplate, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BadgeTemplate, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<BadgeTemplate> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public BadgeTemplate create(BadgeTemplate badgetemplate) {
        LOGGER.debug("Creating a new badgetemplate with information: {}" , badgetemplate);
        return this.wmGenericDao.create(badgetemplate);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public BadgeTemplate delete(Integer badgetemplateId) throws EntityNotFoundException {
        LOGGER.debug("Deleting badgetemplate with id: {}" , badgetemplateId);
        BadgeTemplate deleted = this.wmGenericDao.findById(badgetemplateId);
        if (deleted == null) {
            LOGGER.debug("No badgetemplate found with id: {}" , badgetemplateId);
            throw new EntityNotFoundException(String.valueOf(badgetemplateId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<BadgeTemplate> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all badgetemplates");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<BadgeTemplate> findAll(Pageable pageable) {
        LOGGER.debug("Finding all badgetemplates");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public BadgeTemplate findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding badgetemplate by id: {}" , id);
        BadgeTemplate badgetemplate=this.wmGenericDao.findById(id);
        if(badgetemplate==null){
            LOGGER.debug("No badgetemplate found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return badgetemplate;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public BadgeTemplate update(BadgeTemplate updated) throws EntityNotFoundException {
        LOGGER.debug("Updating badgetemplate with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdBadgeTemplate();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


