/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class TypeEmployeeStatus.
 * @see com.test_25feb.dynamohr126tabs.TypeEmployeeStatus
 */
@Service("Dynamohr126tabs.TypeEmployeeStatusService")
public class TypeEmployeeStatusServiceImpl implements TypeEmployeeStatusService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TypeEmployeeStatusServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.TypeEmployeeStatusDao")
    private WMGenericDao<TypeEmployeeStatus, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeEmployeeStatus, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<TypeEmployeeStatus> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeEmployeeStatus create(TypeEmployeeStatus typeemployeestatus) {
        LOGGER.debug("Creating a new typeemployeestatus with information: {}" , typeemployeestatus);
        return this.wmGenericDao.create(typeemployeestatus);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeEmployeeStatus delete(Integer typeemployeestatusId) throws EntityNotFoundException {
        LOGGER.debug("Deleting typeemployeestatus with id: {}" , typeemployeestatusId);
        TypeEmployeeStatus deleted = this.wmGenericDao.findById(typeemployeestatusId);
        if (deleted == null) {
            LOGGER.debug("No typeemployeestatus found with id: {}" , typeemployeestatusId);
            throw new EntityNotFoundException(String.valueOf(typeemployeestatusId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeEmployeeStatus> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all typeemployeestatuss");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeEmployeeStatus> findAll(Pageable pageable) {
        LOGGER.debug("Finding all typeemployeestatuss");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeEmployeeStatus findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding typeemployeestatus by id: {}" , id);
        TypeEmployeeStatus typeemployeestatus=this.wmGenericDao.findById(id);
        if(typeemployeestatus==null){
            LOGGER.debug("No typeemployeestatus found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return typeemployeestatus;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeEmployeeStatus update(TypeEmployeeStatus updated) throws EntityNotFoundException {
        LOGGER.debug("Updating typeemployeestatus with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdTypeApplicantStatus();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


