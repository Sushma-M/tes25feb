/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class OverTimeEmployee.
 * @see com.test_25feb.dynamohr126tabs.OverTimeEmployee
 */

public interface OverTimeEmployeeService {
   /**
	 * Creates a new overtimeemployee.
	 * 
	 * @param created
	 *            The information of the created overtimeemployee.
	 * @return The created overtimeemployee.
	 */
	public OverTimeEmployee create(OverTimeEmployee created);

	/**
	 * Deletes a overtimeemployee.
	 * 
	 * @param overtimeemployeeId
	 *            The id of the deleted overtimeemployee.
	 * @return The deleted overtimeemployee.
	 * @throws EntityNotFoundException
	 *             if no overtimeemployee is found with the given id.
	 */
	public OverTimeEmployee delete(Integer overtimeemployeeId) throws EntityNotFoundException;

	/**
	 * Finds all overtimeemployees.
	 * 
	 * @return A list of overtimeemployees.
	 */
	public Page<OverTimeEmployee> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<OverTimeEmployee> findAll(Pageable pageable);
	
	/**
	 * Finds overtimeemployee by id.
	 * 
	 * @param id
	 *            The id of the wanted overtimeemployee.
	 * @return The found overtimeemployee. If no overtimeemployee is found, this method returns
	 *         null.
	 */
	public OverTimeEmployee findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a overtimeemployee.
	 * 
	 * @param updated
	 *            The information of the updated overtimeemployee.
	 * @return The updated overtimeemployee.
	 * @throws EntityNotFoundException
	 *             if no overtimeemployee is found with given id.
	 */
	public OverTimeEmployee update(OverTimeEmployee updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the overtimeemployees in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the overtimeemployee.
	 */

	public long countAll();


    public Page<OverTimeEmployee> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

