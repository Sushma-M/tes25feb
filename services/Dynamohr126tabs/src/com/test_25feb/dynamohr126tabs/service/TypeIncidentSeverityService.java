/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class TypeIncidentSeverity.
 * @see com.test_25feb.dynamohr126tabs.TypeIncidentSeverity
 */

public interface TypeIncidentSeverityService {
   /**
	 * Creates a new typeincidentseverity.
	 * 
	 * @param created
	 *            The information of the created typeincidentseverity.
	 * @return The created typeincidentseverity.
	 */
	public TypeIncidentSeverity create(TypeIncidentSeverity created);

	/**
	 * Deletes a typeincidentseverity.
	 * 
	 * @param typeincidentseverityId
	 *            The id of the deleted typeincidentseverity.
	 * @return The deleted typeincidentseverity.
	 * @throws EntityNotFoundException
	 *             if no typeincidentseverity is found with the given id.
	 */
	public TypeIncidentSeverity delete(Integer typeincidentseverityId) throws EntityNotFoundException;

	/**
	 * Finds all typeincidentseveritys.
	 * 
	 * @return A list of typeincidentseveritys.
	 */
	public Page<TypeIncidentSeverity> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<TypeIncidentSeverity> findAll(Pageable pageable);
	
	/**
	 * Finds typeincidentseverity by id.
	 * 
	 * @param id
	 *            The id of the wanted typeincidentseverity.
	 * @return The found typeincidentseverity. If no typeincidentseverity is found, this method returns
	 *         null.
	 */
	public TypeIncidentSeverity findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a typeincidentseverity.
	 * 
	 * @param updated
	 *            The information of the updated typeincidentseverity.
	 * @return The updated typeincidentseverity.
	 * @throws EntityNotFoundException
	 *             if no typeincidentseverity is found with given id.
	 */
	public TypeIncidentSeverity update(TypeIncidentSeverity updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the typeincidentseveritys in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the typeincidentseverity.
	 */

	public long countAll();


    public Page<TypeIncidentSeverity> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

