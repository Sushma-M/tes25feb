/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class CompanyDepartment.
 * @see com.test_25feb.dynamohr126tabs.CompanyDepartment
 */
@Service("Dynamohr126tabs.CompanyDepartmentService")
public class CompanyDepartmentServiceImpl implements CompanyDepartmentService {


    private static final Logger LOGGER = LoggerFactory.getLogger(CompanyDepartmentServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.CompanyDepartmentDao")
    private WMGenericDao<CompanyDepartment, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CompanyDepartment, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<CompanyDepartment> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public CompanyDepartment create(CompanyDepartment companydepartment) {
        LOGGER.debug("Creating a new companydepartment with information: {}" , companydepartment);
        return this.wmGenericDao.create(companydepartment);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public CompanyDepartment delete(Integer companydepartmentId) throws EntityNotFoundException {
        LOGGER.debug("Deleting companydepartment with id: {}" , companydepartmentId);
        CompanyDepartment deleted = this.wmGenericDao.findById(companydepartmentId);
        if (deleted == null) {
            LOGGER.debug("No companydepartment found with id: {}" , companydepartmentId);
            throw new EntityNotFoundException(String.valueOf(companydepartmentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<CompanyDepartment> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all companydepartments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<CompanyDepartment> findAll(Pageable pageable) {
        LOGGER.debug("Finding all companydepartments");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public CompanyDepartment findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding companydepartment by id: {}" , id);
        CompanyDepartment companydepartment=this.wmGenericDao.findById(id);
        if(companydepartment==null){
            LOGGER.debug("No companydepartment found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return companydepartment;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public CompanyDepartment update(CompanyDepartment updated) throws EntityNotFoundException {
        LOGGER.debug("Updating companydepartment with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdCompanyDepartment();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


