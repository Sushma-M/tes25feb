/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class TypeAbsenceJustification.
 * @see com.test_25feb.dynamohr126tabs.TypeAbsenceJustification
 */
@Service("Dynamohr126tabs.TypeAbsenceJustificationService")
public class TypeAbsenceJustificationServiceImpl implements TypeAbsenceJustificationService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TypeAbsenceJustificationServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.TypeAbsenceJustificationDao")
    private WMGenericDao<TypeAbsenceJustification, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeAbsenceJustification, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<TypeAbsenceJustification> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeAbsenceJustification create(TypeAbsenceJustification typeabsencejustification) {
        LOGGER.debug("Creating a new typeabsencejustification with information: {}" , typeabsencejustification);
        return this.wmGenericDao.create(typeabsencejustification);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeAbsenceJustification delete(Integer typeabsencejustificationId) throws EntityNotFoundException {
        LOGGER.debug("Deleting typeabsencejustification with id: {}" , typeabsencejustificationId);
        TypeAbsenceJustification deleted = this.wmGenericDao.findById(typeabsencejustificationId);
        if (deleted == null) {
            LOGGER.debug("No typeabsencejustification found with id: {}" , typeabsencejustificationId);
            throw new EntityNotFoundException(String.valueOf(typeabsencejustificationId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeAbsenceJustification> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all typeabsencejustifications");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeAbsenceJustification> findAll(Pageable pageable) {
        LOGGER.debug("Finding all typeabsencejustifications");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeAbsenceJustification findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding typeabsencejustification by id: {}" , id);
        TypeAbsenceJustification typeabsencejustification=this.wmGenericDao.findById(id);
        if(typeabsencejustification==null){
            LOGGER.debug("No typeabsencejustification found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return typeabsencejustification;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeAbsenceJustification update(TypeAbsenceJustification updated) throws EntityNotFoundException {
        LOGGER.debug("Updating typeabsencejustification with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdTypeAbsenceJustification();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


