/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class VacationDayDebit.
 * @see com.test_25feb.dynamohr126tabs.VacationDayDebit
 */

public interface VacationDayDebitService {
   /**
	 * Creates a new vacationdaydebit.
	 * 
	 * @param created
	 *            The information of the created vacationdaydebit.
	 * @return The created vacationdaydebit.
	 */
	public VacationDayDebit create(VacationDayDebit created);

	/**
	 * Deletes a vacationdaydebit.
	 * 
	 * @param vacationdaydebitId
	 *            The id of the deleted vacationdaydebit.
	 * @return The deleted vacationdaydebit.
	 * @throws EntityNotFoundException
	 *             if no vacationdaydebit is found with the given id.
	 */
	public VacationDayDebit delete(Integer vacationdaydebitId) throws EntityNotFoundException;

	/**
	 * Finds all vacationdaydebits.
	 * 
	 * @return A list of vacationdaydebits.
	 */
	public Page<VacationDayDebit> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<VacationDayDebit> findAll(Pageable pageable);
	
	/**
	 * Finds vacationdaydebit by id.
	 * 
	 * @param id
	 *            The id of the wanted vacationdaydebit.
	 * @return The found vacationdaydebit. If no vacationdaydebit is found, this method returns
	 *         null.
	 */
	public VacationDayDebit findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a vacationdaydebit.
	 * 
	 * @param updated
	 *            The information of the updated vacationdaydebit.
	 * @return The updated vacationdaydebit.
	 * @throws EntityNotFoundException
	 *             if no vacationdaydebit is found with given id.
	 */
	public VacationDayDebit update(VacationDayDebit updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the vacationdaydebits in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the vacationdaydebit.
	 */

	public long countAll();


    public Page<VacationDayDebit> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

