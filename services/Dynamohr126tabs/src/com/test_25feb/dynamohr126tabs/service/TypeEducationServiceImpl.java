/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class TypeEducation.
 * @see com.test_25feb.dynamohr126tabs.TypeEducation
 */
@Service("Dynamohr126tabs.TypeEducationService")
public class TypeEducationServiceImpl implements TypeEducationService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TypeEducationServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.TypeEducationDao")
    private WMGenericDao<TypeEducation, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeEducation, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<TypeEducation> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeEducation create(TypeEducation typeeducation) {
        LOGGER.debug("Creating a new typeeducation with information: {}" , typeeducation);
        return this.wmGenericDao.create(typeeducation);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeEducation delete(Integer typeeducationId) throws EntityNotFoundException {
        LOGGER.debug("Deleting typeeducation with id: {}" , typeeducationId);
        TypeEducation deleted = this.wmGenericDao.findById(typeeducationId);
        if (deleted == null) {
            LOGGER.debug("No typeeducation found with id: {}" , typeeducationId);
            throw new EntityNotFoundException(String.valueOf(typeeducationId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeEducation> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all typeeducations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeEducation> findAll(Pageable pageable) {
        LOGGER.debug("Finding all typeeducations");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeEducation findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding typeeducation by id: {}" , id);
        TypeEducation typeeducation=this.wmGenericDao.findById(id);
        if(typeeducation==null){
            LOGGER.debug("No typeeducation found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return typeeducation;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeEducation update(TypeEducation updated) throws EntityNotFoundException {
        LOGGER.debug("Updating typeeducation with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdTypeEducation();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


