/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class Loan.
 * @see com.test_25feb.dynamohr126tabs.Loan
 */
@Service("Dynamohr126tabs.LoanService")
public class LoanServiceImpl implements LoanService {


    private static final Logger LOGGER = LoggerFactory.getLogger(LoanServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.LoanDao")
    private WMGenericDao<Loan, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Loan, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<Loan> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public Loan create(Loan loan) {
        LOGGER.debug("Creating a new loan with information: {}" , loan);
        return this.wmGenericDao.create(loan);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Loan delete(Integer loanId) throws EntityNotFoundException {
        LOGGER.debug("Deleting loan with id: {}" , loanId);
        Loan deleted = this.wmGenericDao.findById(loanId);
        if (deleted == null) {
            LOGGER.debug("No loan found with id: {}" , loanId);
            throw new EntityNotFoundException(String.valueOf(loanId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<Loan> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all loans");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<Loan> findAll(Pageable pageable) {
        LOGGER.debug("Finding all loans");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Loan findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding loan by id: {}" , id);
        Loan loan=this.wmGenericDao.findById(id);
        if(loan==null){
            LOGGER.debug("No loan found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return loan;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Loan update(Loan updated) throws EntityNotFoundException {
        LOGGER.debug("Updating loan with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdLoan();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


