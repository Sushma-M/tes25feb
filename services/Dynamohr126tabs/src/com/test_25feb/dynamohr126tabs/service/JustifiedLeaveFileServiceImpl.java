/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class JustifiedLeaveFile.
 * @see com.test_25feb.dynamohr126tabs.JustifiedLeaveFile
 */
@Service("Dynamohr126tabs.JustifiedLeaveFileService")
public class JustifiedLeaveFileServiceImpl implements JustifiedLeaveFileService {


    private static final Logger LOGGER = LoggerFactory.getLogger(JustifiedLeaveFileServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.JustifiedLeaveFileDao")
    private WMGenericDao<JustifiedLeaveFile, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<JustifiedLeaveFile, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<JustifiedLeaveFile> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public JustifiedLeaveFile create(JustifiedLeaveFile justifiedleavefile) {
        LOGGER.debug("Creating a new justifiedleavefile with information: {}" , justifiedleavefile);
        return this.wmGenericDao.create(justifiedleavefile);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public JustifiedLeaveFile delete(Integer justifiedleavefileId) throws EntityNotFoundException {
        LOGGER.debug("Deleting justifiedleavefile with id: {}" , justifiedleavefileId);
        JustifiedLeaveFile deleted = this.wmGenericDao.findById(justifiedleavefileId);
        if (deleted == null) {
            LOGGER.debug("No justifiedleavefile found with id: {}" , justifiedleavefileId);
            throw new EntityNotFoundException(String.valueOf(justifiedleavefileId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<JustifiedLeaveFile> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all justifiedleavefiles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<JustifiedLeaveFile> findAll(Pageable pageable) {
        LOGGER.debug("Finding all justifiedleavefiles");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public JustifiedLeaveFile findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding justifiedleavefile by id: {}" , id);
        JustifiedLeaveFile justifiedleavefile=this.wmGenericDao.findById(id);
        if(justifiedleavefile==null){
            LOGGER.debug("No justifiedleavefile found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return justifiedleavefile;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public JustifiedLeaveFile update(JustifiedLeaveFile updated) throws EntityNotFoundException {
        LOGGER.debug("Updating justifiedleavefile with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdJustifiedLeaveFile();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


