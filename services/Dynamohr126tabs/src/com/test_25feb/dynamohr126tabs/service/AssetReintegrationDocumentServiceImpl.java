/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class AssetReintegrationDocument.
 * @see com.test_25feb.dynamohr126tabs.AssetReintegrationDocument
 */
@Service("Dynamohr126tabs.AssetReintegrationDocumentService")
public class AssetReintegrationDocumentServiceImpl implements AssetReintegrationDocumentService {


    private static final Logger LOGGER = LoggerFactory.getLogger(AssetReintegrationDocumentServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.AssetReintegrationDocumentDao")
    private WMGenericDao<AssetReintegrationDocument, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AssetReintegrationDocument, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<AssetReintegrationDocument> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssetReintegrationDocument create(AssetReintegrationDocument assetreintegrationdocument) {
        LOGGER.debug("Creating a new assetreintegrationdocument with information: {}" , assetreintegrationdocument);
        return this.wmGenericDao.create(assetreintegrationdocument);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssetReintegrationDocument delete(Integer assetreintegrationdocumentId) throws EntityNotFoundException {
        LOGGER.debug("Deleting assetreintegrationdocument with id: {}" , assetreintegrationdocumentId);
        AssetReintegrationDocument deleted = this.wmGenericDao.findById(assetreintegrationdocumentId);
        if (deleted == null) {
            LOGGER.debug("No assetreintegrationdocument found with id: {}" , assetreintegrationdocumentId);
            throw new EntityNotFoundException(String.valueOf(assetreintegrationdocumentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<AssetReintegrationDocument> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all assetreintegrationdocuments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<AssetReintegrationDocument> findAll(Pageable pageable) {
        LOGGER.debug("Finding all assetreintegrationdocuments");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssetReintegrationDocument findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding assetreintegrationdocument by id: {}" , id);
        AssetReintegrationDocument assetreintegrationdocument=this.wmGenericDao.findById(id);
        if(assetreintegrationdocument==null){
            LOGGER.debug("No assetreintegrationdocument found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return assetreintegrationdocument;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssetReintegrationDocument update(AssetReintegrationDocument updated) throws EntityNotFoundException {
        LOGGER.debug("Updating assetreintegrationdocument with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdAssetReintegrationDocument();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


