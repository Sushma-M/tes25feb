/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class Viaje.
 * @see com.test_25feb.dynamohr126tabs.Viaje
 */
@Service("Dynamohr126tabs.ViajeService")
public class ViajeServiceImpl implements ViajeService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ViajeServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.ViajeDao")
    private WMGenericDao<Viaje, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Viaje, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<Viaje> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public Viaje create(Viaje viaje) {
        LOGGER.debug("Creating a new viaje with information: {}" , viaje);
        return this.wmGenericDao.create(viaje);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Viaje delete(Integer viajeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting viaje with id: {}" , viajeId);
        Viaje deleted = this.wmGenericDao.findById(viajeId);
        if (deleted == null) {
            LOGGER.debug("No viaje found with id: {}" , viajeId);
            throw new EntityNotFoundException(String.valueOf(viajeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<Viaje> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all viajes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<Viaje> findAll(Pageable pageable) {
        LOGGER.debug("Finding all viajes");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Viaje findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding viaje by id: {}" , id);
        Viaje viaje=this.wmGenericDao.findById(id);
        if(viaje==null){
            LOGGER.debug("No viaje found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return viaje;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Viaje update(Viaje updated) throws EntityNotFoundException {
        LOGGER.debug("Updating viaje with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdTravel();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


