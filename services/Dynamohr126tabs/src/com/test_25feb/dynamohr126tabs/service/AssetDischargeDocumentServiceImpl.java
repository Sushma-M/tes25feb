/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class AssetDischargeDocument.
 * @see com.test_25feb.dynamohr126tabs.AssetDischargeDocument
 */
@Service("Dynamohr126tabs.AssetDischargeDocumentService")
public class AssetDischargeDocumentServiceImpl implements AssetDischargeDocumentService {


    private static final Logger LOGGER = LoggerFactory.getLogger(AssetDischargeDocumentServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.AssetDischargeDocumentDao")
    private WMGenericDao<AssetDischargeDocument, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AssetDischargeDocument, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<AssetDischargeDocument> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssetDischargeDocument create(AssetDischargeDocument assetdischargedocument) {
        LOGGER.debug("Creating a new assetdischargedocument with information: {}" , assetdischargedocument);
        return this.wmGenericDao.create(assetdischargedocument);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssetDischargeDocument delete(Integer assetdischargedocumentId) throws EntityNotFoundException {
        LOGGER.debug("Deleting assetdischargedocument with id: {}" , assetdischargedocumentId);
        AssetDischargeDocument deleted = this.wmGenericDao.findById(assetdischargedocumentId);
        if (deleted == null) {
            LOGGER.debug("No assetdischargedocument found with id: {}" , assetdischargedocumentId);
            throw new EntityNotFoundException(String.valueOf(assetdischargedocumentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<AssetDischargeDocument> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all assetdischargedocuments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<AssetDischargeDocument> findAll(Pageable pageable) {
        LOGGER.debug("Finding all assetdischargedocuments");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssetDischargeDocument findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding assetdischargedocument by id: {}" , id);
        AssetDischargeDocument assetdischargedocument=this.wmGenericDao.findById(id);
        if(assetdischargedocument==null){
            LOGGER.debug("No assetdischargedocument found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return assetdischargedocument;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssetDischargeDocument update(AssetDischargeDocument updated) throws EntityNotFoundException {
        LOGGER.debug("Updating assetdischargedocument with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdAssetDischargeDocument();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


