/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class ListAssetReintegrated.
 * @see com.test_25feb.dynamohr126tabs.ListAssetReintegrated
 */
@Service("Dynamohr126tabs.ListAssetReintegratedService")
public class ListAssetReintegratedServiceImpl implements ListAssetReintegratedService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ListAssetReintegratedServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.ListAssetReintegratedDao")
    private WMGenericDao<ListAssetReintegrated, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ListAssetReintegrated, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<ListAssetReintegrated> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListAssetReintegrated create(ListAssetReintegrated listassetreintegrated) {
        LOGGER.debug("Creating a new listassetreintegrated with information: {}" , listassetreintegrated);
        return this.wmGenericDao.create(listassetreintegrated);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListAssetReintegrated delete(Integer listassetreintegratedId) throws EntityNotFoundException {
        LOGGER.debug("Deleting listassetreintegrated with id: {}" , listassetreintegratedId);
        ListAssetReintegrated deleted = this.wmGenericDao.findById(listassetreintegratedId);
        if (deleted == null) {
            LOGGER.debug("No listassetreintegrated found with id: {}" , listassetreintegratedId);
            throw new EntityNotFoundException(String.valueOf(listassetreintegratedId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ListAssetReintegrated> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all listassetreintegrateds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ListAssetReintegrated> findAll(Pageable pageable) {
        LOGGER.debug("Finding all listassetreintegrateds");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListAssetReintegrated findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding listassetreintegrated by id: {}" , id);
        ListAssetReintegrated listassetreintegrated=this.wmGenericDao.findById(id);
        if(listassetreintegrated==null){
            LOGGER.debug("No listassetreintegrated found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return listassetreintegrated;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListAssetReintegrated update(ListAssetReintegrated updated) throws EntityNotFoundException {
        LOGGER.debug("Updating listassetreintegrated with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdListAssetReintegrated();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


