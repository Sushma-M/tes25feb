/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class EmployeeMessage.
 * @see com.test_25feb.dynamohr126tabs.EmployeeMessage
 */
@Service("Dynamohr126tabs.EmployeeMessageService")
public class EmployeeMessageServiceImpl implements EmployeeMessageService {


    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeMessageServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeMessageDao")
    private WMGenericDao<EmployeeMessage, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmployeeMessage, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<EmployeeMessage> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeMessage create(EmployeeMessage employeemessage) {
        LOGGER.debug("Creating a new employeemessage with information: {}" , employeemessage);
        return this.wmGenericDao.create(employeemessage);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeMessage delete(Integer employeemessageId) throws EntityNotFoundException {
        LOGGER.debug("Deleting employeemessage with id: {}" , employeemessageId);
        EmployeeMessage deleted = this.wmGenericDao.findById(employeemessageId);
        if (deleted == null) {
            LOGGER.debug("No employeemessage found with id: {}" , employeemessageId);
            throw new EntityNotFoundException(String.valueOf(employeemessageId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<EmployeeMessage> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all employeemessages");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<EmployeeMessage> findAll(Pageable pageable) {
        LOGGER.debug("Finding all employeemessages");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeMessage findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding employeemessage by id: {}" , id);
        EmployeeMessage employeemessage=this.wmGenericDao.findById(id);
        if(employeemessage==null){
            LOGGER.debug("No employeemessage found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return employeemessage;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeMessage update(EmployeeMessage updated) throws EntityNotFoundException {
        LOGGER.debug("Updating employeemessage with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdEmployeeMessage();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


