/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class TypeTravellingExpense.
 * @see com.test_25feb.dynamohr126tabs.TypeTravellingExpense
 */

public interface TypeTravellingExpenseService {
   /**
	 * Creates a new typetravellingexpense.
	 * 
	 * @param created
	 *            The information of the created typetravellingexpense.
	 * @return The created typetravellingexpense.
	 */
	public TypeTravellingExpense create(TypeTravellingExpense created);

	/**
	 * Deletes a typetravellingexpense.
	 * 
	 * @param typetravellingexpenseId
	 *            The id of the deleted typetravellingexpense.
	 * @return The deleted typetravellingexpense.
	 * @throws EntityNotFoundException
	 *             if no typetravellingexpense is found with the given id.
	 */
	public TypeTravellingExpense delete(Integer typetravellingexpenseId) throws EntityNotFoundException;

	/**
	 * Finds all typetravellingexpenses.
	 * 
	 * @return A list of typetravellingexpenses.
	 */
	public Page<TypeTravellingExpense> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<TypeTravellingExpense> findAll(Pageable pageable);
	
	/**
	 * Finds typetravellingexpense by id.
	 * 
	 * @param id
	 *            The id of the wanted typetravellingexpense.
	 * @return The found typetravellingexpense. If no typetravellingexpense is found, this method returns
	 *         null.
	 */
	public TypeTravellingExpense findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a typetravellingexpense.
	 * 
	 * @param updated
	 *            The information of the updated typetravellingexpense.
	 * @return The updated typetravellingexpense.
	 * @throws EntityNotFoundException
	 *             if no typetravellingexpense is found with given id.
	 */
	public TypeTravellingExpense update(TypeTravellingExpense updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the typetravellingexpenses in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the typetravellingexpense.
	 */

	public long countAll();


    public Page<TypeTravellingExpense> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

