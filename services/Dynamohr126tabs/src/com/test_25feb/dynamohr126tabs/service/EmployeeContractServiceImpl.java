/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class EmployeeContract.
 * @see com.test_25feb.dynamohr126tabs.EmployeeContract
 */
@Service("Dynamohr126tabs.EmployeeContractService")
public class EmployeeContractServiceImpl implements EmployeeContractService {


    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeContractServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeContractDao")
    private WMGenericDao<EmployeeContract, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmployeeContract, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<EmployeeContract> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeContract create(EmployeeContract employeecontract) {
        LOGGER.debug("Creating a new employeecontract with information: {}" , employeecontract);
        return this.wmGenericDao.create(employeecontract);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeContract delete(Integer employeecontractId) throws EntityNotFoundException {
        LOGGER.debug("Deleting employeecontract with id: {}" , employeecontractId);
        EmployeeContract deleted = this.wmGenericDao.findById(employeecontractId);
        if (deleted == null) {
            LOGGER.debug("No employeecontract found with id: {}" , employeecontractId);
            throw new EntityNotFoundException(String.valueOf(employeecontractId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<EmployeeContract> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all employeecontracts");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<EmployeeContract> findAll(Pageable pageable) {
        LOGGER.debug("Finding all employeecontracts");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeContract findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding employeecontract by id: {}" , id);
        EmployeeContract employeecontract=this.wmGenericDao.findById(id);
        if(employeecontract==null){
            LOGGER.debug("No employeecontract found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return employeecontract;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeContract update(EmployeeContract updated) throws EntityNotFoundException {
        LOGGER.debug("Updating employeecontract with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdEmployeeContract();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


