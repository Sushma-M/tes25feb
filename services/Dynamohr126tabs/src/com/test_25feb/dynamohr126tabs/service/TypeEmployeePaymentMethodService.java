/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class TypeEmployeePaymentMethod.
 * @see com.test_25feb.dynamohr126tabs.TypeEmployeePaymentMethod
 */

public interface TypeEmployeePaymentMethodService {
   /**
	 * Creates a new typeemployeepaymentmethod.
	 * 
	 * @param created
	 *            The information of the created typeemployeepaymentmethod.
	 * @return The created typeemployeepaymentmethod.
	 */
	public TypeEmployeePaymentMethod create(TypeEmployeePaymentMethod created);

	/**
	 * Deletes a typeemployeepaymentmethod.
	 * 
	 * @param typeemployeepaymentmethodId
	 *            The id of the deleted typeemployeepaymentmethod.
	 * @return The deleted typeemployeepaymentmethod.
	 * @throws EntityNotFoundException
	 *             if no typeemployeepaymentmethod is found with the given id.
	 */
	public TypeEmployeePaymentMethod delete(Integer typeemployeepaymentmethodId) throws EntityNotFoundException;

	/**
	 * Finds all typeemployeepaymentmethods.
	 * 
	 * @return A list of typeemployeepaymentmethods.
	 */
	public Page<TypeEmployeePaymentMethod> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<TypeEmployeePaymentMethod> findAll(Pageable pageable);
	
	/**
	 * Finds typeemployeepaymentmethod by id.
	 * 
	 * @param id
	 *            The id of the wanted typeemployeepaymentmethod.
	 * @return The found typeemployeepaymentmethod. If no typeemployeepaymentmethod is found, this method returns
	 *         null.
	 */
	public TypeEmployeePaymentMethod findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a typeemployeepaymentmethod.
	 * 
	 * @param updated
	 *            The information of the updated typeemployeepaymentmethod.
	 * @return The updated typeemployeepaymentmethod.
	 * @throws EntityNotFoundException
	 *             if no typeemployeepaymentmethod is found with given id.
	 */
	public TypeEmployeePaymentMethod update(TypeEmployeePaymentMethod updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the typeemployeepaymentmethods in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the typeemployeepaymentmethod.
	 */

	public long countAll();


    public Page<TypeEmployeePaymentMethod> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

