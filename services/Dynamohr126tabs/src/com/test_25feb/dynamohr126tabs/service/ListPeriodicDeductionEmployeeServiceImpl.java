/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class ListPeriodicDeductionEmployee.
 * @see com.test_25feb.dynamohr126tabs.ListPeriodicDeductionEmployee
 */
@Service("Dynamohr126tabs.ListPeriodicDeductionEmployeeService")
public class ListPeriodicDeductionEmployeeServiceImpl implements ListPeriodicDeductionEmployeeService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ListPeriodicDeductionEmployeeServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.ListPeriodicDeductionEmployeeDao")
    private WMGenericDao<ListPeriodicDeductionEmployee, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ListPeriodicDeductionEmployee, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<ListPeriodicDeductionEmployee> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListPeriodicDeductionEmployee create(ListPeriodicDeductionEmployee listperiodicdeductionemployee) {
        LOGGER.debug("Creating a new listperiodicdeductionemployee with information: {}" , listperiodicdeductionemployee);
        return this.wmGenericDao.create(listperiodicdeductionemployee);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListPeriodicDeductionEmployee delete(Integer listperiodicdeductionemployeeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting listperiodicdeductionemployee with id: {}" , listperiodicdeductionemployeeId);
        ListPeriodicDeductionEmployee deleted = this.wmGenericDao.findById(listperiodicdeductionemployeeId);
        if (deleted == null) {
            LOGGER.debug("No listperiodicdeductionemployee found with id: {}" , listperiodicdeductionemployeeId);
            throw new EntityNotFoundException(String.valueOf(listperiodicdeductionemployeeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ListPeriodicDeductionEmployee> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all listperiodicdeductionemployees");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ListPeriodicDeductionEmployee> findAll(Pageable pageable) {
        LOGGER.debug("Finding all listperiodicdeductionemployees");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListPeriodicDeductionEmployee findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding listperiodicdeductionemployee by id: {}" , id);
        ListPeriodicDeductionEmployee listperiodicdeductionemployee=this.wmGenericDao.findById(id);
        if(listperiodicdeductionemployee==null){
            LOGGER.debug("No listperiodicdeductionemployee found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return listperiodicdeductionemployee;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListPeriodicDeductionEmployee update(ListPeriodicDeductionEmployee updated) throws EntityNotFoundException {
        LOGGER.debug("Updating listperiodicdeductionemployee with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdListPeriodicDeductionEmployee();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


