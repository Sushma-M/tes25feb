/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class Currency.
 * @see com.test_25feb.dynamohr126tabs.Currency
 */

public interface CurrencyService {
   /**
	 * Creates a new currency.
	 * 
	 * @param created
	 *            The information of the created currency.
	 * @return The created currency.
	 */
	public Currency create(Currency created);

	/**
	 * Deletes a currency.
	 * 
	 * @param currencyId
	 *            The id of the deleted currency.
	 * @return The deleted currency.
	 * @throws EntityNotFoundException
	 *             if no currency is found with the given id.
	 */
	public Currency delete(Integer currencyId) throws EntityNotFoundException;

	/**
	 * Finds all currencys.
	 * 
	 * @return A list of currencys.
	 */
	public Page<Currency> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Currency> findAll(Pageable pageable);
	
	/**
	 * Finds currency by id.
	 * 
	 * @param id
	 *            The id of the wanted currency.
	 * @return The found currency. If no currency is found, this method returns
	 *         null.
	 */
	public Currency findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a currency.
	 * 
	 * @param updated
	 *            The information of the updated currency.
	 * @return The updated currency.
	 * @throws EntityNotFoundException
	 *             if no currency is found with given id.
	 */
	public Currency update(Currency updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the currencys in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the currency.
	 */

	public long countAll();


    public Page<Currency> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

