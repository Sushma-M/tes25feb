/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class EmployeeWorkDay.
 * @see com.test_25feb.dynamohr126tabs.EmployeeWorkDay
 */
@Service("Dynamohr126tabs.EmployeeWorkDayService")
public class EmployeeWorkDayServiceImpl implements EmployeeWorkDayService {


    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeWorkDayServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeWorkDayDao")
    private WMGenericDao<EmployeeWorkDay, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmployeeWorkDay, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<EmployeeWorkDay> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeWorkDay create(EmployeeWorkDay employeeworkday) {
        LOGGER.debug("Creating a new employeeworkday with information: {}" , employeeworkday);
        return this.wmGenericDao.create(employeeworkday);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeWorkDay delete(Integer employeeworkdayId) throws EntityNotFoundException {
        LOGGER.debug("Deleting employeeworkday with id: {}" , employeeworkdayId);
        EmployeeWorkDay deleted = this.wmGenericDao.findById(employeeworkdayId);
        if (deleted == null) {
            LOGGER.debug("No employeeworkday found with id: {}" , employeeworkdayId);
            throw new EntityNotFoundException(String.valueOf(employeeworkdayId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<EmployeeWorkDay> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all employeeworkdays");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<EmployeeWorkDay> findAll(Pageable pageable) {
        LOGGER.debug("Finding all employeeworkdays");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeWorkDay findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding employeeworkday by id: {}" , id);
        EmployeeWorkDay employeeworkday=this.wmGenericDao.findById(id);
        if(employeeworkday==null){
            LOGGER.debug("No employeeworkday found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return employeeworkday;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeWorkDay update(EmployeeWorkDay updated) throws EntityNotFoundException {
        LOGGER.debug("Updating employeeworkday with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdEmployeeWorkDay();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


