/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class CompanyDepartment.
 * @see com.test_25feb.dynamohr126tabs.CompanyDepartment
 */

public interface CompanyDepartmentService {
   /**
	 * Creates a new companydepartment.
	 * 
	 * @param created
	 *            The information of the created companydepartment.
	 * @return The created companydepartment.
	 */
	public CompanyDepartment create(CompanyDepartment created);

	/**
	 * Deletes a companydepartment.
	 * 
	 * @param companydepartmentId
	 *            The id of the deleted companydepartment.
	 * @return The deleted companydepartment.
	 * @throws EntityNotFoundException
	 *             if no companydepartment is found with the given id.
	 */
	public CompanyDepartment delete(Integer companydepartmentId) throws EntityNotFoundException;

	/**
	 * Finds all companydepartments.
	 * 
	 * @return A list of companydepartments.
	 */
	public Page<CompanyDepartment> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<CompanyDepartment> findAll(Pageable pageable);
	
	/**
	 * Finds companydepartment by id.
	 * 
	 * @param id
	 *            The id of the wanted companydepartment.
	 * @return The found companydepartment. If no companydepartment is found, this method returns
	 *         null.
	 */
	public CompanyDepartment findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a companydepartment.
	 * 
	 * @param updated
	 *            The information of the updated companydepartment.
	 * @return The updated companydepartment.
	 * @throws EntityNotFoundException
	 *             if no companydepartment is found with given id.
	 */
	public CompanyDepartment update(CompanyDepartment updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the companydepartments in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the companydepartment.
	 */

	public long countAll();


    public Page<CompanyDepartment> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

