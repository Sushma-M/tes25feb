/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class TypeTravellingExpense.
 * @see com.test_25feb.dynamohr126tabs.TypeTravellingExpense
 */
@Service("Dynamohr126tabs.TypeTravellingExpenseService")
public class TypeTravellingExpenseServiceImpl implements TypeTravellingExpenseService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TypeTravellingExpenseServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.TypeTravellingExpenseDao")
    private WMGenericDao<TypeTravellingExpense, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeTravellingExpense, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<TypeTravellingExpense> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeTravellingExpense create(TypeTravellingExpense typetravellingexpense) {
        LOGGER.debug("Creating a new typetravellingexpense with information: {}" , typetravellingexpense);
        return this.wmGenericDao.create(typetravellingexpense);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeTravellingExpense delete(Integer typetravellingexpenseId) throws EntityNotFoundException {
        LOGGER.debug("Deleting typetravellingexpense with id: {}" , typetravellingexpenseId);
        TypeTravellingExpense deleted = this.wmGenericDao.findById(typetravellingexpenseId);
        if (deleted == null) {
            LOGGER.debug("No typetravellingexpense found with id: {}" , typetravellingexpenseId);
            throw new EntityNotFoundException(String.valueOf(typetravellingexpenseId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeTravellingExpense> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all typetravellingexpenses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeTravellingExpense> findAll(Pageable pageable) {
        LOGGER.debug("Finding all typetravellingexpenses");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeTravellingExpense findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding typetravellingexpense by id: {}" , id);
        TypeTravellingExpense typetravellingexpense=this.wmGenericDao.findById(id);
        if(typetravellingexpense==null){
            LOGGER.debug("No typetravellingexpense found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return typetravellingexpense;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeTravellingExpense update(TypeTravellingExpense updated) throws EntityNotFoundException {
        LOGGER.debug("Updating typetravellingexpense with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdTypeTravellingExpense();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


