/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class MobileNumber.
 * @see com.test_25feb.dynamohr126tabs.MobileNumber
 */

public interface MobileNumberService {
   /**
	 * Creates a new mobilenumber.
	 * 
	 * @param created
	 *            The information of the created mobilenumber.
	 * @return The created mobilenumber.
	 */
	public MobileNumber create(MobileNumber created);

	/**
	 * Deletes a mobilenumber.
	 * 
	 * @param mobilenumberId
	 *            The id of the deleted mobilenumber.
	 * @return The deleted mobilenumber.
	 * @throws EntityNotFoundException
	 *             if no mobilenumber is found with the given id.
	 */
	public MobileNumber delete(Integer mobilenumberId) throws EntityNotFoundException;

	/**
	 * Finds all mobilenumbers.
	 * 
	 * @return A list of mobilenumbers.
	 */
	public Page<MobileNumber> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<MobileNumber> findAll(Pageable pageable);
	
	/**
	 * Finds mobilenumber by id.
	 * 
	 * @param id
	 *            The id of the wanted mobilenumber.
	 * @return The found mobilenumber. If no mobilenumber is found, this method returns
	 *         null.
	 */
	public MobileNumber findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a mobilenumber.
	 * 
	 * @param updated
	 *            The information of the updated mobilenumber.
	 * @return The updated mobilenumber.
	 * @throws EntityNotFoundException
	 *             if no mobilenumber is found with given id.
	 */
	public MobileNumber update(MobileNumber updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the mobilenumbers in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the mobilenumber.
	 */

	public long countAll();


    public Page<MobileNumber> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

