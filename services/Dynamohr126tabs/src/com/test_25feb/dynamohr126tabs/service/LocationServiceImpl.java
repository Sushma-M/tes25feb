/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class Location.
 * @see com.test_25feb.dynamohr126tabs.Location
 */
@Service("Dynamohr126tabs.LocationService")
public class LocationServiceImpl implements LocationService {


    private static final Logger LOGGER = LoggerFactory.getLogger(LocationServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.LocationDao")
    private WMGenericDao<Location, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Location, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<Location> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public Location create(Location location) {
        LOGGER.debug("Creating a new location with information: {}" , location);
        return this.wmGenericDao.create(location);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Location delete(Integer locationId) throws EntityNotFoundException {
        LOGGER.debug("Deleting location with id: {}" , locationId);
        Location deleted = this.wmGenericDao.findById(locationId);
        if (deleted == null) {
            LOGGER.debug("No location found with id: {}" , locationId);
            throw new EntityNotFoundException(String.valueOf(locationId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<Location> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all locations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<Location> findAll(Pageable pageable) {
        LOGGER.debug("Finding all locations");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Location findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding location by id: {}" , id);
        Location location=this.wmGenericDao.findById(id);
        if(location==null){
            LOGGER.debug("No location found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return location;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Location update(Location updated) throws EntityNotFoundException {
        LOGGER.debug("Updating location with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdLocation();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


