/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class Bank.
 * @see com.test_25feb.dynamohr126tabs.Bank
 */

public interface BankService {
   /**
	 * Creates a new bank.
	 * 
	 * @param created
	 *            The information of the created bank.
	 * @return The created bank.
	 */
	public Bank create(Bank created);

	/**
	 * Deletes a bank.
	 * 
	 * @param bankId
	 *            The id of the deleted bank.
	 * @return The deleted bank.
	 * @throws EntityNotFoundException
	 *             if no bank is found with the given id.
	 */
	public Bank delete(Integer bankId) throws EntityNotFoundException;

	/**
	 * Finds all banks.
	 * 
	 * @return A list of banks.
	 */
	public Page<Bank> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Bank> findAll(Pageable pageable);
	
	/**
	 * Finds bank by id.
	 * 
	 * @param id
	 *            The id of the wanted bank.
	 * @return The found bank. If no bank is found, this method returns
	 *         null.
	 */
	public Bank findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a bank.
	 * 
	 * @param updated
	 *            The information of the updated bank.
	 * @return The updated bank.
	 * @throws EntityNotFoundException
	 *             if no bank is found with given id.
	 */
	public Bank update(Bank updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the banks in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the bank.
	 */

	public long countAll();


    public Page<Bank> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

