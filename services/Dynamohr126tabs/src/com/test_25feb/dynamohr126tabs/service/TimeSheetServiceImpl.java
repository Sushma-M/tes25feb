/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class TimeSheet.
 * @see com.test_25feb.dynamohr126tabs.TimeSheet
 */
@Service("Dynamohr126tabs.TimeSheetService")
public class TimeSheetServiceImpl implements TimeSheetService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TimeSheetServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.TimeSheetDao")
    private WMGenericDao<TimeSheet, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TimeSheet, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<TimeSheet> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public TimeSheet create(TimeSheet timesheet) {
        LOGGER.debug("Creating a new timesheet with information: {}" , timesheet);
        return this.wmGenericDao.create(timesheet);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TimeSheet delete(Integer timesheetId) throws EntityNotFoundException {
        LOGGER.debug("Deleting timesheet with id: {}" , timesheetId);
        TimeSheet deleted = this.wmGenericDao.findById(timesheetId);
        if (deleted == null) {
            LOGGER.debug("No timesheet found with id: {}" , timesheetId);
            throw new EntityNotFoundException(String.valueOf(timesheetId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TimeSheet> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all timesheets");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TimeSheet> findAll(Pageable pageable) {
        LOGGER.debug("Finding all timesheets");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TimeSheet findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding timesheet by id: {}" , id);
        TimeSheet timesheet=this.wmGenericDao.findById(id);
        if(timesheet==null){
            LOGGER.debug("No timesheet found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return timesheet;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TimeSheet update(TimeSheet updated) throws EntityNotFoundException {
        LOGGER.debug("Updating timesheet with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdTimeSheet();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


