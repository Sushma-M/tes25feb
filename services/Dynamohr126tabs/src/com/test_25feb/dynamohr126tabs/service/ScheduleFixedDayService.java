/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class ScheduleFixedDay.
 * @see com.test_25feb.dynamohr126tabs.ScheduleFixedDay
 */

public interface ScheduleFixedDayService {
   /**
	 * Creates a new schedulefixedday.
	 * 
	 * @param created
	 *            The information of the created schedulefixedday.
	 * @return The created schedulefixedday.
	 */
	public ScheduleFixedDay create(ScheduleFixedDay created);

	/**
	 * Deletes a schedulefixedday.
	 * 
	 * @param schedulefixeddayId
	 *            The id of the deleted schedulefixedday.
	 * @return The deleted schedulefixedday.
	 * @throws EntityNotFoundException
	 *             if no schedulefixedday is found with the given id.
	 */
	public ScheduleFixedDay delete(Integer schedulefixeddayId) throws EntityNotFoundException;

	/**
	 * Finds all schedulefixeddays.
	 * 
	 * @return A list of schedulefixeddays.
	 */
	public Page<ScheduleFixedDay> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<ScheduleFixedDay> findAll(Pageable pageable);
	
	/**
	 * Finds schedulefixedday by id.
	 * 
	 * @param id
	 *            The id of the wanted schedulefixedday.
	 * @return The found schedulefixedday. If no schedulefixedday is found, this method returns
	 *         null.
	 */
	public ScheduleFixedDay findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a schedulefixedday.
	 * 
	 * @param updated
	 *            The information of the updated schedulefixedday.
	 * @return The updated schedulefixedday.
	 * @throws EntityNotFoundException
	 *             if no schedulefixedday is found with given id.
	 */
	public ScheduleFixedDay update(ScheduleFixedDay updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the schedulefixeddays in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the schedulefixedday.
	 */

	public long countAll();


    public Page<ScheduleFixedDay> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

