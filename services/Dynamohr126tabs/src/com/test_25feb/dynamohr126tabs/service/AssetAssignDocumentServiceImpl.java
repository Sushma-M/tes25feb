/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class AssetAssignDocument.
 * @see com.test_25feb.dynamohr126tabs.AssetAssignDocument
 */
@Service("Dynamohr126tabs.AssetAssignDocumentService")
public class AssetAssignDocumentServiceImpl implements AssetAssignDocumentService {


    private static final Logger LOGGER = LoggerFactory.getLogger(AssetAssignDocumentServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.AssetAssignDocumentDao")
    private WMGenericDao<AssetAssignDocument, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AssetAssignDocument, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<AssetAssignDocument> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssetAssignDocument create(AssetAssignDocument assetassigndocument) {
        LOGGER.debug("Creating a new assetassigndocument with information: {}" , assetassigndocument);
        return this.wmGenericDao.create(assetassigndocument);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssetAssignDocument delete(Integer assetassigndocumentId) throws EntityNotFoundException {
        LOGGER.debug("Deleting assetassigndocument with id: {}" , assetassigndocumentId);
        AssetAssignDocument deleted = this.wmGenericDao.findById(assetassigndocumentId);
        if (deleted == null) {
            LOGGER.debug("No assetassigndocument found with id: {}" , assetassigndocumentId);
            throw new EntityNotFoundException(String.valueOf(assetassigndocumentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<AssetAssignDocument> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all assetassigndocuments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<AssetAssignDocument> findAll(Pageable pageable) {
        LOGGER.debug("Finding all assetassigndocuments");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssetAssignDocument findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding assetassigndocument by id: {}" , id);
        AssetAssignDocument assetassigndocument=this.wmGenericDao.findById(id);
        if(assetassigndocument==null){
            LOGGER.debug("No assetassigndocument found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return assetassigndocument;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssetAssignDocument update(AssetAssignDocument updated) throws EntityNotFoundException {
        LOGGER.debug("Updating assetassigndocument with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdAssetAssignDocument();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


