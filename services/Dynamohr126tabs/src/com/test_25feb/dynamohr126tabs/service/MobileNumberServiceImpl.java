/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class MobileNumber.
 * @see com.test_25feb.dynamohr126tabs.MobileNumber
 */
@Service("Dynamohr126tabs.MobileNumberService")
public class MobileNumberServiceImpl implements MobileNumberService {


    private static final Logger LOGGER = LoggerFactory.getLogger(MobileNumberServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.MobileNumberDao")
    private WMGenericDao<MobileNumber, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<MobileNumber, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<MobileNumber> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public MobileNumber create(MobileNumber mobilenumber) {
        LOGGER.debug("Creating a new mobilenumber with information: {}" , mobilenumber);
        return this.wmGenericDao.create(mobilenumber);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public MobileNumber delete(Integer mobilenumberId) throws EntityNotFoundException {
        LOGGER.debug("Deleting mobilenumber with id: {}" , mobilenumberId);
        MobileNumber deleted = this.wmGenericDao.findById(mobilenumberId);
        if (deleted == null) {
            LOGGER.debug("No mobilenumber found with id: {}" , mobilenumberId);
            throw new EntityNotFoundException(String.valueOf(mobilenumberId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<MobileNumber> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all mobilenumbers");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<MobileNumber> findAll(Pageable pageable) {
        LOGGER.debug("Finding all mobilenumbers");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public MobileNumber findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding mobilenumber by id: {}" , id);
        MobileNumber mobilenumber=this.wmGenericDao.findById(id);
        if(mobilenumber==null){
            LOGGER.debug("No mobilenumber found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return mobilenumber;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public MobileNumber update(MobileNumber updated) throws EntityNotFoundException {
        LOGGER.debug("Updating mobilenumber with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdCellphone();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


