/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class TypeAsset.
 * @see com.test_25feb.dynamohr126tabs.TypeAsset
 */
@Service("Dynamohr126tabs.TypeAssetService")
public class TypeAssetServiceImpl implements TypeAssetService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TypeAssetServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.TypeAssetDao")
    private WMGenericDao<TypeAsset, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeAsset, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<TypeAsset> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeAsset create(TypeAsset typeasset) {
        LOGGER.debug("Creating a new typeasset with information: {}" , typeasset);
        return this.wmGenericDao.create(typeasset);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeAsset delete(Integer typeassetId) throws EntityNotFoundException {
        LOGGER.debug("Deleting typeasset with id: {}" , typeassetId);
        TypeAsset deleted = this.wmGenericDao.findById(typeassetId);
        if (deleted == null) {
            LOGGER.debug("No typeasset found with id: {}" , typeassetId);
            throw new EntityNotFoundException(String.valueOf(typeassetId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeAsset> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all typeassets");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeAsset> findAll(Pageable pageable) {
        LOGGER.debug("Finding all typeassets");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeAsset findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding typeasset by id: {}" , id);
        TypeAsset typeasset=this.wmGenericDao.findById(id);
        if(typeasset==null){
            LOGGER.debug("No typeasset found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return typeasset;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeAsset update(TypeAsset updated) throws EntityNotFoundException {
        LOGGER.debug("Updating typeasset with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdTypeAsset();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


