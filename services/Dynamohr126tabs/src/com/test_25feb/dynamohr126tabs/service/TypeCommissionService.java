/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class TypeCommission.
 * @see com.test_25feb.dynamohr126tabs.TypeCommission
 */

public interface TypeCommissionService {
   /**
	 * Creates a new typecommission.
	 * 
	 * @param created
	 *            The information of the created typecommission.
	 * @return The created typecommission.
	 */
	public TypeCommission create(TypeCommission created);

	/**
	 * Deletes a typecommission.
	 * 
	 * @param typecommissionId
	 *            The id of the deleted typecommission.
	 * @return The deleted typecommission.
	 * @throws EntityNotFoundException
	 *             if no typecommission is found with the given id.
	 */
	public TypeCommission delete(Integer typecommissionId) throws EntityNotFoundException;

	/**
	 * Finds all typecommissions.
	 * 
	 * @return A list of typecommissions.
	 */
	public Page<TypeCommission> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<TypeCommission> findAll(Pageable pageable);
	
	/**
	 * Finds typecommission by id.
	 * 
	 * @param id
	 *            The id of the wanted typecommission.
	 * @return The found typecommission. If no typecommission is found, this method returns
	 *         null.
	 */
	public TypeCommission findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a typecommission.
	 * 
	 * @param updated
	 *            The information of the updated typecommission.
	 * @return The updated typecommission.
	 * @throws EntityNotFoundException
	 *             if no typecommission is found with given id.
	 */
	public TypeCommission update(TypeCommission updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the typecommissions in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the typecommission.
	 */

	public long countAll();


    public Page<TypeCommission> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

