/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class ListEmployeePosition.
 * @see com.test_25feb.dynamohr126tabs.ListEmployeePosition
 */

public interface ListEmployeePositionService {
   /**
	 * Creates a new listemployeeposition.
	 * 
	 * @param created
	 *            The information of the created listemployeeposition.
	 * @return The created listemployeeposition.
	 */
	public ListEmployeePosition create(ListEmployeePosition created);

	/**
	 * Deletes a listemployeeposition.
	 * 
	 * @param listemployeepositionId
	 *            The id of the deleted listemployeeposition.
	 * @return The deleted listemployeeposition.
	 * @throws EntityNotFoundException
	 *             if no listemployeeposition is found with the given id.
	 */
	public ListEmployeePosition delete(Integer listemployeepositionId) throws EntityNotFoundException;

	/**
	 * Finds all listemployeepositions.
	 * 
	 * @return A list of listemployeepositions.
	 */
	public Page<ListEmployeePosition> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<ListEmployeePosition> findAll(Pageable pageable);
	
	/**
	 * Finds listemployeeposition by id.
	 * 
	 * @param id
	 *            The id of the wanted listemployeeposition.
	 * @return The found listemployeeposition. If no listemployeeposition is found, this method returns
	 *         null.
	 */
	public ListEmployeePosition findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a listemployeeposition.
	 * 
	 * @param updated
	 *            The information of the updated listemployeeposition.
	 * @return The updated listemployeeposition.
	 * @throws EntityNotFoundException
	 *             if no listemployeeposition is found with given id.
	 */
	public ListEmployeePosition update(ListEmployeePosition updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the listemployeepositions in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the listemployeeposition.
	 */

	public long countAll();


    public Page<ListEmployeePosition> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

