/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class JustifiedAbsense.
 * @see com.test_25feb.dynamohr126tabs.JustifiedAbsense
 */
@Service("Dynamohr126tabs.JustifiedAbsenseService")
public class JustifiedAbsenseServiceImpl implements JustifiedAbsenseService {


    private static final Logger LOGGER = LoggerFactory.getLogger(JustifiedAbsenseServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.JustifiedAbsenseDao")
    private WMGenericDao<JustifiedAbsense, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<JustifiedAbsense, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<JustifiedAbsense> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public JustifiedAbsense create(JustifiedAbsense justifiedabsense) {
        LOGGER.debug("Creating a new justifiedabsense with information: {}" , justifiedabsense);
        return this.wmGenericDao.create(justifiedabsense);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public JustifiedAbsense delete(Integer justifiedabsenseId) throws EntityNotFoundException {
        LOGGER.debug("Deleting justifiedabsense with id: {}" , justifiedabsenseId);
        JustifiedAbsense deleted = this.wmGenericDao.findById(justifiedabsenseId);
        if (deleted == null) {
            LOGGER.debug("No justifiedabsense found with id: {}" , justifiedabsenseId);
            throw new EntityNotFoundException(String.valueOf(justifiedabsenseId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<JustifiedAbsense> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all justifiedabsenses");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<JustifiedAbsense> findAll(Pageable pageable) {
        LOGGER.debug("Finding all justifiedabsenses");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public JustifiedAbsense findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding justifiedabsense by id: {}" , id);
        JustifiedAbsense justifiedabsense=this.wmGenericDao.findById(id);
        if(justifiedabsense==null){
            LOGGER.debug("No justifiedabsense found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return justifiedabsense;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public JustifiedAbsense update(JustifiedAbsense updated) throws EntityNotFoundException {
        LOGGER.debug("Updating justifiedabsense with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdJustifiedAbsense();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


