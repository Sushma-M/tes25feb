/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class ListEmployeePhone.
 * @see com.test_25feb.dynamohr126tabs.ListEmployeePhone
 */
@Service("Dynamohr126tabs.ListEmployeePhoneService")
public class ListEmployeePhoneServiceImpl implements ListEmployeePhoneService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ListEmployeePhoneServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.ListEmployeePhoneDao")
    private WMGenericDao<ListEmployeePhone, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ListEmployeePhone, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<ListEmployeePhone> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListEmployeePhone create(ListEmployeePhone listemployeephone) {
        LOGGER.debug("Creating a new listemployeephone with information: {}" , listemployeephone);
        return this.wmGenericDao.create(listemployeephone);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListEmployeePhone delete(Integer listemployeephoneId) throws EntityNotFoundException {
        LOGGER.debug("Deleting listemployeephone with id: {}" , listemployeephoneId);
        ListEmployeePhone deleted = this.wmGenericDao.findById(listemployeephoneId);
        if (deleted == null) {
            LOGGER.debug("No listemployeephone found with id: {}" , listemployeephoneId);
            throw new EntityNotFoundException(String.valueOf(listemployeephoneId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ListEmployeePhone> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all listemployeephones");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ListEmployeePhone> findAll(Pageable pageable) {
        LOGGER.debug("Finding all listemployeephones");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListEmployeePhone findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding listemployeephone by id: {}" , id);
        ListEmployeePhone listemployeephone=this.wmGenericDao.findById(id);
        if(listemployeephone==null){
            LOGGER.debug("No listemployeephone found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return listemployeephone;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListEmployeePhone update(ListEmployeePhone updated) throws EntityNotFoundException {
        LOGGER.debug("Updating listemployeephone with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdListEmployeePhone();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


