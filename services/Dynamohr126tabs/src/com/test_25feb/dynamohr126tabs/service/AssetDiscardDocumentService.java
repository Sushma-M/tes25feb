/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class AssetDiscardDocument.
 * @see com.test_25feb.dynamohr126tabs.AssetDiscardDocument
 */

public interface AssetDiscardDocumentService {
   /**
	 * Creates a new assetdiscarddocument.
	 * 
	 * @param created
	 *            The information of the created assetdiscarddocument.
	 * @return The created assetdiscarddocument.
	 */
	public AssetDiscardDocument create(AssetDiscardDocument created);

	/**
	 * Deletes a assetdiscarddocument.
	 * 
	 * @param assetdiscarddocumentId
	 *            The id of the deleted assetdiscarddocument.
	 * @return The deleted assetdiscarddocument.
	 * @throws EntityNotFoundException
	 *             if no assetdiscarddocument is found with the given id.
	 */
	public AssetDiscardDocument delete(Integer assetdiscarddocumentId) throws EntityNotFoundException;

	/**
	 * Finds all assetdiscarddocuments.
	 * 
	 * @return A list of assetdiscarddocuments.
	 */
	public Page<AssetDiscardDocument> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<AssetDiscardDocument> findAll(Pageable pageable);
	
	/**
	 * Finds assetdiscarddocument by id.
	 * 
	 * @param id
	 *            The id of the wanted assetdiscarddocument.
	 * @return The found assetdiscarddocument. If no assetdiscarddocument is found, this method returns
	 *         null.
	 */
	public AssetDiscardDocument findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a assetdiscarddocument.
	 * 
	 * @param updated
	 *            The information of the updated assetdiscarddocument.
	 * @return The updated assetdiscarddocument.
	 * @throws EntityNotFoundException
	 *             if no assetdiscarddocument is found with given id.
	 */
	public AssetDiscardDocument update(AssetDiscardDocument updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the assetdiscarddocuments in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the assetdiscarddocument.
	 */

	public long countAll();


    public Page<AssetDiscardDocument> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

