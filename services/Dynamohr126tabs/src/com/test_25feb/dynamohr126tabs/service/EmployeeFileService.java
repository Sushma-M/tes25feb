/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class EmployeeFile.
 * @see com.test_25feb.dynamohr126tabs.EmployeeFile
 */

public interface EmployeeFileService {
   /**
	 * Creates a new employeefile.
	 * 
	 * @param created
	 *            The information of the created employeefile.
	 * @return The created employeefile.
	 */
	public EmployeeFile create(EmployeeFile created);

	/**
	 * Deletes a employeefile.
	 * 
	 * @param employeefileId
	 *            The id of the deleted employeefile.
	 * @return The deleted employeefile.
	 * @throws EntityNotFoundException
	 *             if no employeefile is found with the given id.
	 */
	public EmployeeFile delete(Integer employeefileId) throws EntityNotFoundException;

	/**
	 * Finds all employeefiles.
	 * 
	 * @return A list of employeefiles.
	 */
	public Page<EmployeeFile> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<EmployeeFile> findAll(Pageable pageable);
	
	/**
	 * Finds employeefile by id.
	 * 
	 * @param id
	 *            The id of the wanted employeefile.
	 * @return The found employeefile. If no employeefile is found, this method returns
	 *         null.
	 */
	public EmployeeFile findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a employeefile.
	 * 
	 * @param updated
	 *            The information of the updated employeefile.
	 * @return The updated employeefile.
	 * @throws EntityNotFoundException
	 *             if no employeefile is found with given id.
	 */
	public EmployeeFile update(EmployeeFile updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the employeefiles in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the employeefile.
	 */

	public long countAll();


    public Page<EmployeeFile> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

