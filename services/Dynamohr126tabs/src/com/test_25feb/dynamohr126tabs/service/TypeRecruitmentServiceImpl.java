/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class TypeRecruitment.
 * @see com.test_25feb.dynamohr126tabs.TypeRecruitment
 */
@Service("Dynamohr126tabs.TypeRecruitmentService")
public class TypeRecruitmentServiceImpl implements TypeRecruitmentService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TypeRecruitmentServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.TypeRecruitmentDao")
    private WMGenericDao<TypeRecruitment, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeRecruitment, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<TypeRecruitment> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeRecruitment create(TypeRecruitment typerecruitment) {
        LOGGER.debug("Creating a new typerecruitment with information: {}" , typerecruitment);
        return this.wmGenericDao.create(typerecruitment);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeRecruitment delete(Integer typerecruitmentId) throws EntityNotFoundException {
        LOGGER.debug("Deleting typerecruitment with id: {}" , typerecruitmentId);
        TypeRecruitment deleted = this.wmGenericDao.findById(typerecruitmentId);
        if (deleted == null) {
            LOGGER.debug("No typerecruitment found with id: {}" , typerecruitmentId);
            throw new EntityNotFoundException(String.valueOf(typerecruitmentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeRecruitment> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all typerecruitments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeRecruitment> findAll(Pageable pageable) {
        LOGGER.debug("Finding all typerecruitments");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeRecruitment findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding typerecruitment by id: {}" , id);
        TypeRecruitment typerecruitment=this.wmGenericDao.findById(id);
        if(typerecruitment==null){
            LOGGER.debug("No typerecruitment found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return typerecruitment;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeRecruitment update(TypeRecruitment updated) throws EntityNotFoundException {
        LOGGER.debug("Updating typerecruitment with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdTypeRecruitment();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


