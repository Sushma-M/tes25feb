/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class TypeApplicantStatus.
 * @see com.test_25feb.dynamohr126tabs.TypeApplicantStatus
 */

public interface TypeApplicantStatusService {
   /**
	 * Creates a new typeapplicantstatus.
	 * 
	 * @param created
	 *            The information of the created typeapplicantstatus.
	 * @return The created typeapplicantstatus.
	 */
	public TypeApplicantStatus create(TypeApplicantStatus created);

	/**
	 * Deletes a typeapplicantstatus.
	 * 
	 * @param typeapplicantstatusId
	 *            The id of the deleted typeapplicantstatus.
	 * @return The deleted typeapplicantstatus.
	 * @throws EntityNotFoundException
	 *             if no typeapplicantstatus is found with the given id.
	 */
	public TypeApplicantStatus delete(Integer typeapplicantstatusId) throws EntityNotFoundException;

	/**
	 * Finds all typeapplicantstatuss.
	 * 
	 * @return A list of typeapplicantstatuss.
	 */
	public Page<TypeApplicantStatus> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<TypeApplicantStatus> findAll(Pageable pageable);
	
	/**
	 * Finds typeapplicantstatus by id.
	 * 
	 * @param id
	 *            The id of the wanted typeapplicantstatus.
	 * @return The found typeapplicantstatus. If no typeapplicantstatus is found, this method returns
	 *         null.
	 */
	public TypeApplicantStatus findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a typeapplicantstatus.
	 * 
	 * @param updated
	 *            The information of the updated typeapplicantstatus.
	 * @return The updated typeapplicantstatus.
	 * @throws EntityNotFoundException
	 *             if no typeapplicantstatus is found with given id.
	 */
	public TypeApplicantStatus update(TypeApplicantStatus updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the typeapplicantstatuss in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the typeapplicantstatus.
	 */

	public long countAll();


    public Page<TypeApplicantStatus> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

