/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class EmployeeSalary.
 * @see com.test_25feb.dynamohr126tabs.EmployeeSalary
 */

public interface EmployeeSalaryService {
   /**
	 * Creates a new employeesalary.
	 * 
	 * @param created
	 *            The information of the created employeesalary.
	 * @return The created employeesalary.
	 */
	public EmployeeSalary create(EmployeeSalary created);

	/**
	 * Deletes a employeesalary.
	 * 
	 * @param employeesalaryId
	 *            The id of the deleted employeesalary.
	 * @return The deleted employeesalary.
	 * @throws EntityNotFoundException
	 *             if no employeesalary is found with the given id.
	 */
	public EmployeeSalary delete(Integer employeesalaryId) throws EntityNotFoundException;

	/**
	 * Finds all employeesalarys.
	 * 
	 * @return A list of employeesalarys.
	 */
	public Page<EmployeeSalary> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<EmployeeSalary> findAll(Pageable pageable);
	
	/**
	 * Finds employeesalary by id.
	 * 
	 * @param id
	 *            The id of the wanted employeesalary.
	 * @return The found employeesalary. If no employeesalary is found, this method returns
	 *         null.
	 */
	public EmployeeSalary findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a employeesalary.
	 * 
	 * @param updated
	 *            The information of the updated employeesalary.
	 * @return The updated employeesalary.
	 * @throws EntityNotFoundException
	 *             if no employeesalary is found with given id.
	 */
	public EmployeeSalary update(EmployeeSalary updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the employeesalarys in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the employeesalary.
	 */

	public long countAll();


    public Page<EmployeeSalary> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

