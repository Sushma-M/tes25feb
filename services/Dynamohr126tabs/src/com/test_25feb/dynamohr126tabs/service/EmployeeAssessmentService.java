/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class EmployeeAssessment.
 * @see com.test_25feb.dynamohr126tabs.EmployeeAssessment
 */

public interface EmployeeAssessmentService {
   /**
	 * Creates a new employeeassessment.
	 * 
	 * @param created
	 *            The information of the created employeeassessment.
	 * @return The created employeeassessment.
	 */
	public EmployeeAssessment create(EmployeeAssessment created);

	/**
	 * Deletes a employeeassessment.
	 * 
	 * @param employeeassessmentId
	 *            The id of the deleted employeeassessment.
	 * @return The deleted employeeassessment.
	 * @throws EntityNotFoundException
	 *             if no employeeassessment is found with the given id.
	 */
	public EmployeeAssessment delete(Integer employeeassessmentId) throws EntityNotFoundException;

	/**
	 * Finds all employeeassessments.
	 * 
	 * @return A list of employeeassessments.
	 */
	public Page<EmployeeAssessment> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<EmployeeAssessment> findAll(Pageable pageable);
	
	/**
	 * Finds employeeassessment by id.
	 * 
	 * @param id
	 *            The id of the wanted employeeassessment.
	 * @return The found employeeassessment. If no employeeassessment is found, this method returns
	 *         null.
	 */
	public EmployeeAssessment findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a employeeassessment.
	 * 
	 * @param updated
	 *            The information of the updated employeeassessment.
	 * @return The updated employeeassessment.
	 * @throws EntityNotFoundException
	 *             if no employeeassessment is found with given id.
	 */
	public EmployeeAssessment update(EmployeeAssessment updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the employeeassessments in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the employeeassessment.
	 */

	public long countAll();


    public Page<EmployeeAssessment> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

