/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class EmployeeTraining.
 * @see com.test_25feb.dynamohr126tabs.EmployeeTraining
 */
@Service("Dynamohr126tabs.EmployeeTrainingService")
public class EmployeeTrainingServiceImpl implements EmployeeTrainingService {


    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeTrainingServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeTrainingDao")
    private WMGenericDao<EmployeeTraining, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmployeeTraining, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<EmployeeTraining> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeTraining create(EmployeeTraining employeetraining) {
        LOGGER.debug("Creating a new employeetraining with information: {}" , employeetraining);
        return this.wmGenericDao.create(employeetraining);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeTraining delete(Integer employeetrainingId) throws EntityNotFoundException {
        LOGGER.debug("Deleting employeetraining with id: {}" , employeetrainingId);
        EmployeeTraining deleted = this.wmGenericDao.findById(employeetrainingId);
        if (deleted == null) {
            LOGGER.debug("No employeetraining found with id: {}" , employeetrainingId);
            throw new EntityNotFoundException(String.valueOf(employeetrainingId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<EmployeeTraining> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all employeetrainings");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<EmployeeTraining> findAll(Pageable pageable) {
        LOGGER.debug("Finding all employeetrainings");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeTraining findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding employeetraining by id: {}" , id);
        EmployeeTraining employeetraining=this.wmGenericDao.findById(id);
        if(employeetraining==null){
            LOGGER.debug("No employeetraining found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return employeetraining;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeTraining update(EmployeeTraining updated) throws EntityNotFoundException {
        LOGGER.debug("Updating employeetraining with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdEmployeeTraining();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


