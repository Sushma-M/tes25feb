/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class ListPeriodicBonusEmployee.
 * @see com.test_25feb.dynamohr126tabs.ListPeriodicBonusEmployee
 */
@Service("Dynamohr126tabs.ListPeriodicBonusEmployeeService")
public class ListPeriodicBonusEmployeeServiceImpl implements ListPeriodicBonusEmployeeService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ListPeriodicBonusEmployeeServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.ListPeriodicBonusEmployeeDao")
    private WMGenericDao<ListPeriodicBonusEmployee, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ListPeriodicBonusEmployee, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<ListPeriodicBonusEmployee> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListPeriodicBonusEmployee create(ListPeriodicBonusEmployee listperiodicbonusemployee) {
        LOGGER.debug("Creating a new listperiodicbonusemployee with information: {}" , listperiodicbonusemployee);
        return this.wmGenericDao.create(listperiodicbonusemployee);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListPeriodicBonusEmployee delete(Integer listperiodicbonusemployeeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting listperiodicbonusemployee with id: {}" , listperiodicbonusemployeeId);
        ListPeriodicBonusEmployee deleted = this.wmGenericDao.findById(listperiodicbonusemployeeId);
        if (deleted == null) {
            LOGGER.debug("No listperiodicbonusemployee found with id: {}" , listperiodicbonusemployeeId);
            throw new EntityNotFoundException(String.valueOf(listperiodicbonusemployeeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ListPeriodicBonusEmployee> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all listperiodicbonusemployees");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ListPeriodicBonusEmployee> findAll(Pageable pageable) {
        LOGGER.debug("Finding all listperiodicbonusemployees");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListPeriodicBonusEmployee findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding listperiodicbonusemployee by id: {}" , id);
        ListPeriodicBonusEmployee listperiodicbonusemployee=this.wmGenericDao.findById(id);
        if(listperiodicbonusemployee==null){
            LOGGER.debug("No listperiodicbonusemployee found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return listperiodicbonusemployee;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListPeriodicBonusEmployee update(ListPeriodicBonusEmployee updated) throws EntityNotFoundException {
        LOGGER.debug("Updating listperiodicbonusemployee with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdListPeriodicBonusEmployee();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


