/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class ListLoanDetailPayroll.
 * @see com.test_25feb.dynamohr126tabs.ListLoanDetailPayroll
 */
@Service("Dynamohr126tabs.ListLoanDetailPayrollService")
public class ListLoanDetailPayrollServiceImpl implements ListLoanDetailPayrollService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ListLoanDetailPayrollServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.ListLoanDetailPayrollDao")
    private WMGenericDao<ListLoanDetailPayroll, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ListLoanDetailPayroll, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<ListLoanDetailPayroll> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListLoanDetailPayroll create(ListLoanDetailPayroll listloandetailpayroll) {
        LOGGER.debug("Creating a new listloandetailpayroll with information: {}" , listloandetailpayroll);
        return this.wmGenericDao.create(listloandetailpayroll);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListLoanDetailPayroll delete(Integer listloandetailpayrollId) throws EntityNotFoundException {
        LOGGER.debug("Deleting listloandetailpayroll with id: {}" , listloandetailpayrollId);
        ListLoanDetailPayroll deleted = this.wmGenericDao.findById(listloandetailpayrollId);
        if (deleted == null) {
            LOGGER.debug("No listloandetailpayroll found with id: {}" , listloandetailpayrollId);
            throw new EntityNotFoundException(String.valueOf(listloandetailpayrollId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ListLoanDetailPayroll> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all listloandetailpayrolls");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ListLoanDetailPayroll> findAll(Pageable pageable) {
        LOGGER.debug("Finding all listloandetailpayrolls");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListLoanDetailPayroll findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding listloandetailpayroll by id: {}" , id);
        ListLoanDetailPayroll listloandetailpayroll=this.wmGenericDao.findById(id);
        if(listloandetailpayroll==null){
            LOGGER.debug("No listloandetailpayroll found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return listloandetailpayroll;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListLoanDetailPayroll update(ListLoanDetailPayroll updated) throws EntityNotFoundException {
        LOGGER.debug("Updating listloandetailpayroll with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdListLoanDetailPayroll();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


