/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class Announcement.
 * @see com.test_25feb.dynamohr126tabs.Announcement
 */
@Service("Dynamohr126tabs.AnnouncementService")
public class AnnouncementServiceImpl implements AnnouncementService {


    private static final Logger LOGGER = LoggerFactory.getLogger(AnnouncementServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.AnnouncementDao")
    private WMGenericDao<Announcement, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Announcement, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<Announcement> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public Announcement create(Announcement announcement) {
        LOGGER.debug("Creating a new announcement with information: {}" , announcement);
        return this.wmGenericDao.create(announcement);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Announcement delete(Integer announcementId) throws EntityNotFoundException {
        LOGGER.debug("Deleting announcement with id: {}" , announcementId);
        Announcement deleted = this.wmGenericDao.findById(announcementId);
        if (deleted == null) {
            LOGGER.debug("No announcement found with id: {}" , announcementId);
            throw new EntityNotFoundException(String.valueOf(announcementId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<Announcement> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all announcements");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<Announcement> findAll(Pageable pageable) {
        LOGGER.debug("Finding all announcements");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Announcement findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding announcement by id: {}" , id);
        Announcement announcement=this.wmGenericDao.findById(id);
        if(announcement==null){
            LOGGER.debug("No announcement found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return announcement;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Announcement update(Announcement updated) throws EntityNotFoundException {
        LOGGER.debug("Updating announcement with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdAnnouncement();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


