/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class LogOperation.
 * @see com.test_25feb.dynamohr126tabs.LogOperation
 */

public interface LogOperationService {
   /**
	 * Creates a new logoperation.
	 * 
	 * @param created
	 *            The information of the created logoperation.
	 * @return The created logoperation.
	 */
	public LogOperation create(LogOperation created);

	/**
	 * Deletes a logoperation.
	 * 
	 * @param logoperationId
	 *            The id of the deleted logoperation.
	 * @return The deleted logoperation.
	 * @throws EntityNotFoundException
	 *             if no logoperation is found with the given id.
	 */
	public LogOperation delete(Integer logoperationId) throws EntityNotFoundException;

	/**
	 * Finds all logoperations.
	 * 
	 * @return A list of logoperations.
	 */
	public Page<LogOperation> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<LogOperation> findAll(Pageable pageable);
	
	/**
	 * Finds logoperation by id.
	 * 
	 * @param id
	 *            The id of the wanted logoperation.
	 * @return The found logoperation. If no logoperation is found, this method returns
	 *         null.
	 */
	public LogOperation findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a logoperation.
	 * 
	 * @param updated
	 *            The information of the updated logoperation.
	 * @return The updated logoperation.
	 * @throws EntityNotFoundException
	 *             if no logoperation is found with given id.
	 */
	public LogOperation update(LogOperation updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the logoperations in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the logoperation.
	 */

	public long countAll();


    public Page<LogOperation> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

