/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class ListPeriodicDeductionPayroll.
 * @see com.test_25feb.dynamohr126tabs.ListPeriodicDeductionPayroll
 */
@Service("Dynamohr126tabs.ListPeriodicDeductionPayrollService")
public class ListPeriodicDeductionPayrollServiceImpl implements ListPeriodicDeductionPayrollService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ListPeriodicDeductionPayrollServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.ListPeriodicDeductionPayrollDao")
    private WMGenericDao<ListPeriodicDeductionPayroll, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ListPeriodicDeductionPayroll, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<ListPeriodicDeductionPayroll> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListPeriodicDeductionPayroll create(ListPeriodicDeductionPayroll listperiodicdeductionpayroll) {
        LOGGER.debug("Creating a new listperiodicdeductionpayroll with information: {}" , listperiodicdeductionpayroll);
        return this.wmGenericDao.create(listperiodicdeductionpayroll);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListPeriodicDeductionPayroll delete(Integer listperiodicdeductionpayrollId) throws EntityNotFoundException {
        LOGGER.debug("Deleting listperiodicdeductionpayroll with id: {}" , listperiodicdeductionpayrollId);
        ListPeriodicDeductionPayroll deleted = this.wmGenericDao.findById(listperiodicdeductionpayrollId);
        if (deleted == null) {
            LOGGER.debug("No listperiodicdeductionpayroll found with id: {}" , listperiodicdeductionpayrollId);
            throw new EntityNotFoundException(String.valueOf(listperiodicdeductionpayrollId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ListPeriodicDeductionPayroll> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all listperiodicdeductionpayrolls");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ListPeriodicDeductionPayroll> findAll(Pageable pageable) {
        LOGGER.debug("Finding all listperiodicdeductionpayrolls");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListPeriodicDeductionPayroll findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding listperiodicdeductionpayroll by id: {}" , id);
        ListPeriodicDeductionPayroll listperiodicdeductionpayroll=this.wmGenericDao.findById(id);
        if(listperiodicdeductionpayroll==null){
            LOGGER.debug("No listperiodicdeductionpayroll found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return listperiodicdeductionpayroll;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListPeriodicDeductionPayroll update(ListPeriodicDeductionPayroll updated) throws EntityNotFoundException {
        LOGGER.debug("Updating listperiodicdeductionpayroll with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdListPeriodicDeductionPayroll();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


