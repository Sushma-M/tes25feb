/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class ListRolePermission.
 * @see com.test_25feb.dynamohr126tabs.ListRolePermission
 */
@Service("Dynamohr126tabs.ListRolePermissionService")
public class ListRolePermissionServiceImpl implements ListRolePermissionService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ListRolePermissionServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.ListRolePermissionDao")
    private WMGenericDao<ListRolePermission, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ListRolePermission, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<ListRolePermission> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListRolePermission create(ListRolePermission listrolepermission) {
        LOGGER.debug("Creating a new listrolepermission with information: {}" , listrolepermission);
        return this.wmGenericDao.create(listrolepermission);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListRolePermission delete(Integer listrolepermissionId) throws EntityNotFoundException {
        LOGGER.debug("Deleting listrolepermission with id: {}" , listrolepermissionId);
        ListRolePermission deleted = this.wmGenericDao.findById(listrolepermissionId);
        if (deleted == null) {
            LOGGER.debug("No listrolepermission found with id: {}" , listrolepermissionId);
            throw new EntityNotFoundException(String.valueOf(listrolepermissionId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ListRolePermission> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all listrolepermissions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ListRolePermission> findAll(Pageable pageable) {
        LOGGER.debug("Finding all listrolepermissions");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListRolePermission findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding listrolepermission by id: {}" , id);
        ListRolePermission listrolepermission=this.wmGenericDao.findById(id);
        if(listrolepermission==null){
            LOGGER.debug("No listrolepermission found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return listrolepermission;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ListRolePermission update(ListRolePermission updated) throws EntityNotFoundException {
        LOGGER.debug("Updating listrolepermission with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdListRolePermission();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


