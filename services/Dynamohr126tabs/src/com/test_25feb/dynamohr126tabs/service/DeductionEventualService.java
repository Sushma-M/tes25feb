/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class DeductionEventual.
 * @see com.test_25feb.dynamohr126tabs.DeductionEventual
 */

public interface DeductionEventualService {
   /**
	 * Creates a new deductioneventual.
	 * 
	 * @param created
	 *            The information of the created deductioneventual.
	 * @return The created deductioneventual.
	 */
	public DeductionEventual create(DeductionEventual created);

	/**
	 * Deletes a deductioneventual.
	 * 
	 * @param deductioneventualId
	 *            The id of the deleted deductioneventual.
	 * @return The deleted deductioneventual.
	 * @throws EntityNotFoundException
	 *             if no deductioneventual is found with the given id.
	 */
	public DeductionEventual delete(Integer deductioneventualId) throws EntityNotFoundException;

	/**
	 * Finds all deductioneventuals.
	 * 
	 * @return A list of deductioneventuals.
	 */
	public Page<DeductionEventual> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<DeductionEventual> findAll(Pageable pageable);
	
	/**
	 * Finds deductioneventual by id.
	 * 
	 * @param id
	 *            The id of the wanted deductioneventual.
	 * @return The found deductioneventual. If no deductioneventual is found, this method returns
	 *         null.
	 */
	public DeductionEventual findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a deductioneventual.
	 * 
	 * @param updated
	 *            The information of the updated deductioneventual.
	 * @return The updated deductioneventual.
	 * @throws EntityNotFoundException
	 *             if no deductioneventual is found with given id.
	 */
	public DeductionEventual update(DeductionEventual updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the deductioneventuals in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the deductioneventual.
	 */

	public long countAll();


    public Page<DeductionEventual> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

