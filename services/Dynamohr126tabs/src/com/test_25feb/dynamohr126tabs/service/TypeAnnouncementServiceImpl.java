/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class TypeAnnouncement.
 * @see com.test_25feb.dynamohr126tabs.TypeAnnouncement
 */
@Service("Dynamohr126tabs.TypeAnnouncementService")
public class TypeAnnouncementServiceImpl implements TypeAnnouncementService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TypeAnnouncementServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.TypeAnnouncementDao")
    private WMGenericDao<TypeAnnouncement, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeAnnouncement, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<TypeAnnouncement> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeAnnouncement create(TypeAnnouncement typeannouncement) {
        LOGGER.debug("Creating a new typeannouncement with information: {}" , typeannouncement);
        return this.wmGenericDao.create(typeannouncement);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeAnnouncement delete(Integer typeannouncementId) throws EntityNotFoundException {
        LOGGER.debug("Deleting typeannouncement with id: {}" , typeannouncementId);
        TypeAnnouncement deleted = this.wmGenericDao.findById(typeannouncementId);
        if (deleted == null) {
            LOGGER.debug("No typeannouncement found with id: {}" , typeannouncementId);
            throw new EntityNotFoundException(String.valueOf(typeannouncementId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeAnnouncement> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all typeannouncements");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeAnnouncement> findAll(Pageable pageable) {
        LOGGER.debug("Finding all typeannouncements");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeAnnouncement findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding typeannouncement by id: {}" , id);
        TypeAnnouncement typeannouncement=this.wmGenericDao.findById(id);
        if(typeannouncement==null){
            LOGGER.debug("No typeannouncement found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return typeannouncement;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeAnnouncement update(TypeAnnouncement updated) throws EntityNotFoundException {
        LOGGER.debug("Updating typeannouncement with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdTypeAnnouncement();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


