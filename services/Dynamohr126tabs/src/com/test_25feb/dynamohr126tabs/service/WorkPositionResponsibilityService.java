/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class WorkPositionResponsibility.
 * @see com.test_25feb.dynamohr126tabs.WorkPositionResponsibility
 */

public interface WorkPositionResponsibilityService {
   /**
	 * Creates a new workpositionresponsibility.
	 * 
	 * @param created
	 *            The information of the created workpositionresponsibility.
	 * @return The created workpositionresponsibility.
	 */
	public WorkPositionResponsibility create(WorkPositionResponsibility created);

	/**
	 * Deletes a workpositionresponsibility.
	 * 
	 * @param workpositionresponsibilityId
	 *            The id of the deleted workpositionresponsibility.
	 * @return The deleted workpositionresponsibility.
	 * @throws EntityNotFoundException
	 *             if no workpositionresponsibility is found with the given id.
	 */
	public WorkPositionResponsibility delete(Integer workpositionresponsibilityId) throws EntityNotFoundException;

	/**
	 * Finds all workpositionresponsibilitys.
	 * 
	 * @return A list of workpositionresponsibilitys.
	 */
	public Page<WorkPositionResponsibility> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<WorkPositionResponsibility> findAll(Pageable pageable);
	
	/**
	 * Finds workpositionresponsibility by id.
	 * 
	 * @param id
	 *            The id of the wanted workpositionresponsibility.
	 * @return The found workpositionresponsibility. If no workpositionresponsibility is found, this method returns
	 *         null.
	 */
	public WorkPositionResponsibility findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a workpositionresponsibility.
	 * 
	 * @param updated
	 *            The information of the updated workpositionresponsibility.
	 * @return The updated workpositionresponsibility.
	 * @throws EntityNotFoundException
	 *             if no workpositionresponsibility is found with given id.
	 */
	public WorkPositionResponsibility update(WorkPositionResponsibility updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the workpositionresponsibilitys in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the workpositionresponsibility.
	 */

	public long countAll();


    public Page<WorkPositionResponsibility> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

