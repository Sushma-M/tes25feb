/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class ApplicantToPosition.
 * @see com.test_25feb.dynamohr126tabs.ApplicantToPosition
 */

public interface ApplicantToPositionService {
   /**
	 * Creates a new applicanttoposition.
	 * 
	 * @param created
	 *            The information of the created applicanttoposition.
	 * @return The created applicanttoposition.
	 */
	public ApplicantToPosition create(ApplicantToPosition created);

	/**
	 * Deletes a applicanttoposition.
	 * 
	 * @param applicanttopositionId
	 *            The id of the deleted applicanttoposition.
	 * @return The deleted applicanttoposition.
	 * @throws EntityNotFoundException
	 *             if no applicanttoposition is found with the given id.
	 */
	public ApplicantToPosition delete(Integer applicanttopositionId) throws EntityNotFoundException;

	/**
	 * Finds all applicanttopositions.
	 * 
	 * @return A list of applicanttopositions.
	 */
	public Page<ApplicantToPosition> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<ApplicantToPosition> findAll(Pageable pageable);
	
	/**
	 * Finds applicanttoposition by id.
	 * 
	 * @param id
	 *            The id of the wanted applicanttoposition.
	 * @return The found applicanttoposition. If no applicanttoposition is found, this method returns
	 *         null.
	 */
	public ApplicantToPosition findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a applicanttoposition.
	 * 
	 * @param updated
	 *            The information of the updated applicanttoposition.
	 * @return The updated applicanttoposition.
	 * @throws EntityNotFoundException
	 *             if no applicanttoposition is found with given id.
	 */
	public ApplicantToPosition update(ApplicantToPosition updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the applicanttopositions in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the applicanttoposition.
	 */

	public long countAll();


    public Page<ApplicantToPosition> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

