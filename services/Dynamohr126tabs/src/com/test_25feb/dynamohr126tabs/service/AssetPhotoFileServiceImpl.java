/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class AssetPhotoFile.
 * @see com.test_25feb.dynamohr126tabs.AssetPhotoFile
 */
@Service("Dynamohr126tabs.AssetPhotoFileService")
public class AssetPhotoFileServiceImpl implements AssetPhotoFileService {


    private static final Logger LOGGER = LoggerFactory.getLogger(AssetPhotoFileServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.AssetPhotoFileDao")
    private WMGenericDao<AssetPhotoFile, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AssetPhotoFile, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<AssetPhotoFile> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssetPhotoFile create(AssetPhotoFile assetphotofile) {
        LOGGER.debug("Creating a new assetphotofile with information: {}" , assetphotofile);
        return this.wmGenericDao.create(assetphotofile);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssetPhotoFile delete(Integer assetphotofileId) throws EntityNotFoundException {
        LOGGER.debug("Deleting assetphotofile with id: {}" , assetphotofileId);
        AssetPhotoFile deleted = this.wmGenericDao.findById(assetphotofileId);
        if (deleted == null) {
            LOGGER.debug("No assetphotofile found with id: {}" , assetphotofileId);
            throw new EntityNotFoundException(String.valueOf(assetphotofileId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<AssetPhotoFile> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all assetphotofiles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<AssetPhotoFile> findAll(Pageable pageable) {
        LOGGER.debug("Finding all assetphotofiles");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssetPhotoFile findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding assetphotofile by id: {}" , id);
        AssetPhotoFile assetphotofile=this.wmGenericDao.findById(id);
        if(assetphotofile==null){
            LOGGER.debug("No assetphotofile found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return assetphotofile;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssetPhotoFile update(AssetPhotoFile updated) throws EntityNotFoundException {
        LOGGER.debug("Updating assetphotofile with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdAssetPhotoFile();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


