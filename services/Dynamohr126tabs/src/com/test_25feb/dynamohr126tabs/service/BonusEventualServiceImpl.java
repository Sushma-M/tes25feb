/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class BonusEventual.
 * @see com.test_25feb.dynamohr126tabs.BonusEventual
 */
@Service("Dynamohr126tabs.BonusEventualService")
public class BonusEventualServiceImpl implements BonusEventualService {


    private static final Logger LOGGER = LoggerFactory.getLogger(BonusEventualServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.BonusEventualDao")
    private WMGenericDao<BonusEventual, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BonusEventual, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<BonusEventual> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public BonusEventual create(BonusEventual bonuseventual) {
        LOGGER.debug("Creating a new bonuseventual with information: {}" , bonuseventual);
        return this.wmGenericDao.create(bonuseventual);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public BonusEventual delete(Integer bonuseventualId) throws EntityNotFoundException {
        LOGGER.debug("Deleting bonuseventual with id: {}" , bonuseventualId);
        BonusEventual deleted = this.wmGenericDao.findById(bonuseventualId);
        if (deleted == null) {
            LOGGER.debug("No bonuseventual found with id: {}" , bonuseventualId);
            throw new EntityNotFoundException(String.valueOf(bonuseventualId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<BonusEventual> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all bonuseventuals");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<BonusEventual> findAll(Pageable pageable) {
        LOGGER.debug("Finding all bonuseventuals");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public BonusEventual findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding bonuseventual by id: {}" , id);
        BonusEventual bonuseventual=this.wmGenericDao.findById(id);
        if(bonuseventual==null){
            LOGGER.debug("No bonuseventual found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return bonuseventual;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public BonusEventual update(BonusEventual updated) throws EntityNotFoundException {
        LOGGER.debug("Updating bonuseventual with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdBonusEventual();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


