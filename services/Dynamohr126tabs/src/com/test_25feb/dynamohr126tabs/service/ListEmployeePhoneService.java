/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class ListEmployeePhone.
 * @see com.test_25feb.dynamohr126tabs.ListEmployeePhone
 */

public interface ListEmployeePhoneService {
   /**
	 * Creates a new listemployeephone.
	 * 
	 * @param created
	 *            The information of the created listemployeephone.
	 * @return The created listemployeephone.
	 */
	public ListEmployeePhone create(ListEmployeePhone created);

	/**
	 * Deletes a listemployeephone.
	 * 
	 * @param listemployeephoneId
	 *            The id of the deleted listemployeephone.
	 * @return The deleted listemployeephone.
	 * @throws EntityNotFoundException
	 *             if no listemployeephone is found with the given id.
	 */
	public ListEmployeePhone delete(Integer listemployeephoneId) throws EntityNotFoundException;

	/**
	 * Finds all listemployeephones.
	 * 
	 * @return A list of listemployeephones.
	 */
	public Page<ListEmployeePhone> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<ListEmployeePhone> findAll(Pageable pageable);
	
	/**
	 * Finds listemployeephone by id.
	 * 
	 * @param id
	 *            The id of the wanted listemployeephone.
	 * @return The found listemployeephone. If no listemployeephone is found, this method returns
	 *         null.
	 */
	public ListEmployeePhone findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a listemployeephone.
	 * 
	 * @param updated
	 *            The information of the updated listemployeephone.
	 * @return The updated listemployeephone.
	 * @throws EntityNotFoundException
	 *             if no listemployeephone is found with given id.
	 */
	public ListEmployeePhone update(ListEmployeePhone updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the listemployeephones in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the listemployeephone.
	 */

	public long countAll();


    public Page<ListEmployeePhone> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

