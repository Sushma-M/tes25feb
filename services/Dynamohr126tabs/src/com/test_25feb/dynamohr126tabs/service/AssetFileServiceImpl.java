/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class AssetFile.
 * @see com.test_25feb.dynamohr126tabs.AssetFile
 */
@Service("Dynamohr126tabs.AssetFileService")
public class AssetFileServiceImpl implements AssetFileService {


    private static final Logger LOGGER = LoggerFactory.getLogger(AssetFileServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.AssetFileDao")
    private WMGenericDao<AssetFile, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AssetFile, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<AssetFile> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssetFile create(AssetFile assetfile) {
        LOGGER.debug("Creating a new assetfile with information: {}" , assetfile);
        return this.wmGenericDao.create(assetfile);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssetFile delete(Integer assetfileId) throws EntityNotFoundException {
        LOGGER.debug("Deleting assetfile with id: {}" , assetfileId);
        AssetFile deleted = this.wmGenericDao.findById(assetfileId);
        if (deleted == null) {
            LOGGER.debug("No assetfile found with id: {}" , assetfileId);
            throw new EntityNotFoundException(String.valueOf(assetfileId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<AssetFile> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all assetfiles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<AssetFile> findAll(Pageable pageable) {
        LOGGER.debug("Finding all assetfiles");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssetFile findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding assetfile by id: {}" , id);
        AssetFile assetfile=this.wmGenericDao.findById(id);
        if(assetfile==null){
            LOGGER.debug("No assetfile found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return assetfile;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssetFile update(AssetFile updated) throws EntityNotFoundException {
        LOGGER.debug("Updating assetfile with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdAssetFile();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


