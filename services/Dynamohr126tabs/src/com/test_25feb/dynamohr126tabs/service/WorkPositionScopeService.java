/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class WorkPositionScope.
 * @see com.test_25feb.dynamohr126tabs.WorkPositionScope
 */

public interface WorkPositionScopeService {
   /**
	 * Creates a new workpositionscope.
	 * 
	 * @param created
	 *            The information of the created workpositionscope.
	 * @return The created workpositionscope.
	 */
	public WorkPositionScope create(WorkPositionScope created);

	/**
	 * Deletes a workpositionscope.
	 * 
	 * @param workpositionscopeId
	 *            The id of the deleted workpositionscope.
	 * @return The deleted workpositionscope.
	 * @throws EntityNotFoundException
	 *             if no workpositionscope is found with the given id.
	 */
	public WorkPositionScope delete(Integer workpositionscopeId) throws EntityNotFoundException;

	/**
	 * Finds all workpositionscopes.
	 * 
	 * @return A list of workpositionscopes.
	 */
	public Page<WorkPositionScope> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<WorkPositionScope> findAll(Pageable pageable);
	
	/**
	 * Finds workpositionscope by id.
	 * 
	 * @param id
	 *            The id of the wanted workpositionscope.
	 * @return The found workpositionscope. If no workpositionscope is found, this method returns
	 *         null.
	 */
	public WorkPositionScope findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a workpositionscope.
	 * 
	 * @param updated
	 *            The information of the updated workpositionscope.
	 * @return The updated workpositionscope.
	 * @throws EntityNotFoundException
	 *             if no workpositionscope is found with given id.
	 */
	public WorkPositionScope update(WorkPositionScope updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the workpositionscopes in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the workpositionscope.
	 */

	public long countAll();


    public Page<WorkPositionScope> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

