/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class WorkPositionScope.
 * @see com.test_25feb.dynamohr126tabs.WorkPositionScope
 */
@Service("Dynamohr126tabs.WorkPositionScopeService")
public class WorkPositionScopeServiceImpl implements WorkPositionScopeService {


    private static final Logger LOGGER = LoggerFactory.getLogger(WorkPositionScopeServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.WorkPositionScopeDao")
    private WMGenericDao<WorkPositionScope, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<WorkPositionScope, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<WorkPositionScope> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public WorkPositionScope create(WorkPositionScope workpositionscope) {
        LOGGER.debug("Creating a new workpositionscope with information: {}" , workpositionscope);
        return this.wmGenericDao.create(workpositionscope);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public WorkPositionScope delete(Integer workpositionscopeId) throws EntityNotFoundException {
        LOGGER.debug("Deleting workpositionscope with id: {}" , workpositionscopeId);
        WorkPositionScope deleted = this.wmGenericDao.findById(workpositionscopeId);
        if (deleted == null) {
            LOGGER.debug("No workpositionscope found with id: {}" , workpositionscopeId);
            throw new EntityNotFoundException(String.valueOf(workpositionscopeId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<WorkPositionScope> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all workpositionscopes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<WorkPositionScope> findAll(Pageable pageable) {
        LOGGER.debug("Finding all workpositionscopes");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public WorkPositionScope findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding workpositionscope by id: {}" , id);
        WorkPositionScope workpositionscope=this.wmGenericDao.findById(id);
        if(workpositionscope==null){
            LOGGER.debug("No workpositionscope found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return workpositionscope;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public WorkPositionScope update(WorkPositionScope updated) throws EntityNotFoundException {
        LOGGER.debug("Updating workpositionscope with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdWorkPositionScope();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


