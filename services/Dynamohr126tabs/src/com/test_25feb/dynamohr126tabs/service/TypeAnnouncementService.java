/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class TypeAnnouncement.
 * @see com.test_25feb.dynamohr126tabs.TypeAnnouncement
 */

public interface TypeAnnouncementService {
   /**
	 * Creates a new typeannouncement.
	 * 
	 * @param created
	 *            The information of the created typeannouncement.
	 * @return The created typeannouncement.
	 */
	public TypeAnnouncement create(TypeAnnouncement created);

	/**
	 * Deletes a typeannouncement.
	 * 
	 * @param typeannouncementId
	 *            The id of the deleted typeannouncement.
	 * @return The deleted typeannouncement.
	 * @throws EntityNotFoundException
	 *             if no typeannouncement is found with the given id.
	 */
	public TypeAnnouncement delete(Integer typeannouncementId) throws EntityNotFoundException;

	/**
	 * Finds all typeannouncements.
	 * 
	 * @return A list of typeannouncements.
	 */
	public Page<TypeAnnouncement> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<TypeAnnouncement> findAll(Pageable pageable);
	
	/**
	 * Finds typeannouncement by id.
	 * 
	 * @param id
	 *            The id of the wanted typeannouncement.
	 * @return The found typeannouncement. If no typeannouncement is found, this method returns
	 *         null.
	 */
	public TypeAnnouncement findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a typeannouncement.
	 * 
	 * @param updated
	 *            The information of the updated typeannouncement.
	 * @return The updated typeannouncement.
	 * @throws EntityNotFoundException
	 *             if no typeannouncement is found with given id.
	 */
	public TypeAnnouncement update(TypeAnnouncement updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the typeannouncements in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the typeannouncement.
	 */

	public long countAll();


    public Page<TypeAnnouncement> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

