/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class EmployeeWorkDay.
 * @see com.test_25feb.dynamohr126tabs.EmployeeWorkDay
 */

public interface EmployeeWorkDayService {
   /**
	 * Creates a new employeeworkday.
	 * 
	 * @param created
	 *            The information of the created employeeworkday.
	 * @return The created employeeworkday.
	 */
	public EmployeeWorkDay create(EmployeeWorkDay created);

	/**
	 * Deletes a employeeworkday.
	 * 
	 * @param employeeworkdayId
	 *            The id of the deleted employeeworkday.
	 * @return The deleted employeeworkday.
	 * @throws EntityNotFoundException
	 *             if no employeeworkday is found with the given id.
	 */
	public EmployeeWorkDay delete(Integer employeeworkdayId) throws EntityNotFoundException;

	/**
	 * Finds all employeeworkdays.
	 * 
	 * @return A list of employeeworkdays.
	 */
	public Page<EmployeeWorkDay> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<EmployeeWorkDay> findAll(Pageable pageable);
	
	/**
	 * Finds employeeworkday by id.
	 * 
	 * @param id
	 *            The id of the wanted employeeworkday.
	 * @return The found employeeworkday. If no employeeworkday is found, this method returns
	 *         null.
	 */
	public EmployeeWorkDay findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a employeeworkday.
	 * 
	 * @param updated
	 *            The information of the updated employeeworkday.
	 * @return The updated employeeworkday.
	 * @throws EntityNotFoundException
	 *             if no employeeworkday is found with given id.
	 */
	public EmployeeWorkDay update(EmployeeWorkDay updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the employeeworkdays in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the employeeworkday.
	 */

	public long countAll();


    public Page<EmployeeWorkDay> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

