/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class BadgeEmployee.
 * @see com.test_25feb.dynamohr126tabs.BadgeEmployee
 */

public interface BadgeEmployeeService {
   /**
	 * Creates a new badgeemployee.
	 * 
	 * @param created
	 *            The information of the created badgeemployee.
	 * @return The created badgeemployee.
	 */
	public BadgeEmployee create(BadgeEmployee created);

	/**
	 * Deletes a badgeemployee.
	 * 
	 * @param badgeemployeeId
	 *            The id of the deleted badgeemployee.
	 * @return The deleted badgeemployee.
	 * @throws EntityNotFoundException
	 *             if no badgeemployee is found with the given id.
	 */
	public BadgeEmployee delete(Integer badgeemployeeId) throws EntityNotFoundException;

	/**
	 * Finds all badgeemployees.
	 * 
	 * @return A list of badgeemployees.
	 */
	public Page<BadgeEmployee> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<BadgeEmployee> findAll(Pageable pageable);
	
	/**
	 * Finds badgeemployee by id.
	 * 
	 * @param id
	 *            The id of the wanted badgeemployee.
	 * @return The found badgeemployee. If no badgeemployee is found, this method returns
	 *         null.
	 */
	public BadgeEmployee findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a badgeemployee.
	 * 
	 * @param updated
	 *            The information of the updated badgeemployee.
	 * @return The updated badgeemployee.
	 * @throws EntityNotFoundException
	 *             if no badgeemployee is found with given id.
	 */
	public BadgeEmployee update(BadgeEmployee updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the badgeemployees in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the badgeemployee.
	 */

	public long countAll();


    public Page<BadgeEmployee> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

