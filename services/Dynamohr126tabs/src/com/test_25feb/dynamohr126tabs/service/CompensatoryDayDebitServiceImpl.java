/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class CompensatoryDayDebit.
 * @see com.test_25feb.dynamohr126tabs.CompensatoryDayDebit
 */
@Service("Dynamohr126tabs.CompensatoryDayDebitService")
public class CompensatoryDayDebitServiceImpl implements CompensatoryDayDebitService {


    private static final Logger LOGGER = LoggerFactory.getLogger(CompensatoryDayDebitServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.CompensatoryDayDebitDao")
    private WMGenericDao<CompensatoryDayDebit, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CompensatoryDayDebit, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<CompensatoryDayDebit> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public CompensatoryDayDebit create(CompensatoryDayDebit compensatorydaydebit) {
        LOGGER.debug("Creating a new compensatorydaydebit with information: {}" , compensatorydaydebit);
        return this.wmGenericDao.create(compensatorydaydebit);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public CompensatoryDayDebit delete(Integer compensatorydaydebitId) throws EntityNotFoundException {
        LOGGER.debug("Deleting compensatorydaydebit with id: {}" , compensatorydaydebitId);
        CompensatoryDayDebit deleted = this.wmGenericDao.findById(compensatorydaydebitId);
        if (deleted == null) {
            LOGGER.debug("No compensatorydaydebit found with id: {}" , compensatorydaydebitId);
            throw new EntityNotFoundException(String.valueOf(compensatorydaydebitId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<CompensatoryDayDebit> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all compensatorydaydebits");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<CompensatoryDayDebit> findAll(Pageable pageable) {
        LOGGER.debug("Finding all compensatorydaydebits");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public CompensatoryDayDebit findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding compensatorydaydebit by id: {}" , id);
        CompensatoryDayDebit compensatorydaydebit=this.wmGenericDao.findById(id);
        if(compensatorydaydebit==null){
            LOGGER.debug("No compensatorydaydebit found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return compensatorydaydebit;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public CompensatoryDayDebit update(CompensatoryDayDebit updated) throws EntityNotFoundException {
        LOGGER.debug("Updating compensatorydaydebit with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdTiempoCompensatorioDiaAcreditado();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


