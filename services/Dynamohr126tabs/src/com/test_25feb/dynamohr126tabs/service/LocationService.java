/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class Location.
 * @see com.test_25feb.dynamohr126tabs.Location
 */

public interface LocationService {
   /**
	 * Creates a new location.
	 * 
	 * @param created
	 *            The information of the created location.
	 * @return The created location.
	 */
	public Location create(Location created);

	/**
	 * Deletes a location.
	 * 
	 * @param locationId
	 *            The id of the deleted location.
	 * @return The deleted location.
	 * @throws EntityNotFoundException
	 *             if no location is found with the given id.
	 */
	public Location delete(Integer locationId) throws EntityNotFoundException;

	/**
	 * Finds all locations.
	 * 
	 * @return A list of locations.
	 */
	public Page<Location> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Location> findAll(Pageable pageable);
	
	/**
	 * Finds location by id.
	 * 
	 * @param id
	 *            The id of the wanted location.
	 * @return The found location. If no location is found, this method returns
	 *         null.
	 */
	public Location findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a location.
	 * 
	 * @param updated
	 *            The information of the updated location.
	 * @return The updated location.
	 * @throws EntityNotFoundException
	 *             if no location is found with given id.
	 */
	public Location update(Location updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the locations in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the location.
	 */

	public long countAll();


    public Page<Location> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

