/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class TypeApplicantStatus.
 * @see com.test_25feb.dynamohr126tabs.TypeApplicantStatus
 */
@Service("Dynamohr126tabs.TypeApplicantStatusService")
public class TypeApplicantStatusServiceImpl implements TypeApplicantStatusService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TypeApplicantStatusServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.TypeApplicantStatusDao")
    private WMGenericDao<TypeApplicantStatus, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeApplicantStatus, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<TypeApplicantStatus> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeApplicantStatus create(TypeApplicantStatus typeapplicantstatus) {
        LOGGER.debug("Creating a new typeapplicantstatus with information: {}" , typeapplicantstatus);
        return this.wmGenericDao.create(typeapplicantstatus);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeApplicantStatus delete(Integer typeapplicantstatusId) throws EntityNotFoundException {
        LOGGER.debug("Deleting typeapplicantstatus with id: {}" , typeapplicantstatusId);
        TypeApplicantStatus deleted = this.wmGenericDao.findById(typeapplicantstatusId);
        if (deleted == null) {
            LOGGER.debug("No typeapplicantstatus found with id: {}" , typeapplicantstatusId);
            throw new EntityNotFoundException(String.valueOf(typeapplicantstatusId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeApplicantStatus> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all typeapplicantstatuss");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeApplicantStatus> findAll(Pageable pageable) {
        LOGGER.debug("Finding all typeapplicantstatuss");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeApplicantStatus findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding typeapplicantstatus by id: {}" , id);
        TypeApplicantStatus typeapplicantstatus=this.wmGenericDao.findById(id);
        if(typeapplicantstatus==null){
            LOGGER.debug("No typeapplicantstatus found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return typeapplicantstatus;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeApplicantStatus update(TypeApplicantStatus updated) throws EntityNotFoundException {
        LOGGER.debug("Updating typeapplicantstatus with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdTypeMaritalStatus();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


