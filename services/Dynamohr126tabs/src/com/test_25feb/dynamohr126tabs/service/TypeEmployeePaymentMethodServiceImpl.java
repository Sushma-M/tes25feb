/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class TypeEmployeePaymentMethod.
 * @see com.test_25feb.dynamohr126tabs.TypeEmployeePaymentMethod
 */
@Service("Dynamohr126tabs.TypeEmployeePaymentMethodService")
public class TypeEmployeePaymentMethodServiceImpl implements TypeEmployeePaymentMethodService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TypeEmployeePaymentMethodServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.TypeEmployeePaymentMethodDao")
    private WMGenericDao<TypeEmployeePaymentMethod, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeEmployeePaymentMethod, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<TypeEmployeePaymentMethod> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeEmployeePaymentMethod create(TypeEmployeePaymentMethod typeemployeepaymentmethod) {
        LOGGER.debug("Creating a new typeemployeepaymentmethod with information: {}" , typeemployeepaymentmethod);
        return this.wmGenericDao.create(typeemployeepaymentmethod);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeEmployeePaymentMethod delete(Integer typeemployeepaymentmethodId) throws EntityNotFoundException {
        LOGGER.debug("Deleting typeemployeepaymentmethod with id: {}" , typeemployeepaymentmethodId);
        TypeEmployeePaymentMethod deleted = this.wmGenericDao.findById(typeemployeepaymentmethodId);
        if (deleted == null) {
            LOGGER.debug("No typeemployeepaymentmethod found with id: {}" , typeemployeepaymentmethodId);
            throw new EntityNotFoundException(String.valueOf(typeemployeepaymentmethodId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeEmployeePaymentMethod> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all typeemployeepaymentmethods");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeEmployeePaymentMethod> findAll(Pageable pageable) {
        LOGGER.debug("Finding all typeemployeepaymentmethods");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeEmployeePaymentMethod findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding typeemployeepaymentmethod by id: {}" , id);
        TypeEmployeePaymentMethod typeemployeepaymentmethod=this.wmGenericDao.findById(id);
        if(typeemployeepaymentmethod==null){
            LOGGER.debug("No typeemployeepaymentmethod found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return typeemployeepaymentmethod;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeEmployeePaymentMethod update(TypeEmployeePaymentMethod updated) throws EntityNotFoundException {
        LOGGER.debug("Updating typeemployeepaymentmethod with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdTypeEmployeeStatus();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


