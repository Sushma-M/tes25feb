/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class DeductionPeriodic.
 * @see com.test_25feb.dynamohr126tabs.DeductionPeriodic
 */
@Service("Dynamohr126tabs.DeductionPeriodicService")
public class DeductionPeriodicServiceImpl implements DeductionPeriodicService {


    private static final Logger LOGGER = LoggerFactory.getLogger(DeductionPeriodicServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.DeductionPeriodicDao")
    private WMGenericDao<DeductionPeriodic, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DeductionPeriodic, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<DeductionPeriodic> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public DeductionPeriodic create(DeductionPeriodic deductionperiodic) {
        LOGGER.debug("Creating a new deductionperiodic with information: {}" , deductionperiodic);
        return this.wmGenericDao.create(deductionperiodic);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public DeductionPeriodic delete(Integer deductionperiodicId) throws EntityNotFoundException {
        LOGGER.debug("Deleting deductionperiodic with id: {}" , deductionperiodicId);
        DeductionPeriodic deleted = this.wmGenericDao.findById(deductionperiodicId);
        if (deleted == null) {
            LOGGER.debug("No deductionperiodic found with id: {}" , deductionperiodicId);
            throw new EntityNotFoundException(String.valueOf(deductionperiodicId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<DeductionPeriodic> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all deductionperiodics");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<DeductionPeriodic> findAll(Pageable pageable) {
        LOGGER.debug("Finding all deductionperiodics");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public DeductionPeriodic findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding deductionperiodic by id: {}" , id);
        DeductionPeriodic deductionperiodic=this.wmGenericDao.findById(id);
        if(deductionperiodic==null){
            LOGGER.debug("No deductionperiodic found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return deductionperiodic;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public DeductionPeriodic update(DeductionPeriodic updated) throws EntityNotFoundException {
        LOGGER.debug("Updating deductionperiodic with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdDeductionPeriodic();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


