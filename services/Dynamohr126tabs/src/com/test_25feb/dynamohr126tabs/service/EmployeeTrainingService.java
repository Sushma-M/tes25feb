/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class EmployeeTraining.
 * @see com.test_25feb.dynamohr126tabs.EmployeeTraining
 */

public interface EmployeeTrainingService {
   /**
	 * Creates a new employeetraining.
	 * 
	 * @param created
	 *            The information of the created employeetraining.
	 * @return The created employeetraining.
	 */
	public EmployeeTraining create(EmployeeTraining created);

	/**
	 * Deletes a employeetraining.
	 * 
	 * @param employeetrainingId
	 *            The id of the deleted employeetraining.
	 * @return The deleted employeetraining.
	 * @throws EntityNotFoundException
	 *             if no employeetraining is found with the given id.
	 */
	public EmployeeTraining delete(Integer employeetrainingId) throws EntityNotFoundException;

	/**
	 * Finds all employeetrainings.
	 * 
	 * @return A list of employeetrainings.
	 */
	public Page<EmployeeTraining> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<EmployeeTraining> findAll(Pageable pageable);
	
	/**
	 * Finds employeetraining by id.
	 * 
	 * @param id
	 *            The id of the wanted employeetraining.
	 * @return The found employeetraining. If no employeetraining is found, this method returns
	 *         null.
	 */
	public EmployeeTraining findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a employeetraining.
	 * 
	 * @param updated
	 *            The information of the updated employeetraining.
	 * @return The updated employeetraining.
	 * @throws EntityNotFoundException
	 *             if no employeetraining is found with given id.
	 */
	public EmployeeTraining update(EmployeeTraining updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the employeetrainings in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the employeetraining.
	 */

	public long countAll();


    public Page<EmployeeTraining> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

