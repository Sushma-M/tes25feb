/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class TypeMovement.
 * @see com.test_25feb.dynamohr126tabs.TypeMovement
 */

public interface TypeMovementService {
   /**
	 * Creates a new typemovement.
	 * 
	 * @param created
	 *            The information of the created typemovement.
	 * @return The created typemovement.
	 */
	public TypeMovement create(TypeMovement created);

	/**
	 * Deletes a typemovement.
	 * 
	 * @param typemovementId
	 *            The id of the deleted typemovement.
	 * @return The deleted typemovement.
	 * @throws EntityNotFoundException
	 *             if no typemovement is found with the given id.
	 */
	public TypeMovement delete(Integer typemovementId) throws EntityNotFoundException;

	/**
	 * Finds all typemovements.
	 * 
	 * @return A list of typemovements.
	 */
	public Page<TypeMovement> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<TypeMovement> findAll(Pageable pageable);
	
	/**
	 * Finds typemovement by id.
	 * 
	 * @param id
	 *            The id of the wanted typemovement.
	 * @return The found typemovement. If no typemovement is found, this method returns
	 *         null.
	 */
	public TypeMovement findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a typemovement.
	 * 
	 * @param updated
	 *            The information of the updated typemovement.
	 * @return The updated typemovement.
	 * @throws EntityNotFoundException
	 *             if no typemovement is found with given id.
	 */
	public TypeMovement update(TypeMovement updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the typemovements in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the typemovement.
	 */

	public long countAll();


    public Page<TypeMovement> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

