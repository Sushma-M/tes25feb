/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class CompensatoryDayCredit.
 * @see com.test_25feb.dynamohr126tabs.CompensatoryDayCredit
 */
@Service("Dynamohr126tabs.CompensatoryDayCreditService")
public class CompensatoryDayCreditServiceImpl implements CompensatoryDayCreditService {


    private static final Logger LOGGER = LoggerFactory.getLogger(CompensatoryDayCreditServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.CompensatoryDayCreditDao")
    private WMGenericDao<CompensatoryDayCredit, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<CompensatoryDayCredit, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<CompensatoryDayCredit> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public CompensatoryDayCredit create(CompensatoryDayCredit compensatorydaycredit) {
        LOGGER.debug("Creating a new compensatorydaycredit with information: {}" , compensatorydaycredit);
        return this.wmGenericDao.create(compensatorydaycredit);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public CompensatoryDayCredit delete(Integer compensatorydaycreditId) throws EntityNotFoundException {
        LOGGER.debug("Deleting compensatorydaycredit with id: {}" , compensatorydaycreditId);
        CompensatoryDayCredit deleted = this.wmGenericDao.findById(compensatorydaycreditId);
        if (deleted == null) {
            LOGGER.debug("No compensatorydaycredit found with id: {}" , compensatorydaycreditId);
            throw new EntityNotFoundException(String.valueOf(compensatorydaycreditId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<CompensatoryDayCredit> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all compensatorydaycredits");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<CompensatoryDayCredit> findAll(Pageable pageable) {
        LOGGER.debug("Finding all compensatorydaycredits");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public CompensatoryDayCredit findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding compensatorydaycredit by id: {}" , id);
        CompensatoryDayCredit compensatorydaycredit=this.wmGenericDao.findById(id);
        if(compensatorydaycredit==null){
            LOGGER.debug("No compensatorydaycredit found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return compensatorydaycredit;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public CompensatoryDayCredit update(CompensatoryDayCredit updated) throws EntityNotFoundException {
        LOGGER.debug("Updating compensatorydaycredit with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdCompensatoryDayCredit();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


