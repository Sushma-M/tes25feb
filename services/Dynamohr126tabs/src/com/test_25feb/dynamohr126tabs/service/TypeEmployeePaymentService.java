/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class TypeEmployeePayment.
 * @see com.test_25feb.dynamohr126tabs.TypeEmployeePayment
 */

public interface TypeEmployeePaymentService {
   /**
	 * Creates a new typeemployeepayment.
	 * 
	 * @param created
	 *            The information of the created typeemployeepayment.
	 * @return The created typeemployeepayment.
	 */
	public TypeEmployeePayment create(TypeEmployeePayment created);

	/**
	 * Deletes a typeemployeepayment.
	 * 
	 * @param typeemployeepaymentId
	 *            The id of the deleted typeemployeepayment.
	 * @return The deleted typeemployeepayment.
	 * @throws EntityNotFoundException
	 *             if no typeemployeepayment is found with the given id.
	 */
	public TypeEmployeePayment delete(Integer typeemployeepaymentId) throws EntityNotFoundException;

	/**
	 * Finds all typeemployeepayments.
	 * 
	 * @return A list of typeemployeepayments.
	 */
	public Page<TypeEmployeePayment> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<TypeEmployeePayment> findAll(Pageable pageable);
	
	/**
	 * Finds typeemployeepayment by id.
	 * 
	 * @param id
	 *            The id of the wanted typeemployeepayment.
	 * @return The found typeemployeepayment. If no typeemployeepayment is found, this method returns
	 *         null.
	 */
	public TypeEmployeePayment findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a typeemployeepayment.
	 * 
	 * @param updated
	 *            The information of the updated typeemployeepayment.
	 * @return The updated typeemployeepayment.
	 * @throws EntityNotFoundException
	 *             if no typeemployeepayment is found with given id.
	 */
	public TypeEmployeePayment update(TypeEmployeePayment updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the typeemployeepayments in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the typeemployeepayment.
	 */

	public long countAll();


    public Page<TypeEmployeePayment> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

