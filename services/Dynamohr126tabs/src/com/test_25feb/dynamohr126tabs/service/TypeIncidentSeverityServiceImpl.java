/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class TypeIncidentSeverity.
 * @see com.test_25feb.dynamohr126tabs.TypeIncidentSeverity
 */
@Service("Dynamohr126tabs.TypeIncidentSeverityService")
public class TypeIncidentSeverityServiceImpl implements TypeIncidentSeverityService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TypeIncidentSeverityServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.TypeIncidentSeverityDao")
    private WMGenericDao<TypeIncidentSeverity, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeIncidentSeverity, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<TypeIncidentSeverity> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeIncidentSeverity create(TypeIncidentSeverity typeincidentseverity) {
        LOGGER.debug("Creating a new typeincidentseverity with information: {}" , typeincidentseverity);
        return this.wmGenericDao.create(typeincidentseverity);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeIncidentSeverity delete(Integer typeincidentseverityId) throws EntityNotFoundException {
        LOGGER.debug("Deleting typeincidentseverity with id: {}" , typeincidentseverityId);
        TypeIncidentSeverity deleted = this.wmGenericDao.findById(typeincidentseverityId);
        if (deleted == null) {
            LOGGER.debug("No typeincidentseverity found with id: {}" , typeincidentseverityId);
            throw new EntityNotFoundException(String.valueOf(typeincidentseverityId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeIncidentSeverity> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all typeincidentseveritys");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeIncidentSeverity> findAll(Pageable pageable) {
        LOGGER.debug("Finding all typeincidentseveritys");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeIncidentSeverity findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding typeincidentseverity by id: {}" , id);
        TypeIncidentSeverity typeincidentseverity=this.wmGenericDao.findById(id);
        if(typeincidentseverity==null){
            LOGGER.debug("No typeincidentseverity found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return typeincidentseverity;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeIncidentSeverity update(TypeIncidentSeverity updated) throws EntityNotFoundException {
        LOGGER.debug("Updating typeincidentseverity with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdTypeIncidentSeverity();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


