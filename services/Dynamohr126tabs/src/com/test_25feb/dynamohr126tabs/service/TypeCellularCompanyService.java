/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class TypeCellularCompany.
 * @see com.test_25feb.dynamohr126tabs.TypeCellularCompany
 */

public interface TypeCellularCompanyService {
   /**
	 * Creates a new typecellularcompany.
	 * 
	 * @param created
	 *            The information of the created typecellularcompany.
	 * @return The created typecellularcompany.
	 */
	public TypeCellularCompany create(TypeCellularCompany created);

	/**
	 * Deletes a typecellularcompany.
	 * 
	 * @param typecellularcompanyId
	 *            The id of the deleted typecellularcompany.
	 * @return The deleted typecellularcompany.
	 * @throws EntityNotFoundException
	 *             if no typecellularcompany is found with the given id.
	 */
	public TypeCellularCompany delete(Integer typecellularcompanyId) throws EntityNotFoundException;

	/**
	 * Finds all typecellularcompanys.
	 * 
	 * @return A list of typecellularcompanys.
	 */
	public Page<TypeCellularCompany> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<TypeCellularCompany> findAll(Pageable pageable);
	
	/**
	 * Finds typecellularcompany by id.
	 * 
	 * @param id
	 *            The id of the wanted typecellularcompany.
	 * @return The found typecellularcompany. If no typecellularcompany is found, this method returns
	 *         null.
	 */
	public TypeCellularCompany findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a typecellularcompany.
	 * 
	 * @param updated
	 *            The information of the updated typecellularcompany.
	 * @return The updated typecellularcompany.
	 * @throws EntityNotFoundException
	 *             if no typecellularcompany is found with given id.
	 */
	public TypeCellularCompany update(TypeCellularCompany updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the typecellularcompanys in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the typecellularcompany.
	 */

	public long countAll();


    public Page<TypeCellularCompany> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

