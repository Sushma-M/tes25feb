/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class TypeEducation.
 * @see com.test_25feb.dynamohr126tabs.TypeEducation
 */

public interface TypeEducationService {
   /**
	 * Creates a new typeeducation.
	 * 
	 * @param created
	 *            The information of the created typeeducation.
	 * @return The created typeeducation.
	 */
	public TypeEducation create(TypeEducation created);

	/**
	 * Deletes a typeeducation.
	 * 
	 * @param typeeducationId
	 *            The id of the deleted typeeducation.
	 * @return The deleted typeeducation.
	 * @throws EntityNotFoundException
	 *             if no typeeducation is found with the given id.
	 */
	public TypeEducation delete(Integer typeeducationId) throws EntityNotFoundException;

	/**
	 * Finds all typeeducations.
	 * 
	 * @return A list of typeeducations.
	 */
	public Page<TypeEducation> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<TypeEducation> findAll(Pageable pageable);
	
	/**
	 * Finds typeeducation by id.
	 * 
	 * @param id
	 *            The id of the wanted typeeducation.
	 * @return The found typeeducation. If no typeeducation is found, this method returns
	 *         null.
	 */
	public TypeEducation findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a typeeducation.
	 * 
	 * @param updated
	 *            The information of the updated typeeducation.
	 * @return The updated typeeducation.
	 * @throws EntityNotFoundException
	 *             if no typeeducation is found with given id.
	 */
	public TypeEducation update(TypeEducation updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the typeeducations in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the typeeducation.
	 */

	public long countAll();


    public Page<TypeEducation> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

