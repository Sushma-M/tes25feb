/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class TypeRecruitment.
 * @see com.test_25feb.dynamohr126tabs.TypeRecruitment
 */

public interface TypeRecruitmentService {
   /**
	 * Creates a new typerecruitment.
	 * 
	 * @param created
	 *            The information of the created typerecruitment.
	 * @return The created typerecruitment.
	 */
	public TypeRecruitment create(TypeRecruitment created);

	/**
	 * Deletes a typerecruitment.
	 * 
	 * @param typerecruitmentId
	 *            The id of the deleted typerecruitment.
	 * @return The deleted typerecruitment.
	 * @throws EntityNotFoundException
	 *             if no typerecruitment is found with the given id.
	 */
	public TypeRecruitment delete(Integer typerecruitmentId) throws EntityNotFoundException;

	/**
	 * Finds all typerecruitments.
	 * 
	 * @return A list of typerecruitments.
	 */
	public Page<TypeRecruitment> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<TypeRecruitment> findAll(Pageable pageable);
	
	/**
	 * Finds typerecruitment by id.
	 * 
	 * @param id
	 *            The id of the wanted typerecruitment.
	 * @return The found typerecruitment. If no typerecruitment is found, this method returns
	 *         null.
	 */
	public TypeRecruitment findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a typerecruitment.
	 * 
	 * @param updated
	 *            The information of the updated typerecruitment.
	 * @return The updated typerecruitment.
	 * @throws EntityNotFoundException
	 *             if no typerecruitment is found with given id.
	 */
	public TypeRecruitment update(TypeRecruitment updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the typerecruitments in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the typerecruitment.
	 */

	public long countAll();


    public Page<TypeRecruitment> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

