/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class PaymentCheck.
 * @see com.test_25feb.dynamohr126tabs.PaymentCheck
 */

public interface PaymentCheckService {
   /**
	 * Creates a new paymentcheck.
	 * 
	 * @param created
	 *            The information of the created paymentcheck.
	 * @return The created paymentcheck.
	 */
	public PaymentCheck create(PaymentCheck created);

	/**
	 * Deletes a paymentcheck.
	 * 
	 * @param paymentcheckId
	 *            The id of the deleted paymentcheck.
	 * @return The deleted paymentcheck.
	 * @throws EntityNotFoundException
	 *             if no paymentcheck is found with the given id.
	 */
	public PaymentCheck delete(Integer paymentcheckId) throws EntityNotFoundException;

	/**
	 * Finds all paymentchecks.
	 * 
	 * @return A list of paymentchecks.
	 */
	public Page<PaymentCheck> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<PaymentCheck> findAll(Pageable pageable);
	
	/**
	 * Finds paymentcheck by id.
	 * 
	 * @param id
	 *            The id of the wanted paymentcheck.
	 * @return The found paymentcheck. If no paymentcheck is found, this method returns
	 *         null.
	 */
	public PaymentCheck findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a paymentcheck.
	 * 
	 * @param updated
	 *            The information of the updated paymentcheck.
	 * @return The updated paymentcheck.
	 * @throws EntityNotFoundException
	 *             if no paymentcheck is found with given id.
	 */
	public PaymentCheck update(PaymentCheck updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the paymentchecks in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the paymentcheck.
	 */

	public long countAll();


    public Page<PaymentCheck> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

