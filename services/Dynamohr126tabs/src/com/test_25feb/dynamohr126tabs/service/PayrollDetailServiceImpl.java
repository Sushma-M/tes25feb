/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class PayrollDetail.
 * @see com.test_25feb.dynamohr126tabs.PayrollDetail
 */
@Service("Dynamohr126tabs.PayrollDetailService")
public class PayrollDetailServiceImpl implements PayrollDetailService {


    private static final Logger LOGGER = LoggerFactory.getLogger(PayrollDetailServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.PayrollDetailDao")
    private WMGenericDao<PayrollDetail, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<PayrollDetail, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<PayrollDetail> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public PayrollDetail create(PayrollDetail payrolldetail) {
        LOGGER.debug("Creating a new payrolldetail with information: {}" , payrolldetail);
        return this.wmGenericDao.create(payrolldetail);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public PayrollDetail delete(Integer payrolldetailId) throws EntityNotFoundException {
        LOGGER.debug("Deleting payrolldetail with id: {}" , payrolldetailId);
        PayrollDetail deleted = this.wmGenericDao.findById(payrolldetailId);
        if (deleted == null) {
            LOGGER.debug("No payrolldetail found with id: {}" , payrolldetailId);
            throw new EntityNotFoundException(String.valueOf(payrolldetailId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<PayrollDetail> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all payrolldetails");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<PayrollDetail> findAll(Pageable pageable) {
        LOGGER.debug("Finding all payrolldetails");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public PayrollDetail findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding payrolldetail by id: {}" , id);
        PayrollDetail payrolldetail=this.wmGenericDao.findById(id);
        if(payrolldetail==null){
            LOGGER.debug("No payrolldetail found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return payrolldetail;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public PayrollDetail update(PayrollDetail updated) throws EntityNotFoundException {
        LOGGER.debug("Updating payrolldetail with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdPayrollDetail();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


