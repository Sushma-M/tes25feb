/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class EmployeeFileLocation.
 * @see com.test_25feb.dynamohr126tabs.EmployeeFileLocation
 */
@Service("Dynamohr126tabs.EmployeeFileLocationService")
public class EmployeeFileLocationServiceImpl implements EmployeeFileLocationService {


    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeFileLocationServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeFileLocationDao")
    private WMGenericDao<EmployeeFileLocation, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmployeeFileLocation, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<EmployeeFileLocation> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeFileLocation create(EmployeeFileLocation employeefilelocation) {
        LOGGER.debug("Creating a new employeefilelocation with information: {}" , employeefilelocation);
        return this.wmGenericDao.create(employeefilelocation);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeFileLocation delete(Integer employeefilelocationId) throws EntityNotFoundException {
        LOGGER.debug("Deleting employeefilelocation with id: {}" , employeefilelocationId);
        EmployeeFileLocation deleted = this.wmGenericDao.findById(employeefilelocationId);
        if (deleted == null) {
            LOGGER.debug("No employeefilelocation found with id: {}" , employeefilelocationId);
            throw new EntityNotFoundException(String.valueOf(employeefilelocationId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<EmployeeFileLocation> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all employeefilelocations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<EmployeeFileLocation> findAll(Pageable pageable) {
        LOGGER.debug("Finding all employeefilelocations");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeFileLocation findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding employeefilelocation by id: {}" , id);
        EmployeeFileLocation employeefilelocation=this.wmGenericDao.findById(id);
        if(employeefilelocation==null){
            LOGGER.debug("No employeefilelocation found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return employeefilelocation;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeFileLocation update(EmployeeFileLocation updated) throws EntityNotFoundException {
        LOGGER.debug("Updating employeefilelocation with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdEmployeeFileLocation();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


