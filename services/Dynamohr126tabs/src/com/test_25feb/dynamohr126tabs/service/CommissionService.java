/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class Commission.
 * @see com.test_25feb.dynamohr126tabs.Commission
 */

public interface CommissionService {
   /**
	 * Creates a new commission.
	 * 
	 * @param created
	 *            The information of the created commission.
	 * @return The created commission.
	 */
	public Commission create(Commission created);

	/**
	 * Deletes a commission.
	 * 
	 * @param commissionId
	 *            The id of the deleted commission.
	 * @return The deleted commission.
	 * @throws EntityNotFoundException
	 *             if no commission is found with the given id.
	 */
	public Commission delete(Integer commissionId) throws EntityNotFoundException;

	/**
	 * Finds all commissions.
	 * 
	 * @return A list of commissions.
	 */
	public Page<Commission> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Commission> findAll(Pageable pageable);
	
	/**
	 * Finds commission by id.
	 * 
	 * @param id
	 *            The id of the wanted commission.
	 * @return The found commission. If no commission is found, this method returns
	 *         null.
	 */
	public Commission findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a commission.
	 * 
	 * @param updated
	 *            The information of the updated commission.
	 * @return The updated commission.
	 * @throws EntityNotFoundException
	 *             if no commission is found with given id.
	 */
	public Commission update(Commission updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the commissions in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the commission.
	 */

	public long countAll();


    public Page<Commission> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

