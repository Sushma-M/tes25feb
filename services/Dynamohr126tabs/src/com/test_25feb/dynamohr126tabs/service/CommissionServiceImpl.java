/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class Commission.
 * @see com.test_25feb.dynamohr126tabs.Commission
 */
@Service("Dynamohr126tabs.CommissionService")
public class CommissionServiceImpl implements CommissionService {


    private static final Logger LOGGER = LoggerFactory.getLogger(CommissionServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.CommissionDao")
    private WMGenericDao<Commission, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Commission, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<Commission> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public Commission create(Commission commission) {
        LOGGER.debug("Creating a new commission with information: {}" , commission);
        return this.wmGenericDao.create(commission);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Commission delete(Integer commissionId) throws EntityNotFoundException {
        LOGGER.debug("Deleting commission with id: {}" , commissionId);
        Commission deleted = this.wmGenericDao.findById(commissionId);
        if (deleted == null) {
            LOGGER.debug("No commission found with id: {}" , commissionId);
            throw new EntityNotFoundException(String.valueOf(commissionId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<Commission> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all commissions");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<Commission> findAll(Pageable pageable) {
        LOGGER.debug("Finding all commissions");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Commission findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding commission by id: {}" , id);
        Commission commission=this.wmGenericDao.findById(id);
        if(commission==null){
            LOGGER.debug("No commission found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return commission;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Commission update(Commission updated) throws EntityNotFoundException {
        LOGGER.debug("Updating commission with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdCommission();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


