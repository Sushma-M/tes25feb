/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class EmployeeMessage.
 * @see com.test_25feb.dynamohr126tabs.EmployeeMessage
 */

public interface EmployeeMessageService {
   /**
	 * Creates a new employeemessage.
	 * 
	 * @param created
	 *            The information of the created employeemessage.
	 * @return The created employeemessage.
	 */
	public EmployeeMessage create(EmployeeMessage created);

	/**
	 * Deletes a employeemessage.
	 * 
	 * @param employeemessageId
	 *            The id of the deleted employeemessage.
	 * @return The deleted employeemessage.
	 * @throws EntityNotFoundException
	 *             if no employeemessage is found with the given id.
	 */
	public EmployeeMessage delete(Integer employeemessageId) throws EntityNotFoundException;

	/**
	 * Finds all employeemessages.
	 * 
	 * @return A list of employeemessages.
	 */
	public Page<EmployeeMessage> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<EmployeeMessage> findAll(Pageable pageable);
	
	/**
	 * Finds employeemessage by id.
	 * 
	 * @param id
	 *            The id of the wanted employeemessage.
	 * @return The found employeemessage. If no employeemessage is found, this method returns
	 *         null.
	 */
	public EmployeeMessage findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a employeemessage.
	 * 
	 * @param updated
	 *            The information of the updated employeemessage.
	 * @return The updated employeemessage.
	 * @throws EntityNotFoundException
	 *             if no employeemessage is found with given id.
	 */
	public EmployeeMessage update(EmployeeMessage updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the employeemessages in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the employeemessage.
	 */

	public long countAll();


    public Page<EmployeeMessage> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

