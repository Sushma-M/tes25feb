/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class ScheduleFixed.
 * @see com.test_25feb.dynamohr126tabs.ScheduleFixed
 */
@Service("Dynamohr126tabs.ScheduleFixedService")
public class ScheduleFixedServiceImpl implements ScheduleFixedService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ScheduleFixedServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.ScheduleFixedDao")
    private WMGenericDao<ScheduleFixed, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ScheduleFixed, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<ScheduleFixed> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public ScheduleFixed create(ScheduleFixed schedulefixed) {
        LOGGER.debug("Creating a new schedulefixed with information: {}" , schedulefixed);
        return this.wmGenericDao.create(schedulefixed);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ScheduleFixed delete(Integer schedulefixedId) throws EntityNotFoundException {
        LOGGER.debug("Deleting schedulefixed with id: {}" , schedulefixedId);
        ScheduleFixed deleted = this.wmGenericDao.findById(schedulefixedId);
        if (deleted == null) {
            LOGGER.debug("No schedulefixed found with id: {}" , schedulefixedId);
            throw new EntityNotFoundException(String.valueOf(schedulefixedId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ScheduleFixed> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all schedulefixeds");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ScheduleFixed> findAll(Pageable pageable) {
        LOGGER.debug("Finding all schedulefixeds");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ScheduleFixed findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding schedulefixed by id: {}" , id);
        ScheduleFixed schedulefixed=this.wmGenericDao.findById(id);
        if(schedulefixed==null){
            LOGGER.debug("No schedulefixed found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return schedulefixed;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ScheduleFixed update(ScheduleFixed updated) throws EntityNotFoundException {
        LOGGER.debug("Updating schedulefixed with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdScheduleFixed();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


