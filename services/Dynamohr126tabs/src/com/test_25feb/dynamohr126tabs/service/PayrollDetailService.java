/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class PayrollDetail.
 * @see com.test_25feb.dynamohr126tabs.PayrollDetail
 */

public interface PayrollDetailService {
   /**
	 * Creates a new payrolldetail.
	 * 
	 * @param created
	 *            The information of the created payrolldetail.
	 * @return The created payrolldetail.
	 */
	public PayrollDetail create(PayrollDetail created);

	/**
	 * Deletes a payrolldetail.
	 * 
	 * @param payrolldetailId
	 *            The id of the deleted payrolldetail.
	 * @return The deleted payrolldetail.
	 * @throws EntityNotFoundException
	 *             if no payrolldetail is found with the given id.
	 */
	public PayrollDetail delete(Integer payrolldetailId) throws EntityNotFoundException;

	/**
	 * Finds all payrolldetails.
	 * 
	 * @return A list of payrolldetails.
	 */
	public Page<PayrollDetail> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<PayrollDetail> findAll(Pageable pageable);
	
	/**
	 * Finds payrolldetail by id.
	 * 
	 * @param id
	 *            The id of the wanted payrolldetail.
	 * @return The found payrolldetail. If no payrolldetail is found, this method returns
	 *         null.
	 */
	public PayrollDetail findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a payrolldetail.
	 * 
	 * @param updated
	 *            The information of the updated payrolldetail.
	 * @return The updated payrolldetail.
	 * @throws EntityNotFoundException
	 *             if no payrolldetail is found with given id.
	 */
	public PayrollDetail update(PayrollDetail updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the payrolldetails in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the payrolldetail.
	 */

	public long countAll();


    public Page<PayrollDetail> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

