/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class ApplicantNote.
 * @see com.test_25feb.dynamohr126tabs.ApplicantNote
 */
@Service("Dynamohr126tabs.ApplicantNoteService")
public class ApplicantNoteServiceImpl implements ApplicantNoteService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ApplicantNoteServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.ApplicantNoteDao")
    private WMGenericDao<ApplicantNote, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ApplicantNote, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<ApplicantNote> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public ApplicantNote create(ApplicantNote applicantnote) {
        LOGGER.debug("Creating a new applicantnote with information: {}" , applicantnote);
        return this.wmGenericDao.create(applicantnote);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ApplicantNote delete(Integer applicantnoteId) throws EntityNotFoundException {
        LOGGER.debug("Deleting applicantnote with id: {}" , applicantnoteId);
        ApplicantNote deleted = this.wmGenericDao.findById(applicantnoteId);
        if (deleted == null) {
            LOGGER.debug("No applicantnote found with id: {}" , applicantnoteId);
            throw new EntityNotFoundException(String.valueOf(applicantnoteId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ApplicantNote> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all applicantnotes");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ApplicantNote> findAll(Pageable pageable) {
        LOGGER.debug("Finding all applicantnotes");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ApplicantNote findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding applicantnote by id: {}" , id);
        ApplicantNote applicantnote=this.wmGenericDao.findById(id);
        if(applicantnote==null){
            LOGGER.debug("No applicantnote found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return applicantnote;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ApplicantNote update(ApplicantNote updated) throws EntityNotFoundException {
        LOGGER.debug("Updating applicantnote with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdApplicantNote();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


