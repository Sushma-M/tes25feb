/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class RateCurrency.
 * @see com.test_25feb.dynamohr126tabs.RateCurrency
 */
@Service("Dynamohr126tabs.RateCurrencyService")
public class RateCurrencyServiceImpl implements RateCurrencyService {


    private static final Logger LOGGER = LoggerFactory.getLogger(RateCurrencyServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.RateCurrencyDao")
    private WMGenericDao<RateCurrency, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<RateCurrency, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<RateCurrency> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public RateCurrency create(RateCurrency ratecurrency) {
        LOGGER.debug("Creating a new ratecurrency with information: {}" , ratecurrency);
        return this.wmGenericDao.create(ratecurrency);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public RateCurrency delete(Integer ratecurrencyId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ratecurrency with id: {}" , ratecurrencyId);
        RateCurrency deleted = this.wmGenericDao.findById(ratecurrencyId);
        if (deleted == null) {
            LOGGER.debug("No ratecurrency found with id: {}" , ratecurrencyId);
            throw new EntityNotFoundException(String.valueOf(ratecurrencyId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<RateCurrency> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ratecurrencys");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<RateCurrency> findAll(Pageable pageable) {
        LOGGER.debug("Finding all ratecurrencys");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public RateCurrency findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding ratecurrency by id: {}" , id);
        RateCurrency ratecurrency=this.wmGenericDao.findById(id);
        if(ratecurrency==null){
            LOGGER.debug("No ratecurrency found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return ratecurrency;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public RateCurrency update(RateCurrency updated) throws EntityNotFoundException {
        LOGGER.debug("Updating ratecurrency with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdRateCurrency();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


