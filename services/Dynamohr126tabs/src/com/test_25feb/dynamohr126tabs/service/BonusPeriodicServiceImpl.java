/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class BonusPeriodic.
 * @see com.test_25feb.dynamohr126tabs.BonusPeriodic
 */
@Service("Dynamohr126tabs.BonusPeriodicService")
public class BonusPeriodicServiceImpl implements BonusPeriodicService {


    private static final Logger LOGGER = LoggerFactory.getLogger(BonusPeriodicServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.BonusPeriodicDao")
    private WMGenericDao<BonusPeriodic, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<BonusPeriodic, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<BonusPeriodic> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public BonusPeriodic create(BonusPeriodic bonusperiodic) {
        LOGGER.debug("Creating a new bonusperiodic with information: {}" , bonusperiodic);
        return this.wmGenericDao.create(bonusperiodic);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public BonusPeriodic delete(Integer bonusperiodicId) throws EntityNotFoundException {
        LOGGER.debug("Deleting bonusperiodic with id: {}" , bonusperiodicId);
        BonusPeriodic deleted = this.wmGenericDao.findById(bonusperiodicId);
        if (deleted == null) {
            LOGGER.debug("No bonusperiodic found with id: {}" , bonusperiodicId);
            throw new EntityNotFoundException(String.valueOf(bonusperiodicId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<BonusPeriodic> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all bonusperiodics");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<BonusPeriodic> findAll(Pageable pageable) {
        LOGGER.debug("Finding all bonusperiodics");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public BonusPeriodic findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding bonusperiodic by id: {}" , id);
        BonusPeriodic bonusperiodic=this.wmGenericDao.findById(id);
        if(bonusperiodic==null){
            LOGGER.debug("No bonusperiodic found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return bonusperiodic;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public BonusPeriodic update(BonusPeriodic updated) throws EntityNotFoundException {
        LOGGER.debug("Updating bonusperiodic with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdBonusPeriodic();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


