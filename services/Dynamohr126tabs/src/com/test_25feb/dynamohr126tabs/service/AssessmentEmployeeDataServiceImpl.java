/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class AssessmentEmployeeData.
 * @see com.test_25feb.dynamohr126tabs.AssessmentEmployeeData
 */
@Service("Dynamohr126tabs.AssessmentEmployeeDataService")
public class AssessmentEmployeeDataServiceImpl implements AssessmentEmployeeDataService {


    private static final Logger LOGGER = LoggerFactory.getLogger(AssessmentEmployeeDataServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.AssessmentEmployeeDataDao")
    private WMGenericDao<AssessmentEmployeeData, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AssessmentEmployeeData, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<AssessmentEmployeeData> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssessmentEmployeeData create(AssessmentEmployeeData assessmentemployeedata) {
        LOGGER.debug("Creating a new assessmentemployeedata with information: {}" , assessmentemployeedata);
        return this.wmGenericDao.create(assessmentemployeedata);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssessmentEmployeeData delete(Integer assessmentemployeedataId) throws EntityNotFoundException {
        LOGGER.debug("Deleting assessmentemployeedata with id: {}" , assessmentemployeedataId);
        AssessmentEmployeeData deleted = this.wmGenericDao.findById(assessmentemployeedataId);
        if (deleted == null) {
            LOGGER.debug("No assessmentemployeedata found with id: {}" , assessmentemployeedataId);
            throw new EntityNotFoundException(String.valueOf(assessmentemployeedataId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<AssessmentEmployeeData> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all assessmentemployeedatas");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<AssessmentEmployeeData> findAll(Pageable pageable) {
        LOGGER.debug("Finding all assessmentemployeedatas");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssessmentEmployeeData findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding assessmentemployeedata by id: {}" , id);
        AssessmentEmployeeData assessmentemployeedata=this.wmGenericDao.findById(id);
        if(assessmentemployeedata==null){
            LOGGER.debug("No assessmentemployeedata found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return assessmentemployeedata;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssessmentEmployeeData update(AssessmentEmployeeData updated) throws EntityNotFoundException {
        LOGGER.debug("Updating assessmentemployeedata with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdAssessmentEmployeeData();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


