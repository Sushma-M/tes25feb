/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class TypeOperationLog.
 * @see com.test_25feb.dynamohr126tabs.TypeOperationLog
 */

public interface TypeOperationLogService {
   /**
	 * Creates a new typeoperationlog.
	 * 
	 * @param created
	 *            The information of the created typeoperationlog.
	 * @return The created typeoperationlog.
	 */
	public TypeOperationLog create(TypeOperationLog created);

	/**
	 * Deletes a typeoperationlog.
	 * 
	 * @param typeoperationlogId
	 *            The id of the deleted typeoperationlog.
	 * @return The deleted typeoperationlog.
	 * @throws EntityNotFoundException
	 *             if no typeoperationlog is found with the given id.
	 */
	public TypeOperationLog delete(Integer typeoperationlogId) throws EntityNotFoundException;

	/**
	 * Finds all typeoperationlogs.
	 * 
	 * @return A list of typeoperationlogs.
	 */
	public Page<TypeOperationLog> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<TypeOperationLog> findAll(Pageable pageable);
	
	/**
	 * Finds typeoperationlog by id.
	 * 
	 * @param id
	 *            The id of the wanted typeoperationlog.
	 * @return The found typeoperationlog. If no typeoperationlog is found, this method returns
	 *         null.
	 */
	public TypeOperationLog findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a typeoperationlog.
	 * 
	 * @param updated
	 *            The information of the updated typeoperationlog.
	 * @return The updated typeoperationlog.
	 * @throws EntityNotFoundException
	 *             if no typeoperationlog is found with given id.
	 */
	public TypeOperationLog update(TypeOperationLog updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the typeoperationlogs in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the typeoperationlog.
	 */

	public long countAll();


    public Page<TypeOperationLog> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

