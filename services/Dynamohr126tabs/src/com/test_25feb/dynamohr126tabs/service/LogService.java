/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class Log.
 * @see com.test_25feb.dynamohr126tabs.Log
 */

public interface LogService {
   /**
	 * Creates a new log.
	 * 
	 * @param created
	 *            The information of the created log.
	 * @return The created log.
	 */
	public Log create(Log created);

	/**
	 * Deletes a log.
	 * 
	 * @param logId
	 *            The id of the deleted log.
	 * @return The deleted log.
	 * @throws EntityNotFoundException
	 *             if no log is found with the given id.
	 */
	public Log delete(Integer logId) throws EntityNotFoundException;

	/**
	 * Finds all logs.
	 * 
	 * @return A list of logs.
	 */
	public Page<Log> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Log> findAll(Pageable pageable);
	
	/**
	 * Finds log by id.
	 * 
	 * @param id
	 *            The id of the wanted log.
	 * @return The found log. If no log is found, this method returns
	 *         null.
	 */
	public Log findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a log.
	 * 
	 * @param updated
	 *            The information of the updated log.
	 * @return The updated log.
	 * @throws EntityNotFoundException
	 *             if no log is found with given id.
	 */
	public Log update(Log updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the logs in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the log.
	 */

	public long countAll();


    public Page<Log> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

