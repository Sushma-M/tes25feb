/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class OverTimeSegmentPayroll.
 * @see com.test_25feb.dynamohr126tabs.OverTimeSegmentPayroll
 */
@Service("Dynamohr126tabs.OverTimeSegmentPayrollService")
public class OverTimeSegmentPayrollServiceImpl implements OverTimeSegmentPayrollService {


    private static final Logger LOGGER = LoggerFactory.getLogger(OverTimeSegmentPayrollServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.OverTimeSegmentPayrollDao")
    private WMGenericDao<OverTimeSegmentPayroll, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<OverTimeSegmentPayroll, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<OverTimeSegmentPayroll> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public OverTimeSegmentPayroll create(OverTimeSegmentPayroll overtimesegmentpayroll) {
        LOGGER.debug("Creating a new overtimesegmentpayroll with information: {}" , overtimesegmentpayroll);
        return this.wmGenericDao.create(overtimesegmentpayroll);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public OverTimeSegmentPayroll delete(Integer overtimesegmentpayrollId) throws EntityNotFoundException {
        LOGGER.debug("Deleting overtimesegmentpayroll with id: {}" , overtimesegmentpayrollId);
        OverTimeSegmentPayroll deleted = this.wmGenericDao.findById(overtimesegmentpayrollId);
        if (deleted == null) {
            LOGGER.debug("No overtimesegmentpayroll found with id: {}" , overtimesegmentpayrollId);
            throw new EntityNotFoundException(String.valueOf(overtimesegmentpayrollId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<OverTimeSegmentPayroll> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all overtimesegmentpayrolls");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<OverTimeSegmentPayroll> findAll(Pageable pageable) {
        LOGGER.debug("Finding all overtimesegmentpayrolls");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public OverTimeSegmentPayroll findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding overtimesegmentpayroll by id: {}" , id);
        OverTimeSegmentPayroll overtimesegmentpayroll=this.wmGenericDao.findById(id);
        if(overtimesegmentpayroll==null){
            LOGGER.debug("No overtimesegmentpayroll found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return overtimesegmentpayroll;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public OverTimeSegmentPayroll update(OverTimeSegmentPayroll updated) throws EntityNotFoundException {
        LOGGER.debug("Updating overtimesegmentpayroll with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdOverTimeSegmentPayroll();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


