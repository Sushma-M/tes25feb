/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class AssetDiscardDocument.
 * @see com.test_25feb.dynamohr126tabs.AssetDiscardDocument
 */
@Service("Dynamohr126tabs.AssetDiscardDocumentService")
public class AssetDiscardDocumentServiceImpl implements AssetDiscardDocumentService {


    private static final Logger LOGGER = LoggerFactory.getLogger(AssetDiscardDocumentServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.AssetDiscardDocumentDao")
    private WMGenericDao<AssetDiscardDocument, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<AssetDiscardDocument, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<AssetDiscardDocument> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssetDiscardDocument create(AssetDiscardDocument assetdiscarddocument) {
        LOGGER.debug("Creating a new assetdiscarddocument with information: {}" , assetdiscarddocument);
        return this.wmGenericDao.create(assetdiscarddocument);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssetDiscardDocument delete(Integer assetdiscarddocumentId) throws EntityNotFoundException {
        LOGGER.debug("Deleting assetdiscarddocument with id: {}" , assetdiscarddocumentId);
        AssetDiscardDocument deleted = this.wmGenericDao.findById(assetdiscarddocumentId);
        if (deleted == null) {
            LOGGER.debug("No assetdiscarddocument found with id: {}" , assetdiscarddocumentId);
            throw new EntityNotFoundException(String.valueOf(assetdiscarddocumentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<AssetDiscardDocument> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all assetdiscarddocuments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<AssetDiscardDocument> findAll(Pageable pageable) {
        LOGGER.debug("Finding all assetdiscarddocuments");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssetDiscardDocument findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding assetdiscarddocument by id: {}" , id);
        AssetDiscardDocument assetdiscarddocument=this.wmGenericDao.findById(id);
        if(assetdiscarddocument==null){
            LOGGER.debug("No assetdiscarddocument found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return assetdiscarddocument;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public AssetDiscardDocument update(AssetDiscardDocument updated) throws EntityNotFoundException {
        LOGGER.debug("Updating assetdiscarddocument with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdAssetDiscardDocument();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


