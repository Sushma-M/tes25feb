/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class WorkPositionVacant.
 * @see com.test_25feb.dynamohr126tabs.WorkPositionVacant
 */

public interface WorkPositionVacantService {
   /**
	 * Creates a new workpositionvacant.
	 * 
	 * @param created
	 *            The information of the created workpositionvacant.
	 * @return The created workpositionvacant.
	 */
	public WorkPositionVacant create(WorkPositionVacant created);

	/**
	 * Deletes a workpositionvacant.
	 * 
	 * @param workpositionvacantId
	 *            The id of the deleted workpositionvacant.
	 * @return The deleted workpositionvacant.
	 * @throws EntityNotFoundException
	 *             if no workpositionvacant is found with the given id.
	 */
	public WorkPositionVacant delete(Integer workpositionvacantId) throws EntityNotFoundException;

	/**
	 * Finds all workpositionvacants.
	 * 
	 * @return A list of workpositionvacants.
	 */
	public Page<WorkPositionVacant> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<WorkPositionVacant> findAll(Pageable pageable);
	
	/**
	 * Finds workpositionvacant by id.
	 * 
	 * @param id
	 *            The id of the wanted workpositionvacant.
	 * @return The found workpositionvacant. If no workpositionvacant is found, this method returns
	 *         null.
	 */
	public WorkPositionVacant findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a workpositionvacant.
	 * 
	 * @param updated
	 *            The information of the updated workpositionvacant.
	 * @return The updated workpositionvacant.
	 * @throws EntityNotFoundException
	 *             if no workpositionvacant is found with given id.
	 */
	public WorkPositionVacant update(WorkPositionVacant updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the workpositionvacants in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the workpositionvacant.
	 */

	public long countAll();


    public Page<WorkPositionVacant> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

