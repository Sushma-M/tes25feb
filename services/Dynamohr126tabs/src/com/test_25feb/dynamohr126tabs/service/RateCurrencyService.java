/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class RateCurrency.
 * @see com.test_25feb.dynamohr126tabs.RateCurrency
 */

public interface RateCurrencyService {
   /**
	 * Creates a new ratecurrency.
	 * 
	 * @param created
	 *            The information of the created ratecurrency.
	 * @return The created ratecurrency.
	 */
	public RateCurrency create(RateCurrency created);

	/**
	 * Deletes a ratecurrency.
	 * 
	 * @param ratecurrencyId
	 *            The id of the deleted ratecurrency.
	 * @return The deleted ratecurrency.
	 * @throws EntityNotFoundException
	 *             if no ratecurrency is found with the given id.
	 */
	public RateCurrency delete(Integer ratecurrencyId) throws EntityNotFoundException;

	/**
	 * Finds all ratecurrencys.
	 * 
	 * @return A list of ratecurrencys.
	 */
	public Page<RateCurrency> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<RateCurrency> findAll(Pageable pageable);
	
	/**
	 * Finds ratecurrency by id.
	 * 
	 * @param id
	 *            The id of the wanted ratecurrency.
	 * @return The found ratecurrency. If no ratecurrency is found, this method returns
	 *         null.
	 */
	public RateCurrency findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a ratecurrency.
	 * 
	 * @param updated
	 *            The information of the updated ratecurrency.
	 * @return The updated ratecurrency.
	 * @throws EntityNotFoundException
	 *             if no ratecurrency is found with given id.
	 */
	public RateCurrency update(RateCurrency updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the ratecurrencys in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the ratecurrency.
	 */

	public long countAll();


    public Page<RateCurrency> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

