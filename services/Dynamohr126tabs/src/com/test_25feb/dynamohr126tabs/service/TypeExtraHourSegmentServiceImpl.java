/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class TypeExtraHourSegment.
 * @see com.test_25feb.dynamohr126tabs.TypeExtraHourSegment
 */
@Service("Dynamohr126tabs.TypeExtraHourSegmentService")
public class TypeExtraHourSegmentServiceImpl implements TypeExtraHourSegmentService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TypeExtraHourSegmentServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.TypeExtraHourSegmentDao")
    private WMGenericDao<TypeExtraHourSegment, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TypeExtraHourSegment, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<TypeExtraHourSegment> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeExtraHourSegment create(TypeExtraHourSegment typeextrahoursegment) {
        LOGGER.debug("Creating a new typeextrahoursegment with information: {}" , typeextrahoursegment);
        return this.wmGenericDao.create(typeextrahoursegment);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeExtraHourSegment delete(Integer typeextrahoursegmentId) throws EntityNotFoundException {
        LOGGER.debug("Deleting typeextrahoursegment with id: {}" , typeextrahoursegmentId);
        TypeExtraHourSegment deleted = this.wmGenericDao.findById(typeextrahoursegmentId);
        if (deleted == null) {
            LOGGER.debug("No typeextrahoursegment found with id: {}" , typeextrahoursegmentId);
            throw new EntityNotFoundException(String.valueOf(typeextrahoursegmentId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeExtraHourSegment> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all typeextrahoursegments");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<TypeExtraHourSegment> findAll(Pageable pageable) {
        LOGGER.debug("Finding all typeextrahoursegments");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeExtraHourSegment findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding typeextrahoursegment by id: {}" , id);
        TypeExtraHourSegment typeextrahoursegment=this.wmGenericDao.findById(id);
        if(typeextrahoursegment==null){
            LOGGER.debug("No typeextrahoursegment found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return typeextrahoursegment;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public TypeExtraHourSegment update(TypeExtraHourSegment updated) throws EntityNotFoundException {
        LOGGER.debug("Updating typeextrahoursegment with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdTypeExtraHourSegment();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


