/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class RolePermission.
 * @see com.test_25feb.dynamohr126tabs.RolePermission
 */

public interface RolePermissionService {
   /**
	 * Creates a new rolepermission.
	 * 
	 * @param created
	 *            The information of the created rolepermission.
	 * @return The created rolepermission.
	 */
	public RolePermission create(RolePermission created);

	/**
	 * Deletes a rolepermission.
	 * 
	 * @param rolepermissionId
	 *            The id of the deleted rolepermission.
	 * @return The deleted rolepermission.
	 * @throws EntityNotFoundException
	 *             if no rolepermission is found with the given id.
	 */
	public RolePermission delete(Integer rolepermissionId) throws EntityNotFoundException;

	/**
	 * Finds all rolepermissions.
	 * 
	 * @return A list of rolepermissions.
	 */
	public Page<RolePermission> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<RolePermission> findAll(Pageable pageable);
	
	/**
	 * Finds rolepermission by id.
	 * 
	 * @param id
	 *            The id of the wanted rolepermission.
	 * @return The found rolepermission. If no rolepermission is found, this method returns
	 *         null.
	 */
	public RolePermission findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a rolepermission.
	 * 
	 * @param updated
	 *            The information of the updated rolepermission.
	 * @return The updated rolepermission.
	 * @throws EntityNotFoundException
	 *             if no rolepermission is found with given id.
	 */
	public RolePermission update(RolePermission updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the rolepermissions in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the rolepermission.
	 */

	public long countAll();


    public Page<RolePermission> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

