/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class TravelEmployee.
 * @see com.test_25feb.dynamohr126tabs.TravelEmployee
 */

public interface TravelEmployeeService {
   /**
	 * Creates a new travelemployee.
	 * 
	 * @param created
	 *            The information of the created travelemployee.
	 * @return The created travelemployee.
	 */
	public TravelEmployee create(TravelEmployee created);

	/**
	 * Deletes a travelemployee.
	 * 
	 * @param travelemployeeId
	 *            The id of the deleted travelemployee.
	 * @return The deleted travelemployee.
	 * @throws EntityNotFoundException
	 *             if no travelemployee is found with the given id.
	 */
	public TravelEmployee delete(Integer travelemployeeId) throws EntityNotFoundException;

	/**
	 * Finds all travelemployees.
	 * 
	 * @return A list of travelemployees.
	 */
	public Page<TravelEmployee> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<TravelEmployee> findAll(Pageable pageable);
	
	/**
	 * Finds travelemployee by id.
	 * 
	 * @param id
	 *            The id of the wanted travelemployee.
	 * @return The found travelemployee. If no travelemployee is found, this method returns
	 *         null.
	 */
	public TravelEmployee findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a travelemployee.
	 * 
	 * @param updated
	 *            The information of the updated travelemployee.
	 * @return The updated travelemployee.
	 * @throws EntityNotFoundException
	 *             if no travelemployee is found with given id.
	 */
	public TravelEmployee update(TravelEmployee updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the travelemployees in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the travelemployee.
	 */

	public long countAll();


    public Page<TravelEmployee> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

