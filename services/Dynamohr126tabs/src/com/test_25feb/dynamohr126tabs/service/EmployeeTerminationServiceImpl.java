/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class EmployeeTermination.
 * @see com.test_25feb.dynamohr126tabs.EmployeeTermination
 */
@Service("Dynamohr126tabs.EmployeeTerminationService")
public class EmployeeTerminationServiceImpl implements EmployeeTerminationService {


    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeTerminationServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeTerminationDao")
    private WMGenericDao<EmployeeTermination, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmployeeTermination, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<EmployeeTermination> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeTermination create(EmployeeTermination employeetermination) {
        LOGGER.debug("Creating a new employeetermination with information: {}" , employeetermination);
        return this.wmGenericDao.create(employeetermination);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeTermination delete(Integer employeeterminationId) throws EntityNotFoundException {
        LOGGER.debug("Deleting employeetermination with id: {}" , employeeterminationId);
        EmployeeTermination deleted = this.wmGenericDao.findById(employeeterminationId);
        if (deleted == null) {
            LOGGER.debug("No employeetermination found with id: {}" , employeeterminationId);
            throw new EntityNotFoundException(String.valueOf(employeeterminationId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<EmployeeTermination> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all employeeterminations");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<EmployeeTermination> findAll(Pageable pageable) {
        LOGGER.debug("Finding all employeeterminations");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeTermination findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding employeetermination by id: {}" , id);
        EmployeeTermination employeetermination=this.wmGenericDao.findById(id);
        if(employeetermination==null){
            LOGGER.debug("No employeetermination found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return employeetermination;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeTermination update(EmployeeTermination updated) throws EntityNotFoundException {
        LOGGER.debug("Updating employeetermination with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdEmployeeTermination();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


