/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class BadgeTemplate.
 * @see com.test_25feb.dynamohr126tabs.BadgeTemplate
 */

public interface BadgeTemplateService {
   /**
	 * Creates a new badgetemplate.
	 * 
	 * @param created
	 *            The information of the created badgetemplate.
	 * @return The created badgetemplate.
	 */
	public BadgeTemplate create(BadgeTemplate created);

	/**
	 * Deletes a badgetemplate.
	 * 
	 * @param badgetemplateId
	 *            The id of the deleted badgetemplate.
	 * @return The deleted badgetemplate.
	 * @throws EntityNotFoundException
	 *             if no badgetemplate is found with the given id.
	 */
	public BadgeTemplate delete(Integer badgetemplateId) throws EntityNotFoundException;

	/**
	 * Finds all badgetemplates.
	 * 
	 * @return A list of badgetemplates.
	 */
	public Page<BadgeTemplate> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<BadgeTemplate> findAll(Pageable pageable);
	
	/**
	 * Finds badgetemplate by id.
	 * 
	 * @param id
	 *            The id of the wanted badgetemplate.
	 * @return The found badgetemplate. If no badgetemplate is found, this method returns
	 *         null.
	 */
	public BadgeTemplate findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a badgetemplate.
	 * 
	 * @param updated
	 *            The information of the updated badgetemplate.
	 * @return The updated badgetemplate.
	 * @throws EntityNotFoundException
	 *             if no badgetemplate is found with given id.
	 */
	public BadgeTemplate update(BadgeTemplate updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the badgetemplates in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the badgetemplate.
	 */

	public long countAll();


    public Page<BadgeTemplate> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

