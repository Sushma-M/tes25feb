/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class Log.
 * @see com.test_25feb.dynamohr126tabs.Log
 */
@Service("Dynamohr126tabs.LogService")
public class LogServiceImpl implements LogService {


    private static final Logger LOGGER = LoggerFactory.getLogger(LogServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.LogDao")
    private WMGenericDao<Log, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<Log, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<Log> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public Log create(Log log) {
        LOGGER.debug("Creating a new log with information: {}" , log);
        return this.wmGenericDao.create(log);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Log delete(Integer logId) throws EntityNotFoundException {
        LOGGER.debug("Deleting log with id: {}" , logId);
        Log deleted = this.wmGenericDao.findById(logId);
        if (deleted == null) {
            LOGGER.debug("No log found with id: {}" , logId);
            throw new EntityNotFoundException(String.valueOf(logId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<Log> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all logs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<Log> findAll(Pageable pageable) {
        LOGGER.debug("Finding all logs");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Log findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding log by id: {}" , id);
        Log log=this.wmGenericDao.findById(id);
        if(log==null){
            LOGGER.debug("No log found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return log;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Log update(Log updated) throws EntityNotFoundException {
        LOGGER.debug("Updating log with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getLogId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


