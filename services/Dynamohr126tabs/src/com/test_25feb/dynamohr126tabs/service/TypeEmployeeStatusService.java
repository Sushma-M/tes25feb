/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class TypeEmployeeStatus.
 * @see com.test_25feb.dynamohr126tabs.TypeEmployeeStatus
 */

public interface TypeEmployeeStatusService {
   /**
	 * Creates a new typeemployeestatus.
	 * 
	 * @param created
	 *            The information of the created typeemployeestatus.
	 * @return The created typeemployeestatus.
	 */
	public TypeEmployeeStatus create(TypeEmployeeStatus created);

	/**
	 * Deletes a typeemployeestatus.
	 * 
	 * @param typeemployeestatusId
	 *            The id of the deleted typeemployeestatus.
	 * @return The deleted typeemployeestatus.
	 * @throws EntityNotFoundException
	 *             if no typeemployeestatus is found with the given id.
	 */
	public TypeEmployeeStatus delete(Integer typeemployeestatusId) throws EntityNotFoundException;

	/**
	 * Finds all typeemployeestatuss.
	 * 
	 * @return A list of typeemployeestatuss.
	 */
	public Page<TypeEmployeeStatus> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<TypeEmployeeStatus> findAll(Pageable pageable);
	
	/**
	 * Finds typeemployeestatus by id.
	 * 
	 * @param id
	 *            The id of the wanted typeemployeestatus.
	 * @return The found typeemployeestatus. If no typeemployeestatus is found, this method returns
	 *         null.
	 */
	public TypeEmployeeStatus findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a typeemployeestatus.
	 * 
	 * @param updated
	 *            The information of the updated typeemployeestatus.
	 * @return The updated typeemployeestatus.
	 * @throws EntityNotFoundException
	 *             if no typeemployeestatus is found with given id.
	 */
	public TypeEmployeeStatus update(TypeEmployeeStatus updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the typeemployeestatuss in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the typeemployeestatus.
	 */

	public long countAll();


    public Page<TypeEmployeeStatus> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

