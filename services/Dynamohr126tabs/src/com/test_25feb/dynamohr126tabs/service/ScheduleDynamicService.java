/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class ScheduleDynamic.
 * @see com.test_25feb.dynamohr126tabs.ScheduleDynamic
 */

public interface ScheduleDynamicService {
   /**
	 * Creates a new scheduledynamic.
	 * 
	 * @param created
	 *            The information of the created scheduledynamic.
	 * @return The created scheduledynamic.
	 */
	public ScheduleDynamic create(ScheduleDynamic created);

	/**
	 * Deletes a scheduledynamic.
	 * 
	 * @param scheduledynamicId
	 *            The id of the deleted scheduledynamic.
	 * @return The deleted scheduledynamic.
	 * @throws EntityNotFoundException
	 *             if no scheduledynamic is found with the given id.
	 */
	public ScheduleDynamic delete(Integer scheduledynamicId) throws EntityNotFoundException;

	/**
	 * Finds all scheduledynamics.
	 * 
	 * @return A list of scheduledynamics.
	 */
	public Page<ScheduleDynamic> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<ScheduleDynamic> findAll(Pageable pageable);
	
	/**
	 * Finds scheduledynamic by id.
	 * 
	 * @param id
	 *            The id of the wanted scheduledynamic.
	 * @return The found scheduledynamic. If no scheduledynamic is found, this method returns
	 *         null.
	 */
	public ScheduleDynamic findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a scheduledynamic.
	 * 
	 * @param updated
	 *            The information of the updated scheduledynamic.
	 * @return The updated scheduledynamic.
	 * @throws EntityNotFoundException
	 *             if no scheduledynamic is found with given id.
	 */
	public ScheduleDynamic update(ScheduleDynamic updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the scheduledynamics in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the scheduledynamic.
	 */

	public long countAll();


    public Page<ScheduleDynamic> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

