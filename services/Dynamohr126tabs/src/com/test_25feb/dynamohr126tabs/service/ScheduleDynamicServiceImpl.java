/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class ScheduleDynamic.
 * @see com.test_25feb.dynamohr126tabs.ScheduleDynamic
 */
@Service("Dynamohr126tabs.ScheduleDynamicService")
public class ScheduleDynamicServiceImpl implements ScheduleDynamicService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ScheduleDynamicServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.ScheduleDynamicDao")
    private WMGenericDao<ScheduleDynamic, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ScheduleDynamic, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<ScheduleDynamic> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public ScheduleDynamic create(ScheduleDynamic scheduledynamic) {
        LOGGER.debug("Creating a new scheduledynamic with information: {}" , scheduledynamic);
        return this.wmGenericDao.create(scheduledynamic);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ScheduleDynamic delete(Integer scheduledynamicId) throws EntityNotFoundException {
        LOGGER.debug("Deleting scheduledynamic with id: {}" , scheduledynamicId);
        ScheduleDynamic deleted = this.wmGenericDao.findById(scheduledynamicId);
        if (deleted == null) {
            LOGGER.debug("No scheduledynamic found with id: {}" , scheduledynamicId);
            throw new EntityNotFoundException(String.valueOf(scheduledynamicId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ScheduleDynamic> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all scheduledynamics");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<ScheduleDynamic> findAll(Pageable pageable) {
        LOGGER.debug("Finding all scheduledynamics");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ScheduleDynamic findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding scheduledynamic by id: {}" , id);
        ScheduleDynamic scheduledynamic=this.wmGenericDao.findById(id);
        if(scheduledynamic==null){
            LOGGER.debug("No scheduledynamic found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return scheduledynamic;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public ScheduleDynamic update(ScheduleDynamic updated) throws EntityNotFoundException {
        LOGGER.debug("Updating scheduledynamic with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdScheduleDynamic();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


