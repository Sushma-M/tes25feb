/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class AssetPhotoFile.
 * @see com.test_25feb.dynamohr126tabs.AssetPhotoFile
 */

public interface AssetPhotoFileService {
   /**
	 * Creates a new assetphotofile.
	 * 
	 * @param created
	 *            The information of the created assetphotofile.
	 * @return The created assetphotofile.
	 */
	public AssetPhotoFile create(AssetPhotoFile created);

	/**
	 * Deletes a assetphotofile.
	 * 
	 * @param assetphotofileId
	 *            The id of the deleted assetphotofile.
	 * @return The deleted assetphotofile.
	 * @throws EntityNotFoundException
	 *             if no assetphotofile is found with the given id.
	 */
	public AssetPhotoFile delete(Integer assetphotofileId) throws EntityNotFoundException;

	/**
	 * Finds all assetphotofiles.
	 * 
	 * @return A list of assetphotofiles.
	 */
	public Page<AssetPhotoFile> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<AssetPhotoFile> findAll(Pageable pageable);
	
	/**
	 * Finds assetphotofile by id.
	 * 
	 * @param id
	 *            The id of the wanted assetphotofile.
	 * @return The found assetphotofile. If no assetphotofile is found, this method returns
	 *         null.
	 */
	public AssetPhotoFile findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a assetphotofile.
	 * 
	 * @param updated
	 *            The information of the updated assetphotofile.
	 * @return The updated assetphotofile.
	 * @throws EntityNotFoundException
	 *             if no assetphotofile is found with given id.
	 */
	public AssetPhotoFile update(AssetPhotoFile updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the assetphotofiles in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the assetphotofile.
	 */

	public long countAll();


    public Page<AssetPhotoFile> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

