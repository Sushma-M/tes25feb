/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class EmployeePhotoFile.
 * @see com.test_25feb.dynamohr126tabs.EmployeePhotoFile
 */

public interface EmployeePhotoFileService {
   /**
	 * Creates a new employeephotofile.
	 * 
	 * @param created
	 *            The information of the created employeephotofile.
	 * @return The created employeephotofile.
	 */
	public EmployeePhotoFile create(EmployeePhotoFile created);

	/**
	 * Deletes a employeephotofile.
	 * 
	 * @param employeephotofileId
	 *            The id of the deleted employeephotofile.
	 * @return The deleted employeephotofile.
	 * @throws EntityNotFoundException
	 *             if no employeephotofile is found with the given id.
	 */
	public EmployeePhotoFile delete(Integer employeephotofileId) throws EntityNotFoundException;

	/**
	 * Finds all employeephotofiles.
	 * 
	 * @return A list of employeephotofiles.
	 */
	public Page<EmployeePhotoFile> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<EmployeePhotoFile> findAll(Pageable pageable);
	
	/**
	 * Finds employeephotofile by id.
	 * 
	 * @param id
	 *            The id of the wanted employeephotofile.
	 * @return The found employeephotofile. If no employeephotofile is found, this method returns
	 *         null.
	 */
	public EmployeePhotoFile findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a employeephotofile.
	 * 
	 * @param updated
	 *            The information of the updated employeephotofile.
	 * @return The updated employeephotofile.
	 * @throws EntityNotFoundException
	 *             if no employeephotofile is found with given id.
	 */
	public EmployeePhotoFile update(EmployeePhotoFile updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the employeephotofiles in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the employeephotofile.
	 */

	public long countAll();


    public Page<EmployeePhotoFile> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

