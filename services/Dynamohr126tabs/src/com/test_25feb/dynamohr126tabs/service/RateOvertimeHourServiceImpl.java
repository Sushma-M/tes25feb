/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class RateOvertimeHour.
 * @see com.test_25feb.dynamohr126tabs.RateOvertimeHour
 */
@Service("Dynamohr126tabs.RateOvertimeHourService")
public class RateOvertimeHourServiceImpl implements RateOvertimeHourService {


    private static final Logger LOGGER = LoggerFactory.getLogger(RateOvertimeHourServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.RateOvertimeHourDao")
    private WMGenericDao<RateOvertimeHour, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<RateOvertimeHour, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<RateOvertimeHour> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public RateOvertimeHour create(RateOvertimeHour rateovertimehour) {
        LOGGER.debug("Creating a new rateovertimehour with information: {}" , rateovertimehour);
        return this.wmGenericDao.create(rateovertimehour);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public RateOvertimeHour delete(Integer rateovertimehourId) throws EntityNotFoundException {
        LOGGER.debug("Deleting rateovertimehour with id: {}" , rateovertimehourId);
        RateOvertimeHour deleted = this.wmGenericDao.findById(rateovertimehourId);
        if (deleted == null) {
            LOGGER.debug("No rateovertimehour found with id: {}" , rateovertimehourId);
            throw new EntityNotFoundException(String.valueOf(rateovertimehourId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<RateOvertimeHour> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all rateovertimehours");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<RateOvertimeHour> findAll(Pageable pageable) {
        LOGGER.debug("Finding all rateovertimehours");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public RateOvertimeHour findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding rateovertimehour by id: {}" , id);
        RateOvertimeHour rateovertimehour=this.wmGenericDao.findById(id);
        if(rateovertimehour==null){
            LOGGER.debug("No rateovertimehour found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return rateovertimehour;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public RateOvertimeHour update(RateOvertimeHour updated) throws EntityNotFoundException {
        LOGGER.debug("Updating rateovertimehour with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdTypeGenerationForm();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


