/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class BonusEventual.
 * @see com.test_25feb.dynamohr126tabs.BonusEventual
 */

public interface BonusEventualService {
   /**
	 * Creates a new bonuseventual.
	 * 
	 * @param created
	 *            The information of the created bonuseventual.
	 * @return The created bonuseventual.
	 */
	public BonusEventual create(BonusEventual created);

	/**
	 * Deletes a bonuseventual.
	 * 
	 * @param bonuseventualId
	 *            The id of the deleted bonuseventual.
	 * @return The deleted bonuseventual.
	 * @throws EntityNotFoundException
	 *             if no bonuseventual is found with the given id.
	 */
	public BonusEventual delete(Integer bonuseventualId) throws EntityNotFoundException;

	/**
	 * Finds all bonuseventuals.
	 * 
	 * @return A list of bonuseventuals.
	 */
	public Page<BonusEventual> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<BonusEventual> findAll(Pageable pageable);
	
	/**
	 * Finds bonuseventual by id.
	 * 
	 * @param id
	 *            The id of the wanted bonuseventual.
	 * @return The found bonuseventual. If no bonuseventual is found, this method returns
	 *         null.
	 */
	public BonusEventual findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a bonuseventual.
	 * 
	 * @param updated
	 *            The information of the updated bonuseventual.
	 * @return The updated bonuseventual.
	 * @throws EntityNotFoundException
	 *             if no bonuseventual is found with given id.
	 */
	public BonusEventual update(BonusEventual updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the bonuseventuals in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the bonuseventual.
	 */

	public long countAll();


    public Page<BonusEventual> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

