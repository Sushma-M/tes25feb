/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;

/**
 * Service object for domain model class TravelExpense.
 * @see com.test_25feb.dynamohr126tabs.TravelExpense
 */

public interface TravelExpenseService {
   /**
	 * Creates a new travelexpense.
	 * 
	 * @param created
	 *            The information of the created travelexpense.
	 * @return The created travelexpense.
	 */
	public TravelExpense create(TravelExpense created);

	/**
	 * Deletes a travelexpense.
	 * 
	 * @param travelexpenseId
	 *            The id of the deleted travelexpense.
	 * @return The deleted travelexpense.
	 * @throws EntityNotFoundException
	 *             if no travelexpense is found with the given id.
	 */
	public TravelExpense delete(Integer travelexpenseId) throws EntityNotFoundException;

	/**
	 * Finds all travelexpenses.
	 * 
	 * @return A list of travelexpenses.
	 */
	public Page<TravelExpense> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<TravelExpense> findAll(Pageable pageable);
	
	/**
	 * Finds travelexpense by id.
	 * 
	 * @param id
	 *            The id of the wanted travelexpense.
	 * @return The found travelexpense. If no travelexpense is found, this method returns
	 *         null.
	 */
	public TravelExpense findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a travelexpense.
	 * 
	 * @param updated
	 *            The information of the updated travelexpense.
	 * @return The updated travelexpense.
	 * @throws EntityNotFoundException
	 *             if no travelexpense is found with given id.
	 */
	public TravelExpense update(TravelExpense updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the travelexpenses in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the travelexpense.
	 */

	public long countAll();


    public Page<TravelExpense> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

