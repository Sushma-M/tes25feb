/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class EmployeeFile.
 * @see com.test_25feb.dynamohr126tabs.EmployeeFile
 */
@Service("Dynamohr126tabs.EmployeeFileService")
public class EmployeeFileServiceImpl implements EmployeeFileService {


    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeeFileServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeeFileDao")
    private WMGenericDao<EmployeeFile, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmployeeFile, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<EmployeeFile> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeFile create(EmployeeFile employeefile) {
        LOGGER.debug("Creating a new employeefile with information: {}" , employeefile);
        return this.wmGenericDao.create(employeefile);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeFile delete(Integer employeefileId) throws EntityNotFoundException {
        LOGGER.debug("Deleting employeefile with id: {}" , employeefileId);
        EmployeeFile deleted = this.wmGenericDao.findById(employeefileId);
        if (deleted == null) {
            LOGGER.debug("No employeefile found with id: {}" , employeefileId);
            throw new EntityNotFoundException(String.valueOf(employeefileId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<EmployeeFile> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all employeefiles");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<EmployeeFile> findAll(Pageable pageable) {
        LOGGER.debug("Finding all employeefiles");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeFile findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding employeefile by id: {}" , id);
        EmployeeFile employeefile=this.wmGenericDao.findById(id);
        if(employeefile==null){
            LOGGER.debug("No employeefile found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return employeefile;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeeFile update(EmployeeFile updated) throws EntityNotFoundException {
        LOGGER.debug("Updating employeefile with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdEmployeeFile();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


