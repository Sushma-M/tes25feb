/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class DetallePlanillaEgresos.
 * @see com.test_25feb.dynamohr126tabs.DetallePlanillaEgresos
 */
@Service("Dynamohr126tabs.DetallePlanillaEgresosService")
public class DetallePlanillaEgresosServiceImpl implements DetallePlanillaEgresosService {


    private static final Logger LOGGER = LoggerFactory.getLogger(DetallePlanillaEgresosServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.DetallePlanillaEgresosDao")
    private WMGenericDao<DetallePlanillaEgresos, DetallePlanillaEgresosId> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<DetallePlanillaEgresos, DetallePlanillaEgresosId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<DetallePlanillaEgresos> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public DetallePlanillaEgresos create(DetallePlanillaEgresos detalleplanillaegresos) {
        LOGGER.debug("Creating a new detalleplanillaegresos with information: {}" , detalleplanillaegresos);
        return this.wmGenericDao.create(detalleplanillaegresos);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public DetallePlanillaEgresos delete(DetallePlanillaEgresosId detalleplanillaegresosId) throws EntityNotFoundException {
        LOGGER.debug("Deleting detalleplanillaegresos with id: {}" , detalleplanillaegresosId);
        DetallePlanillaEgresos deleted = this.wmGenericDao.findById(detalleplanillaegresosId);
        if (deleted == null) {
            LOGGER.debug("No detalleplanillaegresos found with id: {}" , detalleplanillaegresosId);
            throw new EntityNotFoundException(String.valueOf(detalleplanillaegresosId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<DetallePlanillaEgresos> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all detalleplanillaegresoss");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<DetallePlanillaEgresos> findAll(Pageable pageable) {
        LOGGER.debug("Finding all detalleplanillaegresoss");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public DetallePlanillaEgresos findById(DetallePlanillaEgresosId id) throws EntityNotFoundException {
        LOGGER.debug("Finding detalleplanillaegresos by id: {}" , id);
        DetallePlanillaEgresos detalleplanillaegresos=this.wmGenericDao.findById(id);
        if(detalleplanillaegresos==null){
            LOGGER.debug("No detalleplanillaegresos found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return detalleplanillaegresos;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public DetallePlanillaEgresos update(DetallePlanillaEgresos updated) throws EntityNotFoundException {
        LOGGER.debug("Updating detalleplanillaegresos with information: {}" , updated);
        this.wmGenericDao.update(updated);

        DetallePlanillaEgresosId id = new DetallePlanillaEgresosId();
        id.setIdPayrollDetail(updated.getIdPayrollDetail());
        id.setType_(updated.getType_());
        id.setCode(updated.getCode());
        id.setDescription_(updated.getDescription_());
        id.setCurrency(updated.getCurrency());
        id.setValue_(updated.getValue_());

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


