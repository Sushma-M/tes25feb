/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.test_25feb.dynamohr126tabs.*;


/**
 * ServiceImpl object for domain model class EmployeePersonalReference.
 * @see com.test_25feb.dynamohr126tabs.EmployeePersonalReference
 */
@Service("Dynamohr126tabs.EmployeePersonalReferenceService")
public class EmployeePersonalReferenceServiceImpl implements EmployeePersonalReferenceService {


    private static final Logger LOGGER = LoggerFactory.getLogger(EmployeePersonalReferenceServiceImpl.class);

    @Autowired
    @Qualifier("Dynamohr126tabs.EmployeePersonalReferenceDao")
    private WMGenericDao<EmployeePersonalReference, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<EmployeePersonalReference, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
     public Page<EmployeePersonalReference> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeePersonalReference create(EmployeePersonalReference employeepersonalreference) {
        LOGGER.debug("Creating a new employeepersonalreference with information: {}" , employeepersonalreference);
        return this.wmGenericDao.create(employeepersonalreference);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeePersonalReference delete(Integer employeepersonalreferenceId) throws EntityNotFoundException {
        LOGGER.debug("Deleting employeepersonalreference with id: {}" , employeepersonalreferenceId);
        EmployeePersonalReference deleted = this.wmGenericDao.findById(employeepersonalreferenceId);
        if (deleted == null) {
            LOGGER.debug("No employeepersonalreference found with id: {}" , employeepersonalreferenceId);
            throw new EntityNotFoundException(String.valueOf(employeepersonalreferenceId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<EmployeePersonalReference> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all employeepersonalreferences");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public Page<EmployeePersonalReference> findAll(Pageable pageable) {
        LOGGER.debug("Finding all employeepersonalreferences");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeePersonalReference findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding employeepersonalreference by id: {}" , id);
        EmployeePersonalReference employeepersonalreference=this.wmGenericDao.findById(id);
        if(employeepersonalreference==null){
            LOGGER.debug("No employeepersonalreference found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return employeepersonalreference;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "Dynamohr126tabsTransactionManager")
    @Override
    public EmployeePersonalReference update(EmployeePersonalReference updated) throws EntityNotFoundException {
        LOGGER.debug("Updating employeepersonalreference with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getIdEmployeePersonalReference();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "Dynamohr126tabsTransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


