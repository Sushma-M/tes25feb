/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.persistence.PrimaryKeyJoinColumn;
import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;


import java.util.Arrays;

import javax.persistence.Transient;
import javax.persistence.CascadeType;
import javax.persistence.UniqueConstraint;



/**
 * ListCommissionPayroll generated by hbm2java
 */
@Entity
@Table(name="`list_commission_payroll`"
)

public class ListCommissionPayroll  implements java.io.Serializable {

    private Integer idListCommissionPayroll;
    private Double collectionNet;
    private Float commissionChargePercentage;
    private Double commissionValueCharged;
    private String observation;
    private Integer modLocation;
    private Integer modUser;
    private Date modDate;
    private Commission commission;
    private Currency currency;
    private PayrollDetail payrollDetail;

    public ListCommissionPayroll() {
    }


    @Id @GeneratedValue(strategy=IDENTITY)
    

    @Column(name="`id_list_commission_payroll`", nullable=false, precision=10)
    public Integer getIdListCommissionPayroll() {
        return this.idListCommissionPayroll;
    }
    
    public void setIdListCommissionPayroll(Integer idListCommissionPayroll) {
        this.idListCommissionPayroll = idListCommissionPayroll;
    }

    

    @Column(name="`collection_net`", nullable=false, scale=4)
    public Double getCollectionNet() {
        return this.collectionNet;
    }
    
    public void setCollectionNet(Double collectionNet) {
        this.collectionNet = collectionNet;
    }

    

    @Column(name="`commission_charge_percentage`", nullable=false, precision=4, scale=4)
    public Float getCommissionChargePercentage() {
        return this.commissionChargePercentage;
    }
    
    public void setCommissionChargePercentage(Float commissionChargePercentage) {
        this.commissionChargePercentage = commissionChargePercentage;
    }

    

    @Column(name="`commission_value_charged`", nullable=false, scale=4)
    public Double getCommissionValueCharged() {
        return this.commissionValueCharged;
    }
    
    public void setCommissionValueCharged(Double commissionValueCharged) {
        this.commissionValueCharged = commissionValueCharged;
    }

    

    @Column(name="`observation`", length=150)
    public String getObservation() {
        return this.observation;
    }
    
    public void setObservation(String observation) {
        this.observation = observation;
    }

    

    @Column(name="`mod_location`", nullable=false, precision=10)
    public Integer getModLocation() {
        return this.modLocation;
    }
    
    public void setModLocation(Integer modLocation) {
        this.modLocation = modLocation;
    }

    

    @Column(name="`mod_user`", nullable=false, precision=10)
    public Integer getModUser() {
        return this.modUser;
    }
    
    public void setModUser(Integer modUser) {
        this.modUser = modUser;
    }

    @Temporal(TemporalType.TIMESTAMP)

    @Column(name="`mod_date`", nullable=false, length=19)
    public Date getModDate() {
        return this.modDate;
    }
    
    public void setModDate(Date modDate) {
        this.modDate = modDate;
    }

    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="`fk_commission`", nullable=false)
    public Commission getCommission() {
        return this.commission;
    }
    
    public void setCommission(Commission commission) {
        this.commission = commission;
    }

    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="`fk_currency`", nullable=false)
    public Currency getCurrency() {
        return this.currency;
    }
    
    public void setCurrency(Currency currency) {
        this.currency = currency;
    }

    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="`fk_payroll_detail`", nullable=false)
    public PayrollDetail getPayrollDetail() {
        return this.payrollDetail;
    }
    
    public void setPayrollDetail(PayrollDetail payrollDetail) {
        this.payrollDetail = payrollDetail;
    }





    public boolean equals(Object o) {
         if (this == o) return true;
		 if ( (o == null )) return false;
		 if ( !(o instanceof ListCommissionPayroll) )
		    return false;

		 ListCommissionPayroll that = (ListCommissionPayroll) o;

		 return ( (this.getIdListCommissionPayroll()==that.getIdListCommissionPayroll()) || ( this.getIdListCommissionPayroll()!=null && that.getIdListCommissionPayroll()!=null && this.getIdListCommissionPayroll().equals(that.getIdListCommissionPayroll()) ) );
    }

    public int hashCode() {
         int result = 17;

         result = 37 * result + ( getIdListCommissionPayroll() == null ? 0 : this.getIdListCommissionPayroll().hashCode() );

         return result;
    }


}

