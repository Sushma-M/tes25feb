/*Copyright (c) 2016-2017 gmail.com All Rights Reserved.
 This software is the confidential and proprietary information of gmail.com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with gmail.com*/

package com.test_25feb.dynamohr126tabs;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import javax.persistence.PrimaryKeyJoinColumn;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import org.hibernate.annotations.Type;
import org.joda.time.LocalDateTime;


import java.util.Arrays;

import javax.persistence.Transient;
import javax.persistence.CascadeType;
import javax.persistence.UniqueConstraint;



/**
 * ApplicantToPosition generated by hbm2java
 */
@Entity
@Table(name="`applicant_to_position`"
)

public class ApplicantToPosition  implements java.io.Serializable {

    private Integer idApplicantToPosition;
    private String firstName;
    private String secondName;
    private String surname;
    private String secondSurname;
    private String marriageName;
    private Character sex;
    private String identityNumber;


@Type(type="DateTime")
    private LocalDateTime birthDate;
    private String email;
    private String observation;
    private Integer modLocation;
    private Integer modUser;
    private Date modDate;
    private Set<ApplicantNote> applicantNotes = new HashSet<ApplicantNote>(0);
    private Set<ApplicantFile> applicantFiles = new HashSet<ApplicantFile>(0);
    private Set<Employee> employees = new HashSet<Employee>(0);
    private Country country;
    private TypeApplicantStatus typeApplicantStatus;
    private TypeMaritalStatus typeMaritalStatus;
    private WorkPositionVacant workPositionVacantByFkWorkPositionVacant;
    private Set<WorkPositionVacant> workPositionVacantsForFkAspiranteAsignado = new HashSet<WorkPositionVacant>(0);
    private Set<ApplicantAppointment> applicantAppointments = new HashSet<ApplicantAppointment>(0);

    public ApplicantToPosition() {
    }


    @Id 
    

    @Column(name="`id_applicant_to_position`", nullable=false, precision=10)
    public Integer getIdApplicantToPosition() {
        return this.idApplicantToPosition;
    }
    
    public void setIdApplicantToPosition(Integer idApplicantToPosition) {
        this.idApplicantToPosition = idApplicantToPosition;
    }

    

    @Column(name="`first_name`", nullable=false, length=25)
    public String getFirstName() {
        return this.firstName;
    }
    
    public void setFirstName(String firstName) {
        this.firstName = firstName;
    }

    

    @Column(name="`second_name`", length=25)
    public String getSecondName() {
        return this.secondName;
    }
    
    public void setSecondName(String secondName) {
        this.secondName = secondName;
    }

    

    @Column(name="`surname`", nullable=false, length=25)
    public String getSurname() {
        return this.surname;
    }
    
    public void setSurname(String surname) {
        this.surname = surname;
    }

    

    @Column(name="`second_surname`", length=25)
    public String getSecondSurname() {
        return this.secondSurname;
    }
    
    public void setSecondSurname(String secondSurname) {
        this.secondSurname = secondSurname;
    }

    

    @Column(name="`marriage_name`", length=25)
    public String getMarriageName() {
        return this.marriageName;
    }
    
    public void setMarriageName(String marriageName) {
        this.marriageName = marriageName;
    }

    

    @Column(name="`sex`", nullable=false, length=1)
    public Character getSex() {
        return this.sex;
    }
    
    public void setSex(Character sex) {
        this.sex = sex;
    }

    

    @Column(name="`identity_number`", nullable=false, length=25)
    public String getIdentityNumber() {
        return this.identityNumber;
    }
    
    public void setIdentityNumber(String identityNumber) {
        this.identityNumber = identityNumber;
    }

    

    @Column(name="`birth_date`", nullable=false, length=10)
    public LocalDateTime getBirthDate() {
        return this.birthDate;
    }
    
    public void setBirthDate(LocalDateTime birthDate) {
        this.birthDate = birthDate;
    }

    

    @Column(name="`email`", nullable=false, length=60)
    public String getEmail() {
        return this.email;
    }
    
    public void setEmail(String email) {
        this.email = email;
    }

    

    @Column(name="`observation`")
    public String getObservation() {
        return this.observation;
    }
    
    public void setObservation(String observation) {
        this.observation = observation;
    }

    

    @Column(name="`mod_location`", nullable=false, precision=10)
    public Integer getModLocation() {
        return this.modLocation;
    }
    
    public void setModLocation(Integer modLocation) {
        this.modLocation = modLocation;
    }

    

    @Column(name="`mod_user`", nullable=false, precision=10)
    public Integer getModUser() {
        return this.modUser;
    }
    
    public void setModUser(Integer modUser) {
        this.modUser = modUser;
    }

    @Temporal(TemporalType.TIMESTAMP)

    @Column(name="`mod_date`", nullable=false, length=19)
    public Date getModDate() {
        return this.modDate;
    }
    
    public void setModDate(Date modDate) {
        this.modDate = modDate;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="applicantToPosition")
    public Set<ApplicantNote> getApplicantNotes() {
        return this.applicantNotes;
    }
    
    public void setApplicantNotes(Set<ApplicantNote> applicantNotes) {
        this.applicantNotes = applicantNotes;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="applicantToPosition")
    public Set<ApplicantFile> getApplicantFiles() {
        return this.applicantFiles;
    }
    
    public void setApplicantFiles(Set<ApplicantFile> applicantFiles) {
        this.applicantFiles = applicantFiles;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="applicantToPosition")
    public Set<Employee> getEmployees() {
        return this.employees;
    }
    
    public void setEmployees(Set<Employee> employees) {
        this.employees = employees;
    }

    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="`fk_nationality`", nullable=false)
    public Country getCountry() {
        return this.country;
    }
    
    public void setCountry(Country country) {
        this.country = country;
    }

    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="`fk_type_applicant_status`", nullable=false)
    public TypeApplicantStatus getTypeApplicantStatus() {
        return this.typeApplicantStatus;
    }
    
    public void setTypeApplicantStatus(TypeApplicantStatus typeApplicantStatus) {
        this.typeApplicantStatus = typeApplicantStatus;
    }

    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="`fk_type_marital_status`", nullable=false)
    public TypeMaritalStatus getTypeMaritalStatus() {
        return this.typeMaritalStatus;
    }
    
    public void setTypeMaritalStatus(TypeMaritalStatus typeMaritalStatus) {
        this.typeMaritalStatus = typeMaritalStatus;
    }

    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="`fk_work_position_vacant`")
    public WorkPositionVacant getWorkPositionVacantByFkWorkPositionVacant() {
        return this.workPositionVacantByFkWorkPositionVacant;
    }
    
    public void setWorkPositionVacantByFkWorkPositionVacant(WorkPositionVacant workPositionVacantByFkWorkPositionVacant) {
        this.workPositionVacantByFkWorkPositionVacant = workPositionVacantByFkWorkPositionVacant;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="applicantToPositionByFkAspiranteAsignado")
    public Set<WorkPositionVacant> getWorkPositionVacantsForFkAspiranteAsignado() {
        return this.workPositionVacantsForFkAspiranteAsignado;
    }
    
    public void setWorkPositionVacantsForFkAspiranteAsignado(Set<WorkPositionVacant> workPositionVacantsForFkAspiranteAsignado) {
        this.workPositionVacantsForFkAspiranteAsignado = workPositionVacantsForFkAspiranteAsignado;
    }

    @OneToMany(fetch=FetchType.LAZY, cascade = {CascadeType.ALL}, mappedBy="applicantToPosition")
    public Set<ApplicantAppointment> getApplicantAppointments() {
        return this.applicantAppointments;
    }
    
    public void setApplicantAppointments(Set<ApplicantAppointment> applicantAppointments) {
        this.applicantAppointments = applicantAppointments;
    }





    public boolean equals(Object o) {
         if (this == o) return true;
		 if ( (o == null )) return false;
		 if ( !(o instanceof ApplicantToPosition) )
		    return false;

		 ApplicantToPosition that = (ApplicantToPosition) o;

		 return ( (this.getIdApplicantToPosition()==that.getIdApplicantToPosition()) || ( this.getIdApplicantToPosition()!=null && that.getIdApplicantToPosition()!=null && this.getIdApplicantToPosition().equals(that.getIdApplicantToPosition()) ) );
    }

    public int hashCode() {
         int result = 17;

         result = 37 * result + ( getIdApplicantToPosition() == null ? 0 : this.getIdApplicantToPosition().hashCode() );

         return result;
    }


}

